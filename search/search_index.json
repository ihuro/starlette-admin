{"config":{"indexing":"full","lang":["en","es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Starlette-Admin is a fast, beautiful and extensible administrative interface framework for Starlette/FastApi applications. Getting started Check out the documentation . Try the live demo . ( Source code ) Try the several usage examples included in the /examples folder Features CRUD any data with ease Automatic form validation Advanced table widget with Datatables Search and filtering Search highlighting Multi-column ordering Export data to CSV/EXCEL/PDF and Browser Print Authentication Authorization Manage Files Custom views Custom batch actions Supported ORMs SQLAlchemy SQLModel MongoEngine ODMantic Custom backend ( doc , example ) Installation PIP $ pip install starlette-admin Poetry $ poetry add starlette-admin Example This is a simple example with SQLAlchemy model from sqlalchemy import Column , Integer , String , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) # Define your model class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) Base . metadata . create_all ( engine ) app = Starlette () # FastAPI() # Create admin admin = Admin ( engine , title = \"Example: SQLAlchemy\" ) # Add view admin . add_view ( ModelView ( Post )) # Mount admin to your app admin . mount_to ( app ) Access your admin interface in your browser at http://localhost:8000/admin Third party starlette-admin is built with other open source projects: Tabler Datatables jquery Select2 flatpickr moment jsoneditor fontawesome","title":"Overview"},{"location":"#overview","text":"Starlette-Admin is a fast, beautiful and extensible administrative interface framework for Starlette/FastApi applications.","title":"Overview"},{"location":"#getting-started","text":"Check out the documentation . Try the live demo . ( Source code ) Try the several usage examples included in the /examples folder","title":"Getting started"},{"location":"#features","text":"CRUD any data with ease Automatic form validation Advanced table widget with Datatables Search and filtering Search highlighting Multi-column ordering Export data to CSV/EXCEL/PDF and Browser Print Authentication Authorization Manage Files Custom views Custom batch actions Supported ORMs SQLAlchemy SQLModel MongoEngine ODMantic Custom backend ( doc , example )","title":"Features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#pip","text":"$ pip install starlette-admin","title":"PIP"},{"location":"#poetry","text":"$ poetry add starlette-admin","title":"Poetry"},{"location":"#example","text":"This is a simple example with SQLAlchemy model from sqlalchemy import Column , Integer , String , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) # Define your model class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) Base . metadata . create_all ( engine ) app = Starlette () # FastAPI() # Create admin admin = Admin ( engine , title = \"Example: SQLAlchemy\" ) # Add view admin . add_view ( ModelView ( Post )) # Mount admin to your app admin . mount_to ( app ) Access your admin interface in your browser at http://localhost:8000/admin","title":"Example"},{"location":"#third-party","text":"starlette-admin is built with other open source projects: Tabler Datatables jquery Select2 flatpickr moment jsoneditor fontawesome","title":"Third party"},{"location":"advanced/base-model-view/","text":"Extending BaseModelView Starlette-Admin makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin \u2019s model views work as expected, then you should take note of the following: Each model must have one field which acts as a primary key to uniquely identify instances of that model. However, there are no restriction on the data type or the field name of the primary key field. Models must make their data accessible as python properties. If that is the case, then you can implement your own database backend by extending the BaseModelView class, and implementing the set of methods listed below. Let's say you've defined your models like this: from dataclasses import dataclass from typing import List @dataclass class Post : id : int title : str content : str tags : List [ str ] First you need to define a new class, which derives from BaseModelView . from starlette_admin import BaseModelView class PostView ( BaseModelView ): pass Now, implement the following methods or attributes for the new class: Metadata Set the identity , name and label for the new class from starlette_admin import BaseModelView class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" Important identity is used to identify the model associated to this view and should be unique. Primary key Set the pk_attr value which is primary key attribute name from starlette_admin import BaseModelView class PostView ( BaseModelView ): pk_attr = \"id\" Fields Internally, Starlette-Admin uses custom fields all inherit from BaseField to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See API Reference for full list of default fields. from starlette_admin import BaseModelView from starlette_admin import IntegerField , StringField , TagsField , TextAreaField class PostView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] CRUD methods Finally, you need to implement these CRUD methods: count() find_all() create() edit() delete() Full example from dataclasses import dataclass from typing import Any , Dict , Iterable , List , Optional , Union from starlette.requests import Request from starlette_admin import IntegerField , StringField , TagsField , TextAreaField from starlette_admin.exceptions import FormValidationError from starlette_admin.views import BaseModelView @dataclass class Post : id : int title : str content : str tags : List [ str ] def is_valid_for_term ( self , term ): return ( str ( term ) . lower () in self . title . lower () or str ( term ) . lower () in self . content . lower () or any ([ str ( term ) . lower () in tag . lower () for tag in self . tags ]) ) def update ( self , data : Dict ): for key , value in data . items (): if hasattr ( self , key ): setattr ( self , key , value ) db : Dict [ int , Post ] = dict () next_id = 1 def filter_values ( values : Iterable [ Post ], term ): filtered_values = [] for value in values : if value . is_valid_for_term ( term ): filtered_values . append ( value ) return filtered_values class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" pk_attr = \"id\" fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] sortable_fields = ( \"id\" , \"title\" , \"content\" ) search_builder = False async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : values = list ( db . values ()) if where is not None : values = filter_values ( values , where ) return len ( values ) async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: values = list ( db . values ()) if order_by is not None : assert len ( order_by ) < 2 , \"Not supported\" if len ( order_by ) == 1 : key , dir = order_by [ 0 ] . split ( maxsplit = 1 ) values . sort ( key = lambda v : getattr ( v , key ), reverse = ( dir == \"desc\" )) if where is not None and isinstance ( where , ( str , int )): values = filter_values ( values , where ) if limit > 0 : return values [ skip : skip + limit ] return values [ skip :] async def find_by_pk ( self , request : Request , pk ): return db . get ( int ( pk ), None ) async def find_by_pks ( self , request : Request , pks ): return [ db . get ( int ( pk )) for pk in pks ] async def validate_data ( self , data : Dict ): errors = {} if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure title has at least 03 characters\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"You need at least one tag\" if len ( errors ) > 0 : raise FormValidationError ( errors ) async def create ( self , request : Request , data : Dict ): await self . validate_data ( data ) global next_id obj = Post ( id = next_id , ** data ) db [ next_id ] = obj next_id += 1 return obj async def edit ( self , request : Request , pk , data : Dict ): await self . validate_data ( data ) db [ int ( pk )] . update ( data ) return db [ int ( pk )] async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: cnt = 0 for pk in pks : value = await self . find_by_pk ( request , pk ) if value is not None : del db [ int ( pk )] cnt += 1 return cnt","title":"Extending BaseModelView"},{"location":"advanced/base-model-view/#extending-basemodelview","text":"Starlette-Admin makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin \u2019s model views work as expected, then you should take note of the following: Each model must have one field which acts as a primary key to uniquely identify instances of that model. However, there are no restriction on the data type or the field name of the primary key field. Models must make their data accessible as python properties. If that is the case, then you can implement your own database backend by extending the BaseModelView class, and implementing the set of methods listed below. Let's say you've defined your models like this: from dataclasses import dataclass from typing import List @dataclass class Post : id : int title : str content : str tags : List [ str ] First you need to define a new class, which derives from BaseModelView . from starlette_admin import BaseModelView class PostView ( BaseModelView ): pass Now, implement the following methods or attributes for the new class:","title":"Extending BaseModelView"},{"location":"advanced/base-model-view/#metadata","text":"Set the identity , name and label for the new class from starlette_admin import BaseModelView class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" Important identity is used to identify the model associated to this view and should be unique.","title":"Metadata"},{"location":"advanced/base-model-view/#primary-key","text":"Set the pk_attr value which is primary key attribute name from starlette_admin import BaseModelView class PostView ( BaseModelView ): pk_attr = \"id\"","title":"Primary key"},{"location":"advanced/base-model-view/#fields","text":"Internally, Starlette-Admin uses custom fields all inherit from BaseField to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See API Reference for full list of default fields. from starlette_admin import BaseModelView from starlette_admin import IntegerField , StringField , TagsField , TextAreaField class PostView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ]","title":"Fields"},{"location":"advanced/base-model-view/#crud-methods","text":"Finally, you need to implement these CRUD methods: count() find_all() create() edit() delete()","title":"CRUD methods"},{"location":"advanced/base-model-view/#full-example","text":"from dataclasses import dataclass from typing import Any , Dict , Iterable , List , Optional , Union from starlette.requests import Request from starlette_admin import IntegerField , StringField , TagsField , TextAreaField from starlette_admin.exceptions import FormValidationError from starlette_admin.views import BaseModelView @dataclass class Post : id : int title : str content : str tags : List [ str ] def is_valid_for_term ( self , term ): return ( str ( term ) . lower () in self . title . lower () or str ( term ) . lower () in self . content . lower () or any ([ str ( term ) . lower () in tag . lower () for tag in self . tags ]) ) def update ( self , data : Dict ): for key , value in data . items (): if hasattr ( self , key ): setattr ( self , key , value ) db : Dict [ int , Post ] = dict () next_id = 1 def filter_values ( values : Iterable [ Post ], term ): filtered_values = [] for value in values : if value . is_valid_for_term ( term ): filtered_values . append ( value ) return filtered_values class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" pk_attr = \"id\" fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] sortable_fields = ( \"id\" , \"title\" , \"content\" ) search_builder = False async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : values = list ( db . values ()) if where is not None : values = filter_values ( values , where ) return len ( values ) async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: values = list ( db . values ()) if order_by is not None : assert len ( order_by ) < 2 , \"Not supported\" if len ( order_by ) == 1 : key , dir = order_by [ 0 ] . split ( maxsplit = 1 ) values . sort ( key = lambda v : getattr ( v , key ), reverse = ( dir == \"desc\" )) if where is not None and isinstance ( where , ( str , int )): values = filter_values ( values , where ) if limit > 0 : return values [ skip : skip + limit ] return values [ skip :] async def find_by_pk ( self , request : Request , pk ): return db . get ( int ( pk ), None ) async def find_by_pks ( self , request : Request , pks ): return [ db . get ( int ( pk )) for pk in pks ] async def validate_data ( self , data : Dict ): errors = {} if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure title has at least 03 characters\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"You need at least one tag\" if len ( errors ) > 0 : raise FormValidationError ( errors ) async def create ( self , request : Request , data : Dict ): await self . validate_data ( data ) global next_id obj = Post ( id = next_id , ** data ) db [ next_id ] = obj next_id += 1 return obj async def edit ( self , request : Request , pk , data : Dict ): await self . validate_data ( data ) db [ int ( pk )] . update ( data ) return db [ int ( pk )] async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: cnt = 0 for pk in pks : value = await self . find_by_pk ( request , pk ) if value is not None : del db [ int ( pk )] cnt += 1 return cnt","title":"Full example"},{"location":"advanced/custom-field/","text":"Custom Field Starlette-Admin has a lot of built-in fields available. But you can override or create your own field according to your need. Important Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases. The first step is to define a new class, which derives from BaseField or any others fields to customize it from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): pass List Rendering Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation . First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class Example This is simple example with SQLAlchemy backend from starlette_admin.contrib.sqla import Admin as BaseAdmin class Admin ( BaseAdmin ): def custom_render_js ( self , request : Request ) -> Optional [ str ]: return request . url_for ( \"statics\" , path = \"js/custom_render.js\" ) admin = Admin ( engine ) admin . add_view ( ... ) statics/js/custom_render.js Object . assign ( render , { mycustomkey : function render ( data , type , full , meta , fieldOptions ) { ... }, }); Note fieldOptions is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass asdict function. Then, set render_function_key value from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" Form For form rendering, you should create a new html file under the directory forms in your templates dir. These jinja2 variables are available: field : Your field instance error : Error message coming from FormValidationError data : current value. Will be available if it is edit or when validation error occur action : EDIT or CREATE Example forms/custom.html < div class = \"{%if error%}is-invalid{%endif%}\" > < input id = \"{{field.id}}\" name = \"{{field.id}}\" ... /> {% if field.help_text %} < small class = \"form-hint\" > {{field.help_text}} </ small > {%endif%} </ div > {%if error %} < div class = \"invalid-feedback\" > {{error}} </ div > {%endif%} from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" Detail Page To render your field on detail page, you should create a new html file under the directory displays in your template dir. These jinja2 variables are available: field : Your field instance data : value to display Example displays/custom.html < span > Hello {{data}} </ span > from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" Data processing For data processing you will need to override two functions: process_form_data : Will be call when converting field value into python dict object serialize_field_value : Will be call when serializing value to send through the API. This is the same data you will get in your render function from dataclasses import dataclass from typing import Any , Dict from requests import Request from starlette.datastructures import FormData from starlette_admin import BaseField @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" async def parse_form_data ( self , request : Request , form_data : FormData ) -> Any : return form_data . get ( self . name ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def dict ( self ) -> Dict [ str , Any ]: return super () . dict () Important Override dict function to get control of the options which is available in javascript.","title":"Custom Field"},{"location":"advanced/custom-field/#custom-field","text":"Starlette-Admin has a lot of built-in fields available. But you can override or create your own field according to your need. Important Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases. The first step is to define a new class, which derives from BaseField or any others fields to customize it from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): pass","title":"Custom Field"},{"location":"advanced/custom-field/#list-rendering","text":"Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation . First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class Example This is simple example with SQLAlchemy backend from starlette_admin.contrib.sqla import Admin as BaseAdmin class Admin ( BaseAdmin ): def custom_render_js ( self , request : Request ) -> Optional [ str ]: return request . url_for ( \"statics\" , path = \"js/custom_render.js\" ) admin = Admin ( engine ) admin . add_view ( ... ) statics/js/custom_render.js Object . assign ( render , { mycustomkey : function render ( data , type , full , meta , fieldOptions ) { ... }, }); Note fieldOptions is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass asdict function. Then, set render_function_key value from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\"","title":"List Rendering"},{"location":"advanced/custom-field/#form","text":"For form rendering, you should create a new html file under the directory forms in your templates dir. These jinja2 variables are available: field : Your field instance error : Error message coming from FormValidationError data : current value. Will be available if it is edit or when validation error occur action : EDIT or CREATE Example forms/custom.html < div class = \"{%if error%}is-invalid{%endif%}\" > < input id = \"{{field.id}}\" name = \"{{field.id}}\" ... /> {% if field.help_text %} < small class = \"form-hint\" > {{field.help_text}} </ small > {%endif%} </ div > {%if error %} < div class = \"invalid-feedback\" > {{error}} </ div > {%endif%} from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\"","title":"Form"},{"location":"advanced/custom-field/#detail-page","text":"To render your field on detail page, you should create a new html file under the directory displays in your template dir. These jinja2 variables are available: field : Your field instance data : value to display Example displays/custom.html < span > Hello {{data}} </ span > from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\"","title":"Detail Page"},{"location":"advanced/custom-field/#data-processing","text":"For data processing you will need to override two functions: process_form_data : Will be call when converting field value into python dict object serialize_field_value : Will be call when serializing value to send through the API. This is the same data you will get in your render function from dataclasses import dataclass from typing import Any , Dict from requests import Request from starlette.datastructures import FormData from starlette_admin import BaseField @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" async def parse_form_data ( self , request : Request , form_data : FormData ) -> Any : return form_data . get ( self . name ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def dict ( self ) -> Dict [ str , Any ]: return super () . dict () Important Override dict function to get control of the options which is available in javascript.","title":"Data processing"},{"location":"alternatives/","text":"Alternatives, Inspiration and Comparisons Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi. FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM. sqladmin: SQLAlchemy Admin for FastAPI and Starlette","title":"Alternatives, Inspiration and Comparisons"},{"location":"alternatives/#alternatives-inspiration-and-comparisons","text":"Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi. FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM. sqladmin: SQLAlchemy Admin for FastAPI and Starlette","title":"Alternatives, Inspiration and Comparisons"},{"location":"api/actions/","text":"starlette_admin . actions . action ( name , text , confirmation = None , submit_btn_text = 'Proceed' , submit_btn_class = 'btn-primary' ) Use this decorator to add custom actions to your ModelView Parameters: Name Type Description Default name str unique action name for your ModelView required text str Action text required confirmation Optional [ str ] Confirmation text. If not provided, action will be executed unconditionally. None submit_btn_text Optional [ str ] Submit button text 'Proceed' submit_btn_class Optional [ str ] Submit button variant (ex. button-primary , button-ghost-info , btn-outline-danger , ...) 'btn-primary' Usage class ArticleView ( ModelView ): actions = [ 'make_published' ] @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks )) Source code in starlette_admin/actions.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def action ( name : str , text : str , confirmation : Optional [ str ] = None , submit_btn_text : Optional [ str ] = \"Proceed\" , submit_btn_class : Optional [ str ] = \"btn-primary\" , ) -> Callable [[ Callable [ ... , Awaitable [ str ]]], Any ]: \"\"\" Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView] Args: name: unique action name for your ModelView text: Action text confirmation: Confirmation text. If not provided, action will be executed unconditionally. submit_btn_text: Submit button text submit_btn_class: Submit button variant (ex. `button-primary`, `button-ghost-info`, `btn-outline-danger`, ...) !!! usage ```python class ArticleView(ModelView): actions = ['make_published'] @action( name=\"make_published\", text=\"Mark selected articles as published\", confirmation=\"Are you sure you want to mark selected articles as published ?\", submit_btn_text=\"Yes, proceed\", submit_btn_class=\"btn-success\", ) async def make_published_action(self, request: Request, pks: List[Any]) -> str: # Write your logic here if ... : # Display meaningfully error raise ActionFailed(\"Sorry, We can't proceed this action now.\") # Display successfully message return \"{} articles were successfully marked as published\".format(len(pks)) ``` \"\"\" def wrap ( f : Callable [ ... , Awaitable [ str ]]) -> Callable [ ... , Awaitable [ str ]]: f . _action = { # type: ignore \"name\" : name , \"text\" : text , \"confirmation\" : confirmation , \"submit_btn_text\" : submit_btn_text , \"submit_btn_class\" : submit_btn_class , } return f return wrap","title":"Actions"},{"location":"api/actions/#starlette_admin.actions.action","text":"Use this decorator to add custom actions to your ModelView Parameters: Name Type Description Default name str unique action name for your ModelView required text str Action text required confirmation Optional [ str ] Confirmation text. If not provided, action will be executed unconditionally. None submit_btn_text Optional [ str ] Submit button text 'Proceed' submit_btn_class Optional [ str ] Submit button variant (ex. button-primary , button-ghost-info , btn-outline-danger , ...) 'btn-primary' Usage class ArticleView ( ModelView ): actions = [ 'make_published' ] @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks )) Source code in starlette_admin/actions.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def action ( name : str , text : str , confirmation : Optional [ str ] = None , submit_btn_text : Optional [ str ] = \"Proceed\" , submit_btn_class : Optional [ str ] = \"btn-primary\" , ) -> Callable [[ Callable [ ... , Awaitable [ str ]]], Any ]: \"\"\" Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView] Args: name: unique action name for your ModelView text: Action text confirmation: Confirmation text. If not provided, action will be executed unconditionally. submit_btn_text: Submit button text submit_btn_class: Submit button variant (ex. `button-primary`, `button-ghost-info`, `btn-outline-danger`, ...) !!! usage ```python class ArticleView(ModelView): actions = ['make_published'] @action( name=\"make_published\", text=\"Mark selected articles as published\", confirmation=\"Are you sure you want to mark selected articles as published ?\", submit_btn_text=\"Yes, proceed\", submit_btn_class=\"btn-success\", ) async def make_published_action(self, request: Request, pks: List[Any]) -> str: # Write your logic here if ... : # Display meaningfully error raise ActionFailed(\"Sorry, We can't proceed this action now.\") # Display successfully message return \"{} articles were successfully marked as published\".format(len(pks)) ``` \"\"\" def wrap ( f : Callable [ ... , Awaitable [ str ]]) -> Callable [ ... , Awaitable [ str ]]: f . _action = { # type: ignore \"name\" : name , \"text\" : text , \"confirmation\" : confirmation , \"submit_btn_text\" : submit_btn_text , \"submit_btn_class\" : submit_btn_class , } return f return wrap","title":"action()"},{"location":"api/auth-provider/","text":"starlette_admin.auth.AuthProvider Base class for implementing the Authentication into your admin interface Source code in starlette_admin/auth.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 class AuthProvider : \"\"\" Base class for implementing the Authentication into your admin interface \"\"\" def __init__ ( self , login_path : str = \"/login\" , logout_path : str = \"/logout\" ) -> None : self . login_path = login_path self . logout_path = logout_path async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : \"\"\" This method will be called to validate user credentials Returns: response: return the response back Raises: FormValidationError: when form values is not valid LoginFailed: to display general error Examples: ```python async def login( self, username: str, password: str, remember_me: bool, request: Request, response: Response, ) -> Response: if len(username) < 3: # Form data validation raise FormValidationError( {\"username\": \"Ensure username has at least 03 characters\"} ) if username in my_users_db and password == \"password\": # Save username in session request.session.update({\"username\": username}) return response raise LoginFailed(\"Invalid username or password\") ``` \"\"\" raise LoginFailed ( \"Not Implemented\" ) async def is_authenticated ( self , request : Request ) -> bool : \"\"\" This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface Returns: True: to accept the request False: to redirect to login page Examples: ```python async def is_authenticated(self, request: Request) -> bool: if request.session.get(\"username\", None) in users: # Save user object in state request.state.user = my_users_db.get(request.session[\"username\"]) return True return False ``` \"\"\" return False def get_admin_user ( self , request : Request ) -> Optional [ AdminUser ]: \"\"\" Override this method to display connected user `name` and/or `profile` Returns: AdminUser: The connected user info Examples: ```python def get_admin_user(self, request: Request) -> AdminUser: user = request.state.user # Retrieve current user (previously save in state) return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"]) ``` \"\"\" return None async def logout ( self , request : Request , response : Response ) -> Response : \"\"\" Implement logout logic (clear sessions, cookies, ...) here and return the response back Returns: response: return the response back Examples: ```python async def logout(self, request: Request, response: Response) -> Response: request.session.clear() return response ``` \"\"\" raise NotImplementedError () get_admin_user ( request ) Override this method to display connected user name and/or profile Returns: Name Type Description AdminUser Optional [ AdminUser ] The connected user info Examples: def get_admin_user ( self , request : Request ) -> AdminUser : user = request . state . user # Retrieve current user (previously save in state) return AdminUser ( username = user [ \"name\" ], photo_url = user [ \"photo_url\" ]) Source code in starlette_admin/auth.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_admin_user ( self , request : Request ) -> Optional [ AdminUser ]: \"\"\" Override this method to display connected user `name` and/or `profile` Returns: AdminUser: The connected user info Examples: ```python def get_admin_user(self, request: Request) -> AdminUser: user = request.state.user # Retrieve current user (previously save in state) return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"]) ``` \"\"\" return None is_authenticated ( request ) async This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface Returns: Name Type Description True bool to accept the request False bool to redirect to login page Examples: async def is_authenticated ( self , request : Request ) -> bool : if request . session . get ( \"username\" , None ) in users : # Save user object in state request . state . user = my_users_db . get ( request . session [ \"username\" ]) return True return False Source code in starlette_admin/auth.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def is_authenticated ( self , request : Request ) -> bool : \"\"\" This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface Returns: True: to accept the request False: to redirect to login page Examples: ```python async def is_authenticated(self, request: Request) -> bool: if request.session.get(\"username\", None) in users: # Save user object in state request.state.user = my_users_db.get(request.session[\"username\"]) return True return False ``` \"\"\" return False login ( username , password , remember_me , request , response ) async This method will be called to validate user credentials Returns: Name Type Description response Response return the response back Raises: Type Description FormValidationError when form values is not valid LoginFailed to display general error Examples: async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : # Form data validation raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in my_users_db and password == \"password\" : # Save username in session request . session . update ({ \"username\" : username }) return response raise LoginFailed ( \"Invalid username or password\" ) Source code in starlette_admin/auth.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : \"\"\" This method will be called to validate user credentials Returns: response: return the response back Raises: FormValidationError: when form values is not valid LoginFailed: to display general error Examples: ```python async def login( self, username: str, password: str, remember_me: bool, request: Request, response: Response, ) -> Response: if len(username) < 3: # Form data validation raise FormValidationError( {\"username\": \"Ensure username has at least 03 characters\"} ) if username in my_users_db and password == \"password\": # Save username in session request.session.update({\"username\": username}) return response raise LoginFailed(\"Invalid username or password\") ``` \"\"\" raise LoginFailed ( \"Not Implemented\" ) logout ( request , response ) async Implement logout logic (clear sessions, cookies, ...) here and return the response back Returns: Name Type Description response Response return the response back Examples: async def logout ( self , request : Request , response : Response ) -> Response : request . session . clear () return response Source code in starlette_admin/auth.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 async def logout ( self , request : Request , response : Response ) -> Response : \"\"\" Implement logout logic (clear sessions, cookies, ...) here and return the response back Returns: response: return the response back Examples: ```python async def logout(self, request: Request, response: Response) -> Response: request.session.clear() return response ``` \"\"\" raise NotImplementedError ()","title":"AuthProvider"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider","text":"Base class for implementing the Authentication into your admin interface Source code in starlette_admin/auth.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 class AuthProvider : \"\"\" Base class for implementing the Authentication into your admin interface \"\"\" def __init__ ( self , login_path : str = \"/login\" , logout_path : str = \"/logout\" ) -> None : self . login_path = login_path self . logout_path = logout_path async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : \"\"\" This method will be called to validate user credentials Returns: response: return the response back Raises: FormValidationError: when form values is not valid LoginFailed: to display general error Examples: ```python async def login( self, username: str, password: str, remember_me: bool, request: Request, response: Response, ) -> Response: if len(username) < 3: # Form data validation raise FormValidationError( {\"username\": \"Ensure username has at least 03 characters\"} ) if username in my_users_db and password == \"password\": # Save username in session request.session.update({\"username\": username}) return response raise LoginFailed(\"Invalid username or password\") ``` \"\"\" raise LoginFailed ( \"Not Implemented\" ) async def is_authenticated ( self , request : Request ) -> bool : \"\"\" This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface Returns: True: to accept the request False: to redirect to login page Examples: ```python async def is_authenticated(self, request: Request) -> bool: if request.session.get(\"username\", None) in users: # Save user object in state request.state.user = my_users_db.get(request.session[\"username\"]) return True return False ``` \"\"\" return False def get_admin_user ( self , request : Request ) -> Optional [ AdminUser ]: \"\"\" Override this method to display connected user `name` and/or `profile` Returns: AdminUser: The connected user info Examples: ```python def get_admin_user(self, request: Request) -> AdminUser: user = request.state.user # Retrieve current user (previously save in state) return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"]) ``` \"\"\" return None async def logout ( self , request : Request , response : Response ) -> Response : \"\"\" Implement logout logic (clear sessions, cookies, ...) here and return the response back Returns: response: return the response back Examples: ```python async def logout(self, request: Request, response: Response) -> Response: request.session.clear() return response ``` \"\"\" raise NotImplementedError ()","title":"AuthProvider"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.get_admin_user","text":"Override this method to display connected user name and/or profile Returns: Name Type Description AdminUser Optional [ AdminUser ] The connected user info Examples: def get_admin_user ( self , request : Request ) -> AdminUser : user = request . state . user # Retrieve current user (previously save in state) return AdminUser ( username = user [ \"name\" ], photo_url = user [ \"photo_url\" ]) Source code in starlette_admin/auth.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def get_admin_user ( self , request : Request ) -> Optional [ AdminUser ]: \"\"\" Override this method to display connected user `name` and/or `profile` Returns: AdminUser: The connected user info Examples: ```python def get_admin_user(self, request: Request) -> AdminUser: user = request.state.user # Retrieve current user (previously save in state) return AdminUser(username=user[\"name\"], photo_url=user[\"photo_url\"]) ``` \"\"\" return None","title":"get_admin_user()"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.is_authenticated","text":"This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface Returns: Name Type Description True bool to accept the request False bool to redirect to login page Examples: async def is_authenticated ( self , request : Request ) -> bool : if request . session . get ( \"username\" , None ) in users : # Save user object in state request . state . user = my_users_db . get ( request . session [ \"username\" ]) return True return False Source code in starlette_admin/auth.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def is_authenticated ( self , request : Request ) -> bool : \"\"\" This method will be called to validate each incoming request. You can also save the connected user information into the request state and use it later to restrict access to some part of your admin interface Returns: True: to accept the request False: to redirect to login page Examples: ```python async def is_authenticated(self, request: Request) -> bool: if request.session.get(\"username\", None) in users: # Save user object in state request.state.user = my_users_db.get(request.session[\"username\"]) return True return False ``` \"\"\" return False","title":"is_authenticated()"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.login","text":"This method will be called to validate user credentials Returns: Name Type Description response Response return the response back Raises: Type Description FormValidationError when form values is not valid LoginFailed to display general error Examples: async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : # Form data validation raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in my_users_db and password == \"password\" : # Save username in session request . session . update ({ \"username\" : username }) return response raise LoginFailed ( \"Invalid username or password\" ) Source code in starlette_admin/auth.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : \"\"\" This method will be called to validate user credentials Returns: response: return the response back Raises: FormValidationError: when form values is not valid LoginFailed: to display general error Examples: ```python async def login( self, username: str, password: str, remember_me: bool, request: Request, response: Response, ) -> Response: if len(username) < 3: # Form data validation raise FormValidationError( {\"username\": \"Ensure username has at least 03 characters\"} ) if username in my_users_db and password == \"password\": # Save username in session request.session.update({\"username\": username}) return response raise LoginFailed(\"Invalid username or password\") ``` \"\"\" raise LoginFailed ( \"Not Implemented\" )","title":"login()"},{"location":"api/auth-provider/#starlette_admin.auth.AuthProvider.logout","text":"Implement logout logic (clear sessions, cookies, ...) here and return the response back Returns: Name Type Description response Response return the response back Examples: async def logout ( self , request : Request , response : Response ) -> Response : request . session . clear () return response Source code in starlette_admin/auth.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 async def logout ( self , request : Request , response : Response ) -> Response : \"\"\" Implement logout logic (clear sessions, cookies, ...) here and return the response back Returns: response: return the response back Examples: ```python async def logout(self, request: Request, response: Response) -> Response: request.session.clear() return response ``` \"\"\" raise NotImplementedError ()","title":"logout()"},{"location":"api/base-admin/","text":"starlette_admin.base.BaseAdmin Base class for implementing Admin interface. Source code in starlette_admin/base.pyclass BaseAdmin : \"\"\"Base class for implementing Admin interface.\"\"\" def __init__ ( self , title : str = \"Admin\" , base_url : str = \"/admin\" , route_name : str = \"admin\" , logo_url : Optional [ str ] = None , login_logo_url : Optional [ str ] = None , templates_dir : str = \"templates\" , statics_dir : Optional [ str ] = None , index_view : Optional [ CustomView ] = None , auth_provider : Optional [ AuthProvider ] = None , middlewares : Optional [ Sequence [ Middleware ]] = None , debug : bool = False , ): \"\"\" Parameters: title: Admin title. base_url: Base URL for Admin interface. route_name: Mounted Admin name logo_url: URL of logo to be displayed instead of title. login_logo_url: If set, it will be used for login interface instead of logo_url. templates_dir: Templates dir for customisation statics_dir: Statics dir for customisation index_view: CustomView to use for index page. auth_provider: Authentication Provider middlewares: Starlette middlewares \"\"\" self . title = title self . base_url = base_url self . route_name = route_name self . logo_url = logo_url self . login_logo_url = login_logo_url self . templates_dir = templates_dir self . statics_dir = statics_dir self . auth_provider = auth_provider self . middlewares = middlewares self . index_view = ( index_view if ( index_view is not None ) else CustomView ( \"\" , add_to_menu = False ) ) self . _views : List [ BaseView ] = [] self . _models : List [ BaseModelView ] = [] self . routes : List [ Union [ Route , Mount ]] = [] self . debug = debug self . _setup_templates () self . init_auth () self . init_routes () def add_view ( self , view : Union [ Type [ BaseView ], BaseView ]) -> None : \"\"\" Add View to the Admin interface. \"\"\" if isinstance ( view , BaseView ): view_instance = view else : view_instance = view () self . _views . append ( view_instance ) self . setup_view ( view_instance ) def custom_render_js ( self , request : Request ) -> Optional [ str ]: \"\"\" Override this function to provide a link to custom js to override the global `render` object in javascript which is use to render fields in list page. Args: request: Starlette Request \"\"\" return None def init_auth ( self ) -> None : if self . auth_provider is not None : self . middlewares = ( [] if self . middlewares is None else list ( self . middlewares ) ) self . middlewares . append ( Middleware ( AuthMiddleware , provider = self . auth_provider ) ) self . routes . extend ( [ Route ( self . auth_provider . login_path , self . _render_login , methods = [ \"GET\" , \"POST\" ], name = \"login\" , ), Route ( self . auth_provider . logout_path , self . _render_logout , methods = [ \"GET\" ], name = \"logout\" , ), ] ) def init_routes ( self ) -> None : statics = StaticFiles ( directory = self . statics_dir , packages = [ \"starlette_admin\" ]) self . routes . extend ( [ Mount ( \"/statics\" , app = statics , name = \"statics\" ), Route ( self . index_view . path , self . _render_custom_view ( self . index_view ), methods = self . index_view . methods , name = \"index\" , ), Route ( \"/api/ {identity} \" , self . _render_api , methods = [ \"GET\" ], name = \"api\" , ), Route ( \"/api/ {identity} /action\" , self . handle_action , methods = [ \"POST\" ], name = \"action\" , ), Route ( \"/ {identity} /list\" , self . _render_list , methods = [ \"GET\" ], name = \"list\" , ), Route ( \"/ {identity} /detail/ {pk} \" , self . _render_detail , methods = [ \"GET\" ], name = \"detail\" , ), Route ( \"/ {identity} /create\" , self . _render_create , methods = [ \"GET\" , \"POST\" ], name = \"create\" , ), Route ( \"/ {identity} /edit/ {pk} \" , self . _render_edit , methods = [ \"GET\" , \"POST\" ], name = \"edit\" , ), ] ) if self . index_view . add_to_menu : self . _views . append ( self . index_view ) def _setup_templates ( self ) -> None : templates = Jinja2Templates ( self . templates_dir ) templates . env . loader = ChoiceLoader ( [ FileSystemLoader ( self . templates_dir ), PackageLoader ( \"starlette_admin\" , \"templates\" ), ] ) templates . env . globals [ \"views\" ] = self . _views templates . env . globals [ \"title\" ] = self . title templates . env . globals [ \"is_auth_enabled\" ] = self . auth_provider is not None templates . env . globals [ \"__name__\" ] = self . route_name templates . env . globals [ \"logo_url\" ] = self . logo_url templates . env . globals [ \"login_logo_url\" ] = self . login_logo_url templates . env . globals [ \"custom_render_js\" ] = lambda r : self . custom_render_js ( r ) templates . env . filters [ \"is_custom_view\" ] = lambda res : isinstance ( res , CustomView ) templates . env . filters [ \"is_link\" ] = lambda res : isinstance ( res , Link ) templates . env . filters [ \"is_model\" ] = lambda res : isinstance ( res , BaseModelView ) templates . env . filters [ \"is_dropdown\" ] = lambda res : isinstance ( res , DropDown ) templates . env . filters [ \"get_admin_user\" ] = ( self . auth_provider . get_admin_user if self . auth_provider else None ) templates . env . filters [ \"tojson\" ] = lambda data : json . dumps ( data , default = str ) templates . env . filters [ \"file_icon\" ] = get_file_icon templates . env . filters [ \"to_model\" ] = lambda identity : self . _find_model_from_identity ( identity ) templates . env . filters [ \"is_iter\" ] = lambda v : isinstance ( v , ( list , tuple )) templates . env . filters [ \"is_str\" ] = lambda v : isinstance ( v , str ) templates . env . filters [ \"is_dict\" ] = lambda v : isinstance ( v , dict ) self . templates = templates def setup_view ( self , view : BaseView ) -> None : if isinstance ( view , DropDown ): for sub_view in view . views : self . setup_view ( sub_view ) elif isinstance ( view , CustomView ): self . routes . insert ( 0 , Route ( view . path , endpoint = self . _render_custom_view ( view ), methods = view . methods , name = view . name , ), ) elif isinstance ( view , BaseModelView ): view . _find_foreign_model = lambda i : self . _find_model_from_identity ( i ) self . _models . append ( view ) def _find_model_from_identity ( self , identity : Optional [ str ]) -> BaseModelView : if identity is not None : for model in self . _models : if model . identity == identity : return model raise HTTPException ( 404 , \"Model with identity %s not found\" % identity ) def _render_custom_view ( self , custom_view : CustomView ) -> Callable [[ Request ], Awaitable [ Response ]]: async def wrapper ( request : Request ) -> Response : if not custom_view . is_accessible ( request ): raise HTTPException ( 403 ) return await custom_view . render ( request , self . templates ) return wrapper async def _render_api ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ): return JSONResponse ( None , status_code = HTTP_403_FORBIDDEN ) skip = int ( request . query_params . get ( \"skip\" ) or \"0\" ) limit = int ( request . query_params . get ( \"limit\" ) or \"100\" ) order_by = request . query_params . getlist ( \"order_by\" ) where = request . query_params . get ( \"where\" ) pks = request . query_params . getlist ( \"pks\" ) select2 = \"select2\" in request . query_params . keys () if len ( pks ) > 0 : items = await model . find_by_pks ( request , pks ) total = len ( items ) else : if where is not None : try : where = json . loads ( where ) except JSONDecodeError : where = str ( where ) items = await model . find_all ( request = request , skip = skip , limit = limit , where = where , order_by = order_by , ) total = await model . count ( request = request , where = where ) return JSONResponse ( { \"items\" : [ ( await model . serialize ( item , request , RequestAction . API if select2 else RequestAction . LIST , include_relationships = not select2 , include_select2 = select2 , ) ) for item in items ], \"total\" : total , } ) async def handle_action ( self , request : Request ) -> Response : try : identity = request . path_params . get ( \"identity\" ) pks = request . query_params . getlist ( \"pks\" ) name = request . query_params . get ( \"name\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ): raise ActionFailed ( \"Forbidden\" ) assert name is not None msg = await model . handle_action ( request , pks , name ) return JSONResponse ({ \"msg\" : msg }, status_code = 200 ) except ActionFailed as exc : return JSONResponse ({ \"msg\" : exc . msg }, status_code = 400 ) async def _render_login ( self , request : Request ) -> Response : if request . method == \"GET\" : return self . templates . TemplateResponse ( \"login.html\" , { \"request\" : request , \"_is_login_path\" : True }, ) else : form = await request . form () try : assert self . auth_provider is not None return await self . auth_provider . login ( form . get ( \"username\" ), # type: ignore form . get ( \"password\" ), # type: ignore form . get ( \"remember_me\" ) == \"on\" , request , RedirectResponse ( request . query_params . get ( \"next\" ) or request . url_for ( self . route_name + \":index\" ), status_code = HTTP_303_SEE_OTHER , ), ) except FormValidationError as errors : return self . templates . TemplateResponse ( \"login.html\" , { \"request\" : request , \"form_errors\" : errors , }, ) except LoginFailed as error : return self . templates . TemplateResponse ( \"login.html\" , { \"request\" : request , \"error\" : error . msg , }, ) async def _render_logout ( self , request : Request ) -> Response : assert self . auth_provider is not None return await self . auth_provider . logout ( request , RedirectResponse ( request . url_for ( self . route_name + \":index\" ), status_code = HTTP_303_SEE_OTHER , ), ) async def _render_list ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ): raise HTTPException ( 403 ) return self . templates . TemplateResponse ( model . list_template , { \"request\" : request , \"model\" : model , \"_actions\" : await model . get_all_actions ( request ), \"__js_model__\" : await model . _configs ( request ), }, ) async def _render_detail ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ) or not model . can_view_details ( request ): raise HTTPException ( 403 ) pk = request . path_params . get ( \"pk\" ) obj = await model . find_by_pk ( request , pk ) if obj is None : raise HTTPException ( 404 ) return self . templates . TemplateResponse ( model . detail_template , { \"request\" : request , \"model\" : model , \"raw_obj\" : obj , \"obj\" : await model . serialize ( obj , request , RequestAction . DETAIL ), }, ) async def _render_create ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ) or not model . can_create ( request ): raise HTTPException ( 403 ) if request . method == \"GET\" : return self . templates . TemplateResponse ( model . create_template , { \"request\" : request , \"model\" : model }, ) else : form = await request . form () dict_obj = await self . form_to_dict ( request , form , model , RequestAction . CREATE ) try : obj = await model . create ( request , dict_obj ) except FormValidationError as exc : return self . templates . TemplateResponse ( model . create_template , { \"request\" : request , \"model\" : model , \"errors\" : exc . errors , \"obj\" : dict_obj , }, ) pk = getattr ( obj , model . pk_attr ) # type: ignore url = request . url_for ( self . route_name + \":list\" , identity = model . identity ) if form . get ( \"_continue_editing\" , None ) is not None : url = request . url_for ( self . route_name + \":edit\" , identity = model . identity , pk = pk ) elif form . get ( \"_add_another\" , None ) is not None : url = request . url # type: ignore return RedirectResponse ( url , status_code = HTTP_303_SEE_OTHER ) async def _render_edit ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ) or not model . can_edit ( request ): raise HTTPException ( 403 ) pk = request . path_params . get ( \"pk\" ) obj = await model . find_by_pk ( request , pk ) if obj is None : raise HTTPException ( 404 ) if request . method == \"GET\" : return self . templates . TemplateResponse ( model . edit_template , { \"request\" : request , \"model\" : model , \"raw_obj\" : obj , \"obj\" : await model . serialize ( obj , request , RequestAction . EDIT ), }, ) else : form = await request . form () dict_obj = await self . form_to_dict ( request , form , model , RequestAction . EDIT ) try : obj = await model . edit ( request , pk , dict_obj ) except FormValidationError as exc : return self . templates . TemplateResponse ( model . edit_template , { \"request\" : request , \"model\" : model , \"errors\" : exc . errors , \"obj\" : dict_obj , }, ) pk = getattr ( obj , model . pk_attr ) # type: ignore url = request . url_for ( self . route_name + \":list\" , identity = model . identity ) if form . get ( \"_continue_editing\" , None ) is not None : url = request . url_for ( self . route_name + \":edit\" , identity = model . identity , pk = pk ) elif form . get ( \"_add_another\" , None ) is not None : url = request . url_for ( self . route_name + \":create\" , identity = model . identity ) return RedirectResponse ( url , status_code = HTTP_303_SEE_OTHER ) async def _render_error ( self , request : Request , exc : Exception = HTTPException ( status_code = 500 ), # noqa: B008 ) -> Response : assert isinstance ( exc , HTTPException ) return self . templates . TemplateResponse ( \"error.html\" , { \"request\" : request , \"exc\" : exc }, status_code = exc . status_code , ) async def form_to_dict ( self , request : Request , form_data : FormData , model : BaseModelView , action : RequestAction , ) -> Dict [ str , Any ]: data = {} for field in model . fields : if ( action == RequestAction . EDIT and field . exclude_from_edit ) or ( action == RequestAction . CREATE and field . exclude_from_create ): continue data [ field . name ] = await field . parse_form_data ( request , form_data , action ) return data def mount_to ( self , app : Starlette ) -> None : admin_app = Starlette ( routes = self . routes , middleware = self . middlewares , debug = self . debug , exception_handlers = { HTTPException : self . _render_error }, ) admin_app . state . ROUTE_NAME = self . route_name app . mount ( self . base_url , app = admin_app , name = self . route_name , ) __init__ ( title = 'Admin' , base_url = '/admin' , route_name = 'admin' , logo_url = None , login_logo_url = None , templates_dir = 'templates' , statics_dir = None , index_view = None , auth_provider = None , middlewares = None , debug = False ) Parameters: Name Type Description Default title str Admin title. 'Admin' base_url str Base URL for Admin interface. '/admin' route_name str Mounted Admin name 'admin' logo_url Optional [ str ] URL of logo to be displayed instead of title. None login_logo_url Optional [ str ] If set, it will be used for login interface instead of logo_url. None templates_dir str Templates dir for customisation 'templates' statics_dir Optional [ str ] Statics dir for customisation None index_view Optional [ CustomView ] CustomView to use for index page. None auth_provider Optional [ AuthProvider ] Authentication Provider None middlewares Optional [ Sequence [ Middleware ]] Starlette middlewares None Source code in starlette_admin/base.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def __init__ ( self , title : str = \"Admin\" , base_url : str = \"/admin\" , route_name : str = \"admin\" , logo_url : Optional [ str ] = None , login_logo_url : Optional [ str ] = None , templates_dir : str = \"templates\" , statics_dir : Optional [ str ] = None , index_view : Optional [ CustomView ] = None , auth_provider : Optional [ AuthProvider ] = None , middlewares : Optional [ Sequence [ Middleware ]] = None , debug : bool = False , ): \"\"\" Parameters: title: Admin title. base_url: Base URL for Admin interface. route_name: Mounted Admin name logo_url: URL of logo to be displayed instead of title. login_logo_url: If set, it will be used for login interface instead of logo_url. templates_dir: Templates dir for customisation statics_dir: Statics dir for customisation index_view: CustomView to use for index page. auth_provider: Authentication Provider middlewares: Starlette middlewares \"\"\" self . title = title self . base_url = base_url self . route_name = route_name self . logo_url = logo_url self . login_logo_url = login_logo_url self . templates_dir = templates_dir self . statics_dir = statics_dir self . auth_provider = auth_provider self . middlewares = middlewares self . index_view = ( index_view if ( index_view is not None ) else CustomView ( \"\" , add_to_menu = False ) ) self . _views : List [ BaseView ] = [] self . _models : List [ BaseModelView ] = [] self . routes : List [ Union [ Route , Mount ]] = [] self . debug = debug self . _setup_templates () self . init_auth () self . init_routes () add_view ( view ) Add View to the Admin interface. Source code in starlette_admin/base.py 75 76 77 78 79 80 81 82 83 84 def add_view ( self , view : Union [ Type [ BaseView ], BaseView ]) -> None : \"\"\" Add View to the Admin interface. \"\"\" if isinstance ( view , BaseView ): view_instance = view else : view_instance = view () self . _views . append ( view_instance ) self . setup_view ( view_instance ) custom_render_js ( request ) Override this function to provide a link to custom js to override the global render object in javascript which is use to render fields in list page. Parameters: Name Type Description Default request Request Starlette Request required Source code in starlette_admin/base.py 86 87 88 89 90 91 92 93 94 95 def custom_render_js ( self , request : Request ) -> Optional [ str ]: \"\"\" Override this function to provide a link to custom js to override the global `render` object in javascript which is use to render fields in list page. Args: request: Starlette Request \"\"\" return None","title":"BaseAdmin"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin","text":"Base class for implementing Admin interface. Source code in starlette_admin/base.pyclass BaseAdmin : \"\"\"Base class for implementing Admin interface.\"\"\" def __init__ ( self , title : str = \"Admin\" , base_url : str = \"/admin\" , route_name : str = \"admin\" , logo_url : Optional [ str ] = None , login_logo_url : Optional [ str ] = None , templates_dir : str = \"templates\" , statics_dir : Optional [ str ] = None , index_view : Optional [ CustomView ] = None , auth_provider : Optional [ AuthProvider ] = None , middlewares : Optional [ Sequence [ Middleware ]] = None , debug : bool = False , ): \"\"\" Parameters: title: Admin title. base_url: Base URL for Admin interface. route_name: Mounted Admin name logo_url: URL of logo to be displayed instead of title. login_logo_url: If set, it will be used for login interface instead of logo_url. templates_dir: Templates dir for customisation statics_dir: Statics dir for customisation index_view: CustomView to use for index page. auth_provider: Authentication Provider middlewares: Starlette middlewares \"\"\" self . title = title self . base_url = base_url self . route_name = route_name self . logo_url = logo_url self . login_logo_url = login_logo_url self . templates_dir = templates_dir self . statics_dir = statics_dir self . auth_provider = auth_provider self . middlewares = middlewares self . index_view = ( index_view if ( index_view is not None ) else CustomView ( \"\" , add_to_menu = False ) ) self . _views : List [ BaseView ] = [] self . _models : List [ BaseModelView ] = [] self . routes : List [ Union [ Route , Mount ]] = [] self . debug = debug self . _setup_templates () self . init_auth () self . init_routes () def add_view ( self , view : Union [ Type [ BaseView ], BaseView ]) -> None : \"\"\" Add View to the Admin interface. \"\"\" if isinstance ( view , BaseView ): view_instance = view else : view_instance = view () self . _views . append ( view_instance ) self . setup_view ( view_instance ) def custom_render_js ( self , request : Request ) -> Optional [ str ]: \"\"\" Override this function to provide a link to custom js to override the global `render` object in javascript which is use to render fields in list page. Args: request: Starlette Request \"\"\" return None def init_auth ( self ) -> None : if self . auth_provider is not None : self . middlewares = ( [] if self . middlewares is None else list ( self . middlewares ) ) self . middlewares . append ( Middleware ( AuthMiddleware , provider = self . auth_provider ) ) self . routes . extend ( [ Route ( self . auth_provider . login_path , self . _render_login , methods = [ \"GET\" , \"POST\" ], name = \"login\" , ), Route ( self . auth_provider . logout_path , self . _render_logout , methods = [ \"GET\" ], name = \"logout\" , ), ] ) def init_routes ( self ) -> None : statics = StaticFiles ( directory = self . statics_dir , packages = [ \"starlette_admin\" ]) self . routes . extend ( [ Mount ( \"/statics\" , app = statics , name = \"statics\" ), Route ( self . index_view . path , self . _render_custom_view ( self . index_view ), methods = self . index_view . methods , name = \"index\" , ), Route ( \"/api/ {identity} \" , self . _render_api , methods = [ \"GET\" ], name = \"api\" , ), Route ( \"/api/ {identity} /action\" , self . handle_action , methods = [ \"POST\" ], name = \"action\" , ), Route ( \"/ {identity} /list\" , self . _render_list , methods = [ \"GET\" ], name = \"list\" , ), Route ( \"/ {identity} /detail/ {pk} \" , self . _render_detail , methods = [ \"GET\" ], name = \"detail\" , ), Route ( \"/ {identity} /create\" , self . _render_create , methods = [ \"GET\" , \"POST\" ], name = \"create\" , ), Route ( \"/ {identity} /edit/ {pk} \" , self . _render_edit , methods = [ \"GET\" , \"POST\" ], name = \"edit\" , ), ] ) if self . index_view . add_to_menu : self . _views . append ( self . index_view ) def _setup_templates ( self ) -> None : templates = Jinja2Templates ( self . templates_dir ) templates . env . loader = ChoiceLoader ( [ FileSystemLoader ( self . templates_dir ), PackageLoader ( \"starlette_admin\" , \"templates\" ), ] ) templates . env . globals [ \"views\" ] = self . _views templates . env . globals [ \"title\" ] = self . title templates . env . globals [ \"is_auth_enabled\" ] = self . auth_provider is not None templates . env . globals [ \"__name__\" ] = self . route_name templates . env . globals [ \"logo_url\" ] = self . logo_url templates . env . globals [ \"login_logo_url\" ] = self . login_logo_url templates . env . globals [ \"custom_render_js\" ] = lambda r : self . custom_render_js ( r ) templates . env . filters [ \"is_custom_view\" ] = lambda res : isinstance ( res , CustomView ) templates . env . filters [ \"is_link\" ] = lambda res : isinstance ( res , Link ) templates . env . filters [ \"is_model\" ] = lambda res : isinstance ( res , BaseModelView ) templates . env . filters [ \"is_dropdown\" ] = lambda res : isinstance ( res , DropDown ) templates . env . filters [ \"get_admin_user\" ] = ( self . auth_provider . get_admin_user if self . auth_provider else None ) templates . env . filters [ \"tojson\" ] = lambda data : json . dumps ( data , default = str ) templates . env . filters [ \"file_icon\" ] = get_file_icon templates . env . filters [ \"to_model\" ] = lambda identity : self . _find_model_from_identity ( identity ) templates . env . filters [ \"is_iter\" ] = lambda v : isinstance ( v , ( list , tuple )) templates . env . filters [ \"is_str\" ] = lambda v : isinstance ( v , str ) templates . env . filters [ \"is_dict\" ] = lambda v : isinstance ( v , dict ) self . templates = templates def setup_view ( self , view : BaseView ) -> None : if isinstance ( view , DropDown ): for sub_view in view . views : self . setup_view ( sub_view ) elif isinstance ( view , CustomView ): self . routes . insert ( 0 , Route ( view . path , endpoint = self . _render_custom_view ( view ), methods = view . methods , name = view . name , ), ) elif isinstance ( view , BaseModelView ): view . _find_foreign_model = lambda i : self . _find_model_from_identity ( i ) self . _models . append ( view ) def _find_model_from_identity ( self , identity : Optional [ str ]) -> BaseModelView : if identity is not None : for model in self . _models : if model . identity == identity : return model raise HTTPException ( 404 , \"Model with identity %s not found\" % identity ) def _render_custom_view ( self , custom_view : CustomView ) -> Callable [[ Request ], Awaitable [ Response ]]: async def wrapper ( request : Request ) -> Response : if not custom_view . is_accessible ( request ): raise HTTPException ( 403 ) return await custom_view . render ( request , self . templates ) return wrapper async def _render_api ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ): return JSONResponse ( None , status_code = HTTP_403_FORBIDDEN ) skip = int ( request . query_params . get ( \"skip\" ) or \"0\" ) limit = int ( request . query_params . get ( \"limit\" ) or \"100\" ) order_by = request . query_params . getlist ( \"order_by\" ) where = request . query_params . get ( \"where\" ) pks = request . query_params . getlist ( \"pks\" ) select2 = \"select2\" in request . query_params . keys () if len ( pks ) > 0 : items = await model . find_by_pks ( request , pks ) total = len ( items ) else : if where is not None : try : where = json . loads ( where ) except JSONDecodeError : where = str ( where ) items = await model . find_all ( request = request , skip = skip , limit = limit , where = where , order_by = order_by , ) total = await model . count ( request = request , where = where ) return JSONResponse ( { \"items\" : [ ( await model . serialize ( item , request , RequestAction . API if select2 else RequestAction . LIST , include_relationships = not select2 , include_select2 = select2 , ) ) for item in items ], \"total\" : total , } ) async def handle_action ( self , request : Request ) -> Response : try : identity = request . path_params . get ( \"identity\" ) pks = request . query_params . getlist ( \"pks\" ) name = request . query_params . get ( \"name\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ): raise ActionFailed ( \"Forbidden\" ) assert name is not None msg = await model . handle_action ( request , pks , name ) return JSONResponse ({ \"msg\" : msg }, status_code = 200 ) except ActionFailed as exc : return JSONResponse ({ \"msg\" : exc . msg }, status_code = 400 ) async def _render_login ( self , request : Request ) -> Response : if request . method == \"GET\" : return self . templates . TemplateResponse ( \"login.html\" , { \"request\" : request , \"_is_login_path\" : True }, ) else : form = await request . form () try : assert self . auth_provider is not None return await self . auth_provider . login ( form . get ( \"username\" ), # type: ignore form . get ( \"password\" ), # type: ignore form . get ( \"remember_me\" ) == \"on\" , request , RedirectResponse ( request . query_params . get ( \"next\" ) or request . url_for ( self . route_name + \":index\" ), status_code = HTTP_303_SEE_OTHER , ), ) except FormValidationError as errors : return self . templates . TemplateResponse ( \"login.html\" , { \"request\" : request , \"form_errors\" : errors , }, ) except LoginFailed as error : return self . templates . TemplateResponse ( \"login.html\" , { \"request\" : request , \"error\" : error . msg , }, ) async def _render_logout ( self , request : Request ) -> Response : assert self . auth_provider is not None return await self . auth_provider . logout ( request , RedirectResponse ( request . url_for ( self . route_name + \":index\" ), status_code = HTTP_303_SEE_OTHER , ), ) async def _render_list ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ): raise HTTPException ( 403 ) return self . templates . TemplateResponse ( model . list_template , { \"request\" : request , \"model\" : model , \"_actions\" : await model . get_all_actions ( request ), \"__js_model__\" : await model . _configs ( request ), }, ) async def _render_detail ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ) or not model . can_view_details ( request ): raise HTTPException ( 403 ) pk = request . path_params . get ( \"pk\" ) obj = await model . find_by_pk ( request , pk ) if obj is None : raise HTTPException ( 404 ) return self . templates . TemplateResponse ( model . detail_template , { \"request\" : request , \"model\" : model , \"raw_obj\" : obj , \"obj\" : await model . serialize ( obj , request , RequestAction . DETAIL ), }, ) async def _render_create ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ) or not model . can_create ( request ): raise HTTPException ( 403 ) if request . method == \"GET\" : return self . templates . TemplateResponse ( model . create_template , { \"request\" : request , \"model\" : model }, ) else : form = await request . form () dict_obj = await self . form_to_dict ( request , form , model , RequestAction . CREATE ) try : obj = await model . create ( request , dict_obj ) except FormValidationError as exc : return self . templates . TemplateResponse ( model . create_template , { \"request\" : request , \"model\" : model , \"errors\" : exc . errors , \"obj\" : dict_obj , }, ) pk = getattr ( obj , model . pk_attr ) # type: ignore url = request . url_for ( self . route_name + \":list\" , identity = model . identity ) if form . get ( \"_continue_editing\" , None ) is not None : url = request . url_for ( self . route_name + \":edit\" , identity = model . identity , pk = pk ) elif form . get ( \"_add_another\" , None ) is not None : url = request . url # type: ignore return RedirectResponse ( url , status_code = HTTP_303_SEE_OTHER ) async def _render_edit ( self , request : Request ) -> Response : identity = request . path_params . get ( \"identity\" ) model = self . _find_model_from_identity ( identity ) if not model . is_accessible ( request ) or not model . can_edit ( request ): raise HTTPException ( 403 ) pk = request . path_params . get ( \"pk\" ) obj = await model . find_by_pk ( request , pk ) if obj is None : raise HTTPException ( 404 ) if request . method == \"GET\" : return self . templates . TemplateResponse ( model . edit_template , { \"request\" : request , \"model\" : model , \"raw_obj\" : obj , \"obj\" : await model . serialize ( obj , request , RequestAction . EDIT ), }, ) else : form = await request . form () dict_obj = await self . form_to_dict ( request , form , model , RequestAction . EDIT ) try : obj = await model . edit ( request , pk , dict_obj ) except FormValidationError as exc : return self . templates . TemplateResponse ( model . edit_template , { \"request\" : request , \"model\" : model , \"errors\" : exc . errors , \"obj\" : dict_obj , }, ) pk = getattr ( obj , model . pk_attr ) # type: ignore url = request . url_for ( self . route_name + \":list\" , identity = model . identity ) if form . get ( \"_continue_editing\" , None ) is not None : url = request . url_for ( self . route_name + \":edit\" , identity = model . identity , pk = pk ) elif form . get ( \"_add_another\" , None ) is not None : url = request . url_for ( self . route_name + \":create\" , identity = model . identity ) return RedirectResponse ( url , status_code = HTTP_303_SEE_OTHER ) async def _render_error ( self , request : Request , exc : Exception = HTTPException ( status_code = 500 ), # noqa: B008 ) -> Response : assert isinstance ( exc , HTTPException ) return self . templates . TemplateResponse ( \"error.html\" , { \"request\" : request , \"exc\" : exc }, status_code = exc . status_code , ) async def form_to_dict ( self , request : Request , form_data : FormData , model : BaseModelView , action : RequestAction , ) -> Dict [ str , Any ]: data = {} for field in model . fields : if ( action == RequestAction . EDIT and field . exclude_from_edit ) or ( action == RequestAction . CREATE and field . exclude_from_create ): continue data [ field . name ] = await field . parse_form_data ( request , form_data , action ) return data def mount_to ( self , app : Starlette ) -> None : admin_app = Starlette ( routes = self . routes , middleware = self . middlewares , debug = self . debug , exception_handlers = { HTTPException : self . _render_error }, ) admin_app . state . ROUTE_NAME = self . route_name app . mount ( self . base_url , app = admin_app , name = self . route_name , )","title":"BaseAdmin"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.__init__","text":"Parameters: Name Type Description Default title str Admin title. 'Admin' base_url str Base URL for Admin interface. '/admin' route_name str Mounted Admin name 'admin' logo_url Optional [ str ] URL of logo to be displayed instead of title. None login_logo_url Optional [ str ] If set, it will be used for login interface instead of logo_url. None templates_dir str Templates dir for customisation 'templates' statics_dir Optional [ str ] Statics dir for customisation None index_view Optional [ CustomView ] CustomView to use for index page. None auth_provider Optional [ AuthProvider ] Authentication Provider None middlewares Optional [ Sequence [ Middleware ]] Starlette middlewares None Source code in starlette_admin/base.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def __init__ ( self , title : str = \"Admin\" , base_url : str = \"/admin\" , route_name : str = \"admin\" , logo_url : Optional [ str ] = None , login_logo_url : Optional [ str ] = None , templates_dir : str = \"templates\" , statics_dir : Optional [ str ] = None , index_view : Optional [ CustomView ] = None , auth_provider : Optional [ AuthProvider ] = None , middlewares : Optional [ Sequence [ Middleware ]] = None , debug : bool = False , ): \"\"\" Parameters: title: Admin title. base_url: Base URL for Admin interface. route_name: Mounted Admin name logo_url: URL of logo to be displayed instead of title. login_logo_url: If set, it will be used for login interface instead of logo_url. templates_dir: Templates dir for customisation statics_dir: Statics dir for customisation index_view: CustomView to use for index page. auth_provider: Authentication Provider middlewares: Starlette middlewares \"\"\" self . title = title self . base_url = base_url self . route_name = route_name self . logo_url = logo_url self . login_logo_url = login_logo_url self . templates_dir = templates_dir self . statics_dir = statics_dir self . auth_provider = auth_provider self . middlewares = middlewares self . index_view = ( index_view if ( index_view is not None ) else CustomView ( \"\" , add_to_menu = False ) ) self . _views : List [ BaseView ] = [] self . _models : List [ BaseModelView ] = [] self . routes : List [ Union [ Route , Mount ]] = [] self . debug = debug self . _setup_templates () self . init_auth () self . init_routes ()","title":"__init__()"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.add_view","text":"Add View to the Admin interface. Source code in starlette_admin/base.py 75 76 77 78 79 80 81 82 83 84 def add_view ( self , view : Union [ Type [ BaseView ], BaseView ]) -> None : \"\"\" Add View to the Admin interface. \"\"\" if isinstance ( view , BaseView ): view_instance = view else : view_instance = view () self . _views . append ( view_instance ) self . setup_view ( view_instance )","title":"add_view()"},{"location":"api/base-admin/#starlette_admin.base.BaseAdmin.custom_render_js","text":"Override this function to provide a link to custom js to override the global render object in javascript which is use to render fields in list page. Parameters: Name Type Description Default request Request Starlette Request required Source code in starlette_admin/base.py 86 87 88 89 90 91 92 93 94 95 def custom_render_js ( self , request : Request ) -> Optional [ str ]: \"\"\" Override this function to provide a link to custom js to override the global `render` object in javascript which is use to render fields in list page. Args: request: Starlette Request \"\"\" return None","title":"custom_render_js()"},{"location":"api/contrib/sqlalchemy/modelview/","text":"starlette_admin.contrib.sqla.ModelView Bases: BaseModelView Source code in starlette_admin/contrib/sqla/view.pyclass ModelView ( BaseModelView ): def __init__ ( self , model : Type [ Any ], icon : Optional [ str ] = None , name : Optional [ str ] = None , label : Optional [ str ] = None , identity : Optional [ str ] = None , ): try : mapper = inspect ( model ) except NoInspectionAvailable : raise InvalidModelError ( # noqa B904 f \"Class { model . __name__ } is not a SQLAlchemy model.\" ) assert len ( mapper . primary_key ) == 1 , ( \"Multiple PK columns not supported, A possible solution is to override \" \"BaseModelView class and put your own logic \" ) self . model = model self . identity = identity or slugify_class_name ( self . model . __name__ ) self . label = label or prettify_class_name ( self . model . __name__ ) + \"s\" self . name = name or prettify_class_name ( self . model . __name__ ) self . icon = icon self . _pk_column : Column = mapper . primary_key [ 0 ] self . pk_attr = self . _pk_column . key self . _pk_coerce = extract_column_python_type ( self . _pk_column ) if self . fields is None or len ( self . fields ) == 0 : self . fields = [ self . model . __dict__ [ f ] . key for f in self . model . __dict__ if type ( self . model . __dict__ [ f ]) is InstrumentedAttribute ] self . fields = normalize_fields ( self . fields , mapper ) self . exclude_fields_from_list = normalize_list ( self . exclude_fields_from_list ) # type: ignore self . exclude_fields_from_detail = normalize_list ( self . exclude_fields_from_detail ) # type: ignore self . exclude_fields_from_create = normalize_list ( self . exclude_fields_from_create ) # type: ignore self . exclude_fields_from_edit = normalize_list ( self . exclude_fields_from_edit ) # type: ignore _default_list = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] self . searchable_fields = normalize_list ( self . searchable_fields if ( self . searchable_fields is not None ) else _default_list ) self . sortable_fields = normalize_list ( self . sortable_fields if ( self . sortable_fields is not None ) else _default_list ) self . export_fields = normalize_list ( self . export_fields ) super () . __init__ () def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model ) def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column )) def get_search_query ( self , request : Request , term : str ) -> Any : \"\"\" Return SQLAlchemy whereclause to use for full text search Args: request: Starlette request term: Filtering term Examples: ```python class PostView(ModelView): def get_search_query(self, request: Request, term: str): return Post.title.contains(term) ``` \"\"\" clauses = [] for field in self . fields : if field . searchable and type ( field ) in [ StringField , TextAreaField , EmailField , URLField , PhoneField , ColorField , ]: attr = getattr ( self . model , field . name ) clauses . append ( cast ( attr , String ) . ilike ( f \"% { term } %\" )) return or_ ( * clauses ) async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : session : Union [ Session , AsyncSession ] = request . state . session stmt = self . get_count_query () if where is not None : if isinstance ( where , dict ): where = build_query ( where , self . model ) else : where = await self . build_full_text_search_query ( request , where , self . model ) stmt = stmt . where ( where ) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalar_one () return ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalar_one () async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: session : Union [ Session , AsyncSession ] = request . state . session stmt = self . get_list_query () . offset ( skip ) if limit > 0 : stmt = stmt . limit ( limit ) if where is not None : if isinstance ( where , dict ): where = build_query ( where , self . model ) else : where = await self . build_full_text_search_query ( request , where , self . model ) stmt = stmt . where ( where ) stmt = stmt . order_by ( * build_order_clauses ( order_by or [], self . model )) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . all () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . all () ) async def find_by_pk ( self , request : Request , pk : Any ) -> Any : session : Union [ Session , AsyncSession ] = request . state . session stmt = select ( self . model ) . where ( self . _pk_column == self . _pk_coerce ( pk )) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . one_or_none () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . one_or_none () ) async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> List [ Any ]: session : Union [ Session , AsyncSession ] = request . state . session stmt = select ( self . model ) . where ( self . _pk_column . in_ ( map ( self . _pk_coerce , pks ))) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . all () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . all () ) async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\" Inherit this method to validate your data. Args: request: Starlette request data: Submitted data Raises: FormValidationError: to display errors to users Examples: ```python from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post(Base): __tablename__ = \"post\" id = Column(Integer, primary_key=True) title = Column(String(100), nullable=False) text = Column(Text, nullable=False) date = Column(Date) class PostView(ModelView): async def validate(self, request: Request, data: Dict[str, Any]) -> None: errors: Dict[str, str] = dict() _2day_from_today = date.today() + timedelta(days=2) if data[\"title\"] is None or len(data[\"title\"]) < 3: errors[\"title\"] = \"Ensure this value has at least 03 characters\" if data[\"text\"] is None or len(data[\"text\"]) < 10: errors[\"text\"] = \"Ensure this value has at least 10 characters\" if data[\"date\"] is None or data[\"date\"] < _2day_from_today: errors[\"date\"] = \"We need at least one day to verify your post\" if len(errors) > 0: raise FormValidationError(errors) return await super().validate(request, data) ``` \"\"\" async def create ( self , request : Request , data : Dict [ str , Any ]) -> Any : try : data = await self . _arrange_data ( request , data ) await self . validate ( request , data ) session : Union [ Session , AsyncSession ] = request . state . session obj = await self . _populate_obj ( request , self . model (), data ) session . add ( obj ) if isinstance ( session , AsyncSession ): await session . commit () await session . refresh ( obj ) else : await anyio . to_thread . run_sync ( session . commit ) await anyio . to_thread . run_sync ( session . refresh , obj ) return obj except Exception as e : return self . handle_exception ( e ) async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : try : data = await self . _arrange_data ( request , data , True ) await self . validate ( request , data ) session : Union [ Session , AsyncSession ] = request . state . session obj = await self . find_by_pk ( request , pk ) session . add ( await self . _populate_obj ( request , obj , data , True )) if isinstance ( session , AsyncSession ): await session . commit () await session . refresh ( obj ) else : await anyio . to_thread . run_sync ( session . commit ) await anyio . to_thread . run_sync ( session . refresh , obj ) return obj except Exception as e : self . handle_exception ( e ) async def _arrange_data ( self , request : Request , data : Dict [ str , Any ], is_edit : bool = False , ) -> Dict [ str , Any ]: \"\"\" This function will return a new dict with relationships loaded from database. \"\"\" arranged_data : Dict [ str , Any ] = {} for field in self . fields : if ( is_edit and field . exclude_from_edit ) or ( not is_edit and field . exclude_from_create ): continue if isinstance ( field , RelationField ) and data [ field . name ] is not None : foreign_model = self . _find_foreign_model ( field . identity ) # type: ignore if not field . multiple : arranged_data [ field . name ] = await foreign_model . find_by_pk ( request , data [ field . name ] ) else : arranged_data [ field . name ] = await foreign_model . find_by_pks ( request , data [ field . name ] ) else : arranged_data [ field . name ] = data [ field . name ] return arranged_data async def _populate_obj ( self , request : Request , obj : Any , data : Dict [ str , Any ], is_edit : bool = False , ) -> Any : for field in self . fields : if ( is_edit and field . exclude_from_edit ) or ( not is_edit and field . exclude_from_create ): continue name , value = field . name , data . get ( field . name , None ) if isinstance ( field , FileField ): value , should_be_deleted = value if should_be_deleted : setattr ( obj , name , None ) elif ( not field . multiple and value is not None ) or ( field . multiple and isinstance ( value , list ) and len ( value ) > 0 ): setattr ( obj , name , value ) else : setattr ( obj , name , value ) return obj async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: session : Union [ Session , AsyncSession ] = request . state . session objs = await self . find_by_pks ( request , pks ) if isinstance ( session , AsyncSession ): for obj in objs : await session . delete ( obj ) await session . commit () else : for obj in objs : await anyio . to_thread . run_sync ( session . delete , obj ) await anyio . to_thread . run_sync ( session . commit ) return len ( objs ) async def build_full_text_search_query ( self , request : Request , term : str , model : Any ) -> Any : return self . get_search_query ( request , term ) def handle_exception ( self , exc : Exception ) -> None : try : \"\"\"Automatically handle sqlalchemy_file error\"\"\" sqlalchemy_file = __import__ ( \"sqlalchemy_file\" ) if isinstance ( exc , sqlalchemy_file . exceptions . ValidationError ): raise FormValidationError ({ exc . key : exc . msg }) except ImportError : # pragma: no cover pass raise exc # pragma: no cover get_count_query () Return a Select expression which is used as base statement for count method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) Source code in starlette_admin/contrib/sqla/view.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column )) get_list_query () Return a Select expression which is used as base statement for find_all method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) If you override this method, don't forget to also override get_count_query , for displaying the correct item count in the list view. Source code in starlette_admin/contrib/sqla/view.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model ) get_search_query ( request , term ) Return SQLAlchemy whereclause to use for full text search Parameters: Name Type Description Default request Request Starlette request required term str Filtering term required Examples: class PostView ( ModelView ): def get_search_query ( self , request : Request , term : str ): return Post . title . contains ( term ) Source code in starlette_admin/contrib/sqla/view.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def get_search_query ( self , request : Request , term : str ) -> Any : \"\"\" Return SQLAlchemy whereclause to use for full text search Args: request: Starlette request term: Filtering term Examples: ```python class PostView(ModelView): def get_search_query(self, request: Request, term: str): return Post.title.contains(term) ``` \"\"\" clauses = [] for field in self . fields : if field . searchable and type ( field ) in [ StringField , TextAreaField , EmailField , URLField , PhoneField , ColorField , ]: attr = getattr ( self . model , field . name ) clauses . append ( cast ( attr , String ) . ilike ( f \"% { term } %\" )) return or_ ( * clauses ) validate ( request , data ) async Inherit this method to validate your data. Parameters: Name Type Description Default request Request Starlette request required data Dict [ str , Any ] Submitted data required Raises: Type Description FormValidationError to display errors to users Examples: from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post ( Base ): __tablename__ = \"post\" id = Column ( Integer , primary_key = True ) title = Column ( String ( 100 ), nullable = False ) text = Column ( Text , nullable = False ) date = Column ( Date ) class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Source code in starlette_admin/contrib/sqla/view.py 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\" Inherit this method to validate your data. Args: request: Starlette request data: Submitted data Raises: FormValidationError: to display errors to users Examples: ```python from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post(Base): __tablename__ = \"post\" id = Column(Integer, primary_key=True) title = Column(String(100), nullable=False) text = Column(Text, nullable=False) date = Column(Date) class PostView(ModelView): async def validate(self, request: Request, data: Dict[str, Any]) -> None: errors: Dict[str, str] = dict() _2day_from_today = date.today() + timedelta(days=2) if data[\"title\"] is None or len(data[\"title\"]) < 3: errors[\"title\"] = \"Ensure this value has at least 03 characters\" if data[\"text\"] is None or len(data[\"text\"]) < 10: errors[\"text\"] = \"Ensure this value has at least 10 characters\" if data[\"date\"] is None or data[\"date\"] < _2day_from_today: errors[\"date\"] = \"We need at least one day to verify your post\" if len(errors) > 0: raise FormValidationError(errors) return await super().validate(request, data) ``` \"\"\"","title":"ModelView"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.ModelView","text":"Bases: BaseModelView Source code in starlette_admin/contrib/sqla/view.pyclass ModelView ( BaseModelView ): def __init__ ( self , model : Type [ Any ], icon : Optional [ str ] = None , name : Optional [ str ] = None , label : Optional [ str ] = None , identity : Optional [ str ] = None , ): try : mapper = inspect ( model ) except NoInspectionAvailable : raise InvalidModelError ( # noqa B904 f \"Class { model . __name__ } is not a SQLAlchemy model.\" ) assert len ( mapper . primary_key ) == 1 , ( \"Multiple PK columns not supported, A possible solution is to override \" \"BaseModelView class and put your own logic \" ) self . model = model self . identity = identity or slugify_class_name ( self . model . __name__ ) self . label = label or prettify_class_name ( self . model . __name__ ) + \"s\" self . name = name or prettify_class_name ( self . model . __name__ ) self . icon = icon self . _pk_column : Column = mapper . primary_key [ 0 ] self . pk_attr = self . _pk_column . key self . _pk_coerce = extract_column_python_type ( self . _pk_column ) if self . fields is None or len ( self . fields ) == 0 : self . fields = [ self . model . __dict__ [ f ] . key for f in self . model . __dict__ if type ( self . model . __dict__ [ f ]) is InstrumentedAttribute ] self . fields = normalize_fields ( self . fields , mapper ) self . exclude_fields_from_list = normalize_list ( self . exclude_fields_from_list ) # type: ignore self . exclude_fields_from_detail = normalize_list ( self . exclude_fields_from_detail ) # type: ignore self . exclude_fields_from_create = normalize_list ( self . exclude_fields_from_create ) # type: ignore self . exclude_fields_from_edit = normalize_list ( self . exclude_fields_from_edit ) # type: ignore _default_list = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] self . searchable_fields = normalize_list ( self . searchable_fields if ( self . searchable_fields is not None ) else _default_list ) self . sortable_fields = normalize_list ( self . sortable_fields if ( self . sortable_fields is not None ) else _default_list ) self . export_fields = normalize_list ( self . export_fields ) super () . __init__ () def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model ) def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column )) def get_search_query ( self , request : Request , term : str ) -> Any : \"\"\" Return SQLAlchemy whereclause to use for full text search Args: request: Starlette request term: Filtering term Examples: ```python class PostView(ModelView): def get_search_query(self, request: Request, term: str): return Post.title.contains(term) ``` \"\"\" clauses = [] for field in self . fields : if field . searchable and type ( field ) in [ StringField , TextAreaField , EmailField , URLField , PhoneField , ColorField , ]: attr = getattr ( self . model , field . name ) clauses . append ( cast ( attr , String ) . ilike ( f \"% { term } %\" )) return or_ ( * clauses ) async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : session : Union [ Session , AsyncSession ] = request . state . session stmt = self . get_count_query () if where is not None : if isinstance ( where , dict ): where = build_query ( where , self . model ) else : where = await self . build_full_text_search_query ( request , where , self . model ) stmt = stmt . where ( where ) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalar_one () return ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalar_one () async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: session : Union [ Session , AsyncSession ] = request . state . session stmt = self . get_list_query () . offset ( skip ) if limit > 0 : stmt = stmt . limit ( limit ) if where is not None : if isinstance ( where , dict ): where = build_query ( where , self . model ) else : where = await self . build_full_text_search_query ( request , where , self . model ) stmt = stmt . where ( where ) stmt = stmt . order_by ( * build_order_clauses ( order_by or [], self . model )) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . all () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . all () ) async def find_by_pk ( self , request : Request , pk : Any ) -> Any : session : Union [ Session , AsyncSession ] = request . state . session stmt = select ( self . model ) . where ( self . _pk_column == self . _pk_coerce ( pk )) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . one_or_none () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . one_or_none () ) async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> List [ Any ]: session : Union [ Session , AsyncSession ] = request . state . session stmt = select ( self . model ) . where ( self . _pk_column . in_ ( map ( self . _pk_coerce , pks ))) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . all () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . all () ) async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\" Inherit this method to validate your data. Args: request: Starlette request data: Submitted data Raises: FormValidationError: to display errors to users Examples: ```python from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post(Base): __tablename__ = \"post\" id = Column(Integer, primary_key=True) title = Column(String(100), nullable=False) text = Column(Text, nullable=False) date = Column(Date) class PostView(ModelView): async def validate(self, request: Request, data: Dict[str, Any]) -> None: errors: Dict[str, str] = dict() _2day_from_today = date.today() + timedelta(days=2) if data[\"title\"] is None or len(data[\"title\"]) < 3: errors[\"title\"] = \"Ensure this value has at least 03 characters\" if data[\"text\"] is None or len(data[\"text\"]) < 10: errors[\"text\"] = \"Ensure this value has at least 10 characters\" if data[\"date\"] is None or data[\"date\"] < _2day_from_today: errors[\"date\"] = \"We need at least one day to verify your post\" if len(errors) > 0: raise FormValidationError(errors) return await super().validate(request, data) ``` \"\"\" async def create ( self , request : Request , data : Dict [ str , Any ]) -> Any : try : data = await self . _arrange_data ( request , data ) await self . validate ( request , data ) session : Union [ Session , AsyncSession ] = request . state . session obj = await self . _populate_obj ( request , self . model (), data ) session . add ( obj ) if isinstance ( session , AsyncSession ): await session . commit () await session . refresh ( obj ) else : await anyio . to_thread . run_sync ( session . commit ) await anyio . to_thread . run_sync ( session . refresh , obj ) return obj except Exception as e : return self . handle_exception ( e ) async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : try : data = await self . _arrange_data ( request , data , True ) await self . validate ( request , data ) session : Union [ Session , AsyncSession ] = request . state . session obj = await self . find_by_pk ( request , pk ) session . add ( await self . _populate_obj ( request , obj , data , True )) if isinstance ( session , AsyncSession ): await session . commit () await session . refresh ( obj ) else : await anyio . to_thread . run_sync ( session . commit ) await anyio . to_thread . run_sync ( session . refresh , obj ) return obj except Exception as e : self . handle_exception ( e ) async def _arrange_data ( self , request : Request , data : Dict [ str , Any ], is_edit : bool = False , ) -> Dict [ str , Any ]: \"\"\" This function will return a new dict with relationships loaded from database. \"\"\" arranged_data : Dict [ str , Any ] = {} for field in self . fields : if ( is_edit and field . exclude_from_edit ) or ( not is_edit and field . exclude_from_create ): continue if isinstance ( field , RelationField ) and data [ field . name ] is not None : foreign_model = self . _find_foreign_model ( field . identity ) # type: ignore if not field . multiple : arranged_data [ field . name ] = await foreign_model . find_by_pk ( request , data [ field . name ] ) else : arranged_data [ field . name ] = await foreign_model . find_by_pks ( request , data [ field . name ] ) else : arranged_data [ field . name ] = data [ field . name ] return arranged_data async def _populate_obj ( self , request : Request , obj : Any , data : Dict [ str , Any ], is_edit : bool = False , ) -> Any : for field in self . fields : if ( is_edit and field . exclude_from_edit ) or ( not is_edit and field . exclude_from_create ): continue name , value = field . name , data . get ( field . name , None ) if isinstance ( field , FileField ): value , should_be_deleted = value if should_be_deleted : setattr ( obj , name , None ) elif ( not field . multiple and value is not None ) or ( field . multiple and isinstance ( value , list ) and len ( value ) > 0 ): setattr ( obj , name , value ) else : setattr ( obj , name , value ) return obj async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: session : Union [ Session , AsyncSession ] = request . state . session objs = await self . find_by_pks ( request , pks ) if isinstance ( session , AsyncSession ): for obj in objs : await session . delete ( obj ) await session . commit () else : for obj in objs : await anyio . to_thread . run_sync ( session . delete , obj ) await anyio . to_thread . run_sync ( session . commit ) return len ( objs ) async def build_full_text_search_query ( self , request : Request , term : str , model : Any ) -> Any : return self . get_search_query ( request , term ) def handle_exception ( self , exc : Exception ) -> None : try : \"\"\"Automatically handle sqlalchemy_file error\"\"\" sqlalchemy_file = __import__ ( \"sqlalchemy_file\" ) if isinstance ( exc , sqlalchemy_file . exceptions . ValidationError ): raise FormValidationError ({ exc . key : exc . msg }) except ImportError : # pragma: no cover pass raise exc # pragma: no cover","title":"ModelView"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.view.ModelView.get_count_query","text":"Return a Select expression which is used as base statement for count method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) Source code in starlette_admin/contrib/sqla/view.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column ))","title":"get_count_query()"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.view.ModelView.get_list_query","text":"Return a Select expression which is used as base statement for find_all method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) If you override this method, don't forget to also override get_count_query , for displaying the correct item count in the list view. Source code in starlette_admin/contrib/sqla/view.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model )","title":"get_list_query()"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.view.ModelView.get_search_query","text":"Return SQLAlchemy whereclause to use for full text search Parameters: Name Type Description Default request Request Starlette request required term str Filtering term required Examples: class PostView ( ModelView ): def get_search_query ( self , request : Request , term : str ): return Post . title . contains ( term ) Source code in starlette_admin/contrib/sqla/view.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def get_search_query ( self , request : Request , term : str ) -> Any : \"\"\" Return SQLAlchemy whereclause to use for full text search Args: request: Starlette request term: Filtering term Examples: ```python class PostView(ModelView): def get_search_query(self, request: Request, term: str): return Post.title.contains(term) ``` \"\"\" clauses = [] for field in self . fields : if field . searchable and type ( field ) in [ StringField , TextAreaField , EmailField , URLField , PhoneField , ColorField , ]: attr = getattr ( self . model , field . name ) clauses . append ( cast ( attr , String ) . ilike ( f \"% { term } %\" )) return or_ ( * clauses )","title":"get_search_query()"},{"location":"api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.view.ModelView.validate","text":"Inherit this method to validate your data. Parameters: Name Type Description Default request Request Starlette request required data Dict [ str , Any ] Submitted data required Raises: Type Description FormValidationError to display errors to users Examples: from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post ( Base ): __tablename__ = \"post\" id = Column ( Integer , primary_key = True ) title = Column ( String ( 100 ), nullable = False ) text = Column ( Text , nullable = False ) date = Column ( Date ) class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Source code in starlette_admin/contrib/sqla/view.py 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\" Inherit this method to validate your data. Args: request: Starlette request data: Submitted data Raises: FormValidationError: to display errors to users Examples: ```python from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post(Base): __tablename__ = \"post\" id = Column(Integer, primary_key=True) title = Column(String(100), nullable=False) text = Column(Text, nullable=False) date = Column(Date) class PostView(ModelView): async def validate(self, request: Request, data: Dict[str, Any]) -> None: errors: Dict[str, str] = dict() _2day_from_today = date.today() + timedelta(days=2) if data[\"title\"] is None or len(data[\"title\"]) < 3: errors[\"title\"] = \"Ensure this value has at least 03 characters\" if data[\"text\"] is None or len(data[\"text\"]) < 10: errors[\"text\"] = \"Ensure this value has at least 10 characters\" if data[\"date\"] is None or data[\"date\"] < _2day_from_today: errors[\"date\"] = \"We need at least one day to verify your post\" if len(errors) > 0: raise FormValidationError(errors) return await super().validate(request, data) ``` \"\"\"","title":"validate()"},{"location":"api/fields/","text":"starlette_admin.fields.BaseField dataclass Base class for fields Parameters: Name Type Description Default name str Field name, same as attribute name in your model required label Optional [ str ] Field label None help_text Optional [ str ] Hint message to display in forms None type Optional [ str ] Field type, unique key used to define the field None id str Unique id, used to represent field instance '' search_builder_type Optional [ str ] datatable columns.searchBuilderType, For more information click here 'default' required Optional [ bool ] Indicate if the fields is required False exclude_from_list Optional [ bool ] Control field visibility in list page False exclude_from_detail Optional [ bool ] Control field visibility in detail page False exclude_from_create Optional [ bool ] Control field visibility in create page False exclude_from_edit Optional [ bool ] Control field visibility in edit page False searchable Optional [ bool ] Indicate if the fields is searchable True orderable Optional [ bool ] Indicate if the fields is orderable True render_function_key str Render function key inside the global render variable in javascript 'text' form_template str template for rendering this field in creation and edit page 'forms/input.html' display_template str template for displaying this field in detail page 'displays/text.html' Source code in starlette_admin/fields.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @dataclass class BaseField : \"\"\" Base class for fields Parameters: name: Field name, same as attribute name in your model label: Field label help_text: Hint message to display in forms type: Field type, unique key used to define the field id: Unique id, used to represent field instance search_builder_type: datatable columns.searchBuilderType, For more information [click here](https://datatables.net/reference/option/columns.searchBuilderType) required: Indicate if the fields is required exclude_from_list: Control field visibility in list page exclude_from_detail: Control field visibility in detail page exclude_from_create: Control field visibility in create page exclude_from_edit: Control field visibility in edit page searchable: Indicate if the fields is searchable orderable: Indicate if the fields is orderable render_function_key: Render function key inside the global `render` variable in javascript form_template: template for rendering this field in creation and edit page display_template: template for displaying this field in detail page \"\"\" name : str label : Optional [ str ] = None type : Optional [ str ] = None help_text : Optional [ str ] = None id : str = \"\" search_builder_type : Optional [ str ] = \"default\" required : Optional [ bool ] = False exclude_from_list : Optional [ bool ] = False exclude_from_detail : Optional [ bool ] = False exclude_from_create : Optional [ bool ] = False exclude_from_edit : Optional [ bool ] = False searchable : Optional [ bool ] = True orderable : Optional [ bool ] = True render_function_key : str = \"text\" form_template : str = \"forms/input.html\" label_template : str = \"forms/_label.html\" display_template : str = \"displays/text.html\" error_class = \"is-invalid\" def __post_init__ ( self ) -> None : if self . label is None : self . label = self . name . replace ( \"_\" , \" \" ) . capitalize () if self . type is None : self . type = type ( self ) . __name__ self . id = self . name async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : return form_data . get ( self . id ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def additional_css_links ( self , request : Request ) -> List [ str ]: return [] def additional_js_links ( self , request : Request ) -> List [ str ]: return [] def dict ( self ) -> Dict [ str , Any ]: return asdict ( self ) starlette_admin.fields.BooleanField dataclass Bases: BaseField This field displays the true/false value of a boolean property. Source code in starlette_admin/fields.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @dataclass class BooleanField ( BaseField ): \"\"\"This field displays the `true/false` value of a boolean property.\"\"\" search_builder_type : Optional [ str ] = \"bool\" render_function_key : str = \"boolean\" form_template : str = \"forms/boolean.html\" display_template : str = \"displays/boolean.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> bool : return form_data . get ( self . id ) == \"on\" async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> bool : return bool ( value ) starlette_admin.fields.IntegerField dataclass Bases: NumberField This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 @dataclass class IntegerField ( NumberField ): \"\"\" This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value.\"\"\" class_ : str = \"field-integer form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ int ]: try : return int ( form_data . get ( self . id )) # type: ignore except ( ValueError , TypeError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return int ( value ) starlette_admin.fields.DecimalField dataclass Bases: NumberField This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 @dataclass class DecimalField ( NumberField ): \"\"\" This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. \"\"\" step : str = \"any\" class_ : str = \"field-decimal form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ decimal . Decimal ]: try : return decimal . Decimal ( form_data . get ( self . id )) # type: ignore except ( decimal . InvalidOperation , ValueError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> str : return str ( value ) starlette_admin.fields.FloatField dataclass Bases: StringField A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 @dataclass class FloatField ( StringField ): \"\"\" A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. \"\"\" class_ : str = \"field-float form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ float ]: try : return float ( form_data . get ( self . id )) # type: ignore except ValueError : return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> float : return float ( value ) starlette_admin.fields.StringField dataclass Bases: BaseField This field is used to represent any kind of short text content. Source code in starlette_admin/fields.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 @dataclass class StringField ( BaseField ): \"\"\"This field is used to represent any kind of short text content.\"\"\" search_builder_type : Optional [ str ] = \"string\" input_type : str = \"text\" class_ : str = \"field-string form-control\" placeholder : Optional [ str ] = None def input_params ( self ) -> str : return html_params ( { \"type\" : self . input_type , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return str ( value ) starlette_admin.fields.TextAreaField dataclass Bases: StringField This field is used to represent any kind of long text content. For short text contents, use StringField Source code in starlette_admin/fields.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 @dataclass class TextAreaField ( StringField ): \"\"\"This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\" rows : int = 6 maxlength : Optional [ int ] = None minlength : Optional [ int ] = None class_ : str = \"field-textarea form-control\" form_template : str = \"forms/textarea.html\" def input_params ( self ) -> str : return html_params ( { \"rows\" : self . rows , \"minlength\" : self . minlength , \"maxlength\" : self . maxlength , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) starlette_admin.fields.TagsField dataclass Bases: BaseField This field is used to represent the value of properties that store a list of string values. Render as select2 tags input. Source code in starlette_admin/fields.py 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 @dataclass class TagsField ( BaseField ): \"\"\" This field is used to represent the value of properties that store a list of string values. Render as `select2` tags input. \"\"\" form_template : str = \"forms/tags.html\" form_js : str = \"js/field/forms/tags.js\" class_ : str = \"field-tags form-control form-select\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> List [ str ]: return form_data . getlist ( self . id ) # type: ignore def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/select2.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/select2.min.js\" , ) ] starlette_admin.fields.EmailField dataclass Bases: StringField This field is used to represent a text content that stores a single email address. Source code in starlette_admin/fields.py 281 282 283 284 285 286 287 288 289 @dataclass class EmailField ( StringField ): \"\"\"This field is used to represent a text content that stores a single email address.\"\"\" input_type : str = \"email\" render_function_key : str = \"email\" class_ : str = \"field-email form-control\" display_template : str = \"displays/email.html\" starlette_admin.fields.URLField dataclass Bases: StringField This field is used to represent a text content that stores a single URL. Source code in starlette_admin/fields.py 292 293 294 295 296 297 298 299 @dataclass class URLField ( StringField ): \"\"\"This field is used to represent a text content that stores a single URL.\"\"\" input_type : str = \"url\" render_function_key : str = \"url\" class_ : str = \"field-url form-control\" display_template : str = \"displays/url.html\" starlette_admin.fields.PhoneField dataclass Bases: StringField A StringField, except renders an <input type=\"phone\"> . Source code in starlette_admin/fields.py 302 303 304 305 306 307 @dataclass class PhoneField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"phone\">`.\"\"\" input_type : str = \"phone\" class_ : str = \"field-phone form-control\" starlette_admin.fields.ColorField dataclass Bases: StringField A StringField, except renders an <input type=\"color\"> . Source code in starlette_admin/fields.py 310 311 312 313 314 315 @dataclass class ColorField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"color\">`.\"\"\" input_type : str = \"color\" class_ : str = \"field-color form-control form-control-color\" starlette_admin.fields.PasswordField dataclass Bases: StringField A StringField, except renders an <input type=\"password\"> . Source code in starlette_admin/fields.py 318 319 320 321 322 323 @dataclass class PasswordField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"password\">`.\"\"\" input_type : str = \"password\" class_ : str = \"field-password form-control\" starlette_admin.fields.EnumField dataclass Bases: StringField Enumeration Field. It take a python enum.Enum class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example class Status ( str , enum . Enum ): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel : status : Optional [ Status ] = None class MyModelView ( ModelView ): fields = [ EnumField . from_enum ( \"status\" , Status )] class MyModel : language : str class MyModelView ( ModelView ): fields = [ EnumField . from_choices ( \"language\" , [( 'cpp' , 'C++' ), ( 'py' , 'Python' ), ( 'text' , 'Plain Text' )])] Source code in starlette_admin/fields.py 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 @dataclass class EnumField ( StringField ): \"\"\" Enumeration Field. It take a python `enum.Enum` class or a list of *(value, label)* pairs. It can also be a list of only values, in which case the value is used as the label. Example: ```Python class Status(str, enum.Enum): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel: status: Optional[Status] = None class MyModelView(ModelView): fields = [EnumField.from_enum(\"status\", Status)] ``` ```Python class MyModel: language: str class MyModelView(ModelView): fields = [EnumField.from_choices(\"language\", [('cpp', 'C++'), ('py', 'Python'), ('text', 'Plain Text')])] ``` \"\"\" multiple : bool = False choices : Iterable [ Tuple [ str , str ]] = dc_field ( default_factory = dict ) form_template : str = \"forms/enum.html\" class_ : str = \"field-enum form-control form-select\" coerce : type = str async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : return ( list ( map ( self . coerce , form_data . getlist ( self . id ))) if self . multiple else ( self . coerce ( form_data . get ( self . id )) if form_data . get ( self . id ) else None ) ) def _get_label ( self , value : Any ) -> Any : if isinstance ( value , Enum ): return value . name for v , label in self . choices : if value == v : return label raise ValueError ( f \"Invalid choice value: { value } \" ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : labels = [ ( self . _get_label ( v ) if action != RequestAction . EDIT else v ) for v in ( value if self . multiple else [ value ]) ] return labels if self . multiple else labels [ 0 ] def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/select2.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/select2.min.js\" , ) ] @classmethod def from_enum ( cls , name : str , enum_type : Type [ Enum ], multiple : bool = False , ** kwargs : Dict [ str , Any ], ) -> \"EnumField\" : choices = [( e . value , e . name . replace ( \"_\" , \" \" )) for e in enum_type ] coerce = int if issubclass ( enum_type , IntEnum ) else str return cls ( name , choices = choices , multiple = multiple , coerce = coerce , ** kwargs ) # type: ignore @classmethod def from_choices ( cls , name : str , choices : Union [ List [ Tuple [ str , str ]], List [ str ], Tuple ], multiple : bool = False , ** kwargs : Dict [ str , Any ], ) -> \"EnumField\" : if len ( choices ) > 0 and not isinstance ( choices [ 0 ], ( list , tuple )): choices = list ( zip ( choices , choices )) return cls ( name , choices = choices , multiple = multiple , ** kwargs ) # type: ignore starlette_admin.fields.DateTimeField dataclass Bases: NumberField This field is used to represent a value that stores a python datetime.datetime object Parameters: Name Type Description Default search_format Optional [ str ] moment.js format to send for searching. Use None for iso Format None output_format str display output format '%B %d, %Y %H:%M:%S' Source code in starlette_admin/fields.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 @dataclass class DateTimeField ( NumberField ): \"\"\" This field is used to represent a value that stores a python datetime.datetime object Parameters: search_format: moment.js format to send for searching. Use None for iso Format output_format: display output format \"\"\" input_type : str = \"datetime-local\" class_ : str = \"field-datetime form-control\" search_builder_type : str = \"moment-MMMM D, YYYY HH:mm:ss\" output_format : str = \"%B %d , %Y %H:%M:%S\" search_format : Optional [ str ] = None form_alt_format : Optional [ str ] = \"F j, Y H:i:S\" def input_params ( self ) -> str : return html_params ( { \"type\" : self . input_type , \"min\" : self . min , \"max\" : self . max , \"step\" : self . step , \"data_alt_format\" : self . form_alt_format , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return datetime . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> str : assert isinstance ( value , ( datetime , date , time ) ), f \"Expect datetime, got { type ( value ) } \" if action != RequestAction . EDIT : return value . strftime ( self . output_format ) return value . isoformat () def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/flatpickr.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/flatpickr.min.js\" , ) ] starlette_admin.fields.DateField dataclass Bases: DateTimeField This field is used to represent a value that stores a python datetime.date object Parameters: Name Type Description Default search_format str moment.js format to send for searching. Use None for iso Format 'YYYY-MM-DD' output_format str Set display output format '%B %d, %Y' Source code in starlette_admin/fields.py 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 @dataclass class DateField ( DateTimeField ): \"\"\" This field is used to represent a value that stores a python datetime.date object Parameters: search_format: moment.js format to send for searching. Use None for iso Format output_format: Set display output format \"\"\" input_type : str = \"date\" class_ : str = \"field-date form-control\" output_format : str = \"%B %d , %Y\" search_format : str = \"YYYY-MM-DD\" search_builder_type : str = \"moment-MMMM D, YYYY\" form_alt_format : Optional [ str ] = \"F j, Y\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return date . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None starlette_admin.fields.TimeField dataclass Bases: DateTimeField This field is used to represent a value that stores a python datetime.time object Parameters: Name Type Description Default search_format str Format to send for search. Use None for iso Format 'HH:mm:ss' output_format str Set display output format '%H:%M:%S' Source code in starlette_admin/fields.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 @dataclass class TimeField ( DateTimeField ): \"\"\" This field is used to represent a value that stores a python datetime.time object Parameters: search_format: Format to send for search. Use None for iso Format output_format: Set display output format \"\"\" input_type : str = \"time\" class_ : str = \"field-time form-control\" search_builder_type : str = \"moment-HH:mm:ss\" output_format : str = \"%H:%M:%S\" search_format : str = \"HH:mm:ss\" form_alt_format : Optional [ str ] = \"H:i:S\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return time . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None starlette_admin.fields.JSONField dataclass Bases: BaseField This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 @dataclass class JSONField ( BaseField ): \"\"\" This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value.\"\"\" render_function_key : str = \"json\" form_template : str = \"forms/json.html\" display_template : str = \"displays/json.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ Dict [ str , Any ]]: try : value = form_data . get ( self . id ) return json . loads ( value ) if value is not None else None # type: ignore except JSONDecodeError : return None def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/jsoneditor.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/jsoneditor.min.js\" , ) ] starlette_admin.fields.FileField dataclass Bases: BaseField Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is filename , content-type and url . Use multiple=True for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. Source code in starlette_admin/fields.py 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @dataclass class FileField ( BaseField ): \"\"\" Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is `filename`, `content-type` and `url`. Use `multiple=True` for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. \"\"\" multiple : bool = False render_function_key : str = \"file\" form_template : str = \"forms/file.html\" display_template : str = \"displays/file.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Tuple [ Union [ UploadFile , List [ UploadFile ], None ], bool ]: should_be_deleted = form_data . get ( f \"_ { self . id } -delete\" ) == \"on\" if self . multiple : files = form_data . getlist ( self . id ) return [ f for f in files if not is_empty_file ( f . file )], should_be_deleted # type: ignore file = form_data . get ( self . id ) return ( None if ( file and is_empty_file ( file . file )) else file ), should_be_deleted # type: ignore def _isvalid_value ( self , value : Any ) -> bool : return value is not None and all ( [ ( hasattr ( v , \"url\" ) or ( isinstance ( v , dict ) and v . get ( \"url\" , None ) is not None ) ) for v in ( value if self . multiple else [ value ]) ] ) starlette_admin.fields.ImageField dataclass Bases: FileField FileField with accept=\"image/*\" . Source code in starlette_admin/fields.py 614 615 616 617 618 619 620 621 622 @dataclass class ImageField ( FileField ): \"\"\" FileField with `accept=\"image/*\"`. \"\"\" render_function_key : str = \"image\" form_template : str = \"forms/image.html\" display_template : str = \"displays/image.html\" starlette_admin.fields.HasOne dataclass Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required Source code in starlette_admin/fields.py 656 657 658 659 660 661 @dataclass class HasOne ( RelationField ): \"\"\" Parameters: identity: Foreign ModelView identity \"\"\" starlette_admin.fields.HasMany dataclass Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required Source code in starlette_admin/fields.py 664 665 666 667 668 669 670 671 @dataclass class HasMany ( RelationField ): \"\"\" Parameters: identity: Foreign ModelView identity \"\"\" multiple : bool = True starlette_admin.fields.ListField dataclass Bases: BaseField Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. Usage class MyModel : id : Optional [ int ] values : List [ str ] class ModelView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), ListField ( StringField ( \"values\" )] Source code in starlette_admin/fields.py 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 @dataclass ( init = False ) class ListField ( BaseField ): \"\"\" Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. !!!usage ```python class MyModel: id: Optional[int] values: List[str] class ModelView(BaseModelView): fields = [IntegerField(\"id\"), ListField(StringField(\"values\")] ``` \"\"\" form_template : str = \"forms/list.html\" display_template : str = \"displays/list.html\" search_builder_type : str = \"array\" field : BaseField = dc_field ( default_factory = lambda : BaseField ( \"\" )) def __init__ ( self , field : BaseField , required : bool = False ) -> None : self . field = field self . name = field . name self . required = required self . __post_init__ () def __post_init__ ( self ) -> None : super () . __post_init__ () self . field . id = \"\" if isinstance ( self . field , CollectionField ): self . field . _propagate_id () async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : indices = self . _extra_indices ( form_data ) value = [] for index in indices : self . field . id = \" {} . {} \" . format ( self . id , index ) if isinstance ( self . field , CollectionField ): self . field . _propagate_id () value . append ( await self . field . parse_form_data ( request , form_data , action )) return value async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : serialized_value = [] for item in value : serialized_item_value = None if item is not None : serialized_item_value = await self . field . serialize_value ( request , item , action ) serialized_value . append ( serialized_item_value ) return serialized_value def _extra_indices ( self , form_data : FormData ) -> List [ int ]: \"\"\" Return list of all indices. For example, if field id is `foo` and form_data contains following keys ['foo.0.bar', 'foo.1.baz'], then the indices are [0,1]. Note that some numbers can be skipped. For example, you may have [0,1,3,8] as indices. \"\"\" indices = set () for k in form_data : if k . startswith ( self . id ): k = k [ len ( self . id ) + 1 :] . split ( \".\" , maxsplit = 1 )[ 0 ] if k . isdigit (): indices . add ( int ( k )) return sorted ( indices ) def _field_at ( self , idx : Optional [ int ] = None ) -> BaseField : if idx is not None : self . field . id = self . id + \".\" + str ( idx ) else : \"\"\"To generate template string to be used in javascript\"\"\" self . field . id = \"\" if isinstance ( self . field , CollectionField ): self . field . _propagate_id () return self . field def additional_css_links ( self , request : Request ) -> List [ str ]: return self . field . additional_css_links ( request ) def additional_js_links ( self , request : Request ) -> List [ str ]: return self . field . additional_js_links ( request ) starlette_admin.fields.CollectionField dataclass Bases: BaseField This field represents a collection of others fields. Can be used to represent embedded mongodb document. Usage CollectionField ( \"config\" , fields = [ StringField ( \"key\" ), IntegerField ( \"value\" , help_text = \"multiple of 5\" )]), Source code in starlette_admin/fields.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 @dataclass ( init = False ) class CollectionField ( BaseField ): \"\"\" This field represents a collection of others fields. Can be used to represent embedded mongodb document. !!!usage ```python CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]), ``` \"\"\" fields : Sequence [ BaseField ] = dc_field ( default_factory = list ) render_function_key : str = \"json\" form_template : str = \"forms/collection.html\" display_template : str = \"displays/collection.html\" def __init__ ( self , name : str , fields : Sequence [ BaseField ], required : bool = False ) -> None : self . name = name self . fields = fields self . required = required super () . __post_init__ () self . _propagate_id () def _extract_fields ( self , action : RequestAction = RequestAction . LIST ) -> Sequence [ BaseField ]: return extract_fields ( self . fields , action ) def _propagate_id ( self ) -> None : \"\"\"Will update fields id by adding his id as prefix (ex: category.name)\"\"\" for field in self . fields : field . id = self . id + ( \".\" if self . id else \"\" ) + field . name if isinstance ( field , type ( self )): field . _propagate_id () async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : value = {} for field in self . fields : if ( action == RequestAction . EDIT and field . exclude_from_edit ) or ( action == RequestAction . CREATE and field . exclude_from_create ): continue value [ field . name ] = await field . parse_form_data ( request , form_data , action ) return value async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : serialized_value : Dict [ str , Any ] = {} for field in self . fields : name = field . name serialized_value [ name ] = None if hasattr ( value , name ) or ( isinstance ( value , dict ) and name in value ): field_value = ( getattr ( value , name ) if hasattr ( value , name ) else value [ name ] ) if field_value is not None : serialized_value [ name ] = await field . serialize_value ( request , field_value , action ) return serialized_value def additional_css_links ( self , request : Request ) -> List [ str ]: _links = [] for f in self . fields : _links . extend ( f . additional_css_links ( request )) return _links def additional_js_links ( self , request : Request ) -> List [ str ]: _links = [] for f in self . fields : _links . extend ( f . additional_js_links ( request )) return _links","title":"Fields"},{"location":"api/fields/#starlette_admin.fields.BaseField","text":"Base class for fields Parameters: Name Type Description Default name str Field name, same as attribute name in your model required label Optional [ str ] Field label None help_text Optional [ str ] Hint message to display in forms None type Optional [ str ] Field type, unique key used to define the field None id str Unique id, used to represent field instance '' search_builder_type Optional [ str ] datatable columns.searchBuilderType, For more information click here 'default' required Optional [ bool ] Indicate if the fields is required False exclude_from_list Optional [ bool ] Control field visibility in list page False exclude_from_detail Optional [ bool ] Control field visibility in detail page False exclude_from_create Optional [ bool ] Control field visibility in create page False exclude_from_edit Optional [ bool ] Control field visibility in edit page False searchable Optional [ bool ] Indicate if the fields is searchable True orderable Optional [ bool ] Indicate if the fields is orderable True render_function_key str Render function key inside the global render variable in javascript 'text' form_template str template for rendering this field in creation and edit page 'forms/input.html' display_template str template for displaying this field in detail page 'displays/text.html' Source code in starlette_admin/fields.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @dataclass class BaseField : \"\"\" Base class for fields Parameters: name: Field name, same as attribute name in your model label: Field label help_text: Hint message to display in forms type: Field type, unique key used to define the field id: Unique id, used to represent field instance search_builder_type: datatable columns.searchBuilderType, For more information [click here](https://datatables.net/reference/option/columns.searchBuilderType) required: Indicate if the fields is required exclude_from_list: Control field visibility in list page exclude_from_detail: Control field visibility in detail page exclude_from_create: Control field visibility in create page exclude_from_edit: Control field visibility in edit page searchable: Indicate if the fields is searchable orderable: Indicate if the fields is orderable render_function_key: Render function key inside the global `render` variable in javascript form_template: template for rendering this field in creation and edit page display_template: template for displaying this field in detail page \"\"\" name : str label : Optional [ str ] = None type : Optional [ str ] = None help_text : Optional [ str ] = None id : str = \"\" search_builder_type : Optional [ str ] = \"default\" required : Optional [ bool ] = False exclude_from_list : Optional [ bool ] = False exclude_from_detail : Optional [ bool ] = False exclude_from_create : Optional [ bool ] = False exclude_from_edit : Optional [ bool ] = False searchable : Optional [ bool ] = True orderable : Optional [ bool ] = True render_function_key : str = \"text\" form_template : str = \"forms/input.html\" label_template : str = \"forms/_label.html\" display_template : str = \"displays/text.html\" error_class = \"is-invalid\" def __post_init__ ( self ) -> None : if self . label is None : self . label = self . name . replace ( \"_\" , \" \" ) . capitalize () if self . type is None : self . type = type ( self ) . __name__ self . id = self . name async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : return form_data . get ( self . id ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def additional_css_links ( self , request : Request ) -> List [ str ]: return [] def additional_js_links ( self , request : Request ) -> List [ str ]: return [] def dict ( self ) -> Dict [ str , Any ]: return asdict ( self )","title":"BaseField"},{"location":"api/fields/#starlette_admin.fields.BooleanField","text":"Bases: BaseField This field displays the true/false value of a boolean property. Source code in starlette_admin/fields.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @dataclass class BooleanField ( BaseField ): \"\"\"This field displays the `true/false` value of a boolean property.\"\"\" search_builder_type : Optional [ str ] = \"bool\" render_function_key : str = \"boolean\" form_template : str = \"forms/boolean.html\" display_template : str = \"displays/boolean.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> bool : return form_data . get ( self . id ) == \"on\" async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> bool : return bool ( value )","title":"BooleanField"},{"location":"api/fields/#starlette_admin.fields.IntegerField","text":"Bases: NumberField This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 @dataclass class IntegerField ( NumberField ): \"\"\" This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value.\"\"\" class_ : str = \"field-integer form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ int ]: try : return int ( form_data . get ( self . id )) # type: ignore except ( ValueError , TypeError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return int ( value )","title":"IntegerField"},{"location":"api/fields/#starlette_admin.fields.DecimalField","text":"Bases: NumberField This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 @dataclass class DecimalField ( NumberField ): \"\"\" This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. \"\"\" step : str = \"any\" class_ : str = \"field-decimal form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ decimal . Decimal ]: try : return decimal . Decimal ( form_data . get ( self . id )) # type: ignore except ( decimal . InvalidOperation , ValueError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> str : return str ( value )","title":"DecimalField"},{"location":"api/fields/#starlette_admin.fields.FloatField","text":"Bases: StringField A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 @dataclass class FloatField ( StringField ): \"\"\" A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. \"\"\" class_ : str = \"field-float form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ float ]: try : return float ( form_data . get ( self . id )) # type: ignore except ValueError : return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> float : return float ( value )","title":"FloatField"},{"location":"api/fields/#starlette_admin.fields.StringField","text":"Bases: BaseField This field is used to represent any kind of short text content. Source code in starlette_admin/fields.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 @dataclass class StringField ( BaseField ): \"\"\"This field is used to represent any kind of short text content.\"\"\" search_builder_type : Optional [ str ] = \"string\" input_type : str = \"text\" class_ : str = \"field-string form-control\" placeholder : Optional [ str ] = None def input_params ( self ) -> str : return html_params ( { \"type\" : self . input_type , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return str ( value )","title":"StringField"},{"location":"api/fields/#starlette_admin.fields.TextAreaField","text":"Bases: StringField This field is used to represent any kind of long text content. For short text contents, use StringField Source code in starlette_admin/fields.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 @dataclass class TextAreaField ( StringField ): \"\"\"This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\" rows : int = 6 maxlength : Optional [ int ] = None minlength : Optional [ int ] = None class_ : str = \"field-textarea form-control\" form_template : str = \"forms/textarea.html\" def input_params ( self ) -> str : return html_params ( { \"rows\" : self . rows , \"minlength\" : self . minlength , \"maxlength\" : self . maxlength , \"placeholder\" : self . placeholder , \"required\" : self . required , } )","title":"TextAreaField"},{"location":"api/fields/#starlette_admin.fields.TagsField","text":"Bases: BaseField This field is used to represent the value of properties that store a list of string values. Render as select2 tags input. Source code in starlette_admin/fields.py 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 @dataclass class TagsField ( BaseField ): \"\"\" This field is used to represent the value of properties that store a list of string values. Render as `select2` tags input. \"\"\" form_template : str = \"forms/tags.html\" form_js : str = \"js/field/forms/tags.js\" class_ : str = \"field-tags form-control form-select\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> List [ str ]: return form_data . getlist ( self . id ) # type: ignore def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/select2.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/select2.min.js\" , ) ]","title":"TagsField"},{"location":"api/fields/#starlette_admin.fields.EmailField","text":"Bases: StringField This field is used to represent a text content that stores a single email address. Source code in starlette_admin/fields.py 281 282 283 284 285 286 287 288 289 @dataclass class EmailField ( StringField ): \"\"\"This field is used to represent a text content that stores a single email address.\"\"\" input_type : str = \"email\" render_function_key : str = \"email\" class_ : str = \"field-email form-control\" display_template : str = \"displays/email.html\"","title":"EmailField"},{"location":"api/fields/#starlette_admin.fields.URLField","text":"Bases: StringField This field is used to represent a text content that stores a single URL. Source code in starlette_admin/fields.py 292 293 294 295 296 297 298 299 @dataclass class URLField ( StringField ): \"\"\"This field is used to represent a text content that stores a single URL.\"\"\" input_type : str = \"url\" render_function_key : str = \"url\" class_ : str = \"field-url form-control\" display_template : str = \"displays/url.html\"","title":"URLField"},{"location":"api/fields/#starlette_admin.fields.PhoneField","text":"Bases: StringField A StringField, except renders an <input type=\"phone\"> . Source code in starlette_admin/fields.py 302 303 304 305 306 307 @dataclass class PhoneField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"phone\">`.\"\"\" input_type : str = \"phone\" class_ : str = \"field-phone form-control\"","title":"PhoneField"},{"location":"api/fields/#starlette_admin.fields.ColorField","text":"Bases: StringField A StringField, except renders an <input type=\"color\"> . Source code in starlette_admin/fields.py 310 311 312 313 314 315 @dataclass class ColorField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"color\">`.\"\"\" input_type : str = \"color\" class_ : str = \"field-color form-control form-control-color\"","title":"ColorField"},{"location":"api/fields/#starlette_admin.fields.PasswordField","text":"Bases: StringField A StringField, except renders an <input type=\"password\"> . Source code in starlette_admin/fields.py 318 319 320 321 322 323 @dataclass class PasswordField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"password\">`.\"\"\" input_type : str = \"password\" class_ : str = \"field-password form-control\"","title":"PasswordField"},{"location":"api/fields/#starlette_admin.fields.EnumField","text":"Bases: StringField Enumeration Field. It take a python enum.Enum class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example class Status ( str , enum . Enum ): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel : status : Optional [ Status ] = None class MyModelView ( ModelView ): fields = [ EnumField . from_enum ( \"status\" , Status )] class MyModel : language : str class MyModelView ( ModelView ): fields = [ EnumField . from_choices ( \"language\" , [( 'cpp' , 'C++' ), ( 'py' , 'Python' ), ( 'text' , 'Plain Text' )])] Source code in starlette_admin/fields.py 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 @dataclass class EnumField ( StringField ): \"\"\" Enumeration Field. It take a python `enum.Enum` class or a list of *(value, label)* pairs. It can also be a list of only values, in which case the value is used as the label. Example: ```Python class Status(str, enum.Enum): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel: status: Optional[Status] = None class MyModelView(ModelView): fields = [EnumField.from_enum(\"status\", Status)] ``` ```Python class MyModel: language: str class MyModelView(ModelView): fields = [EnumField.from_choices(\"language\", [('cpp', 'C++'), ('py', 'Python'), ('text', 'Plain Text')])] ``` \"\"\" multiple : bool = False choices : Iterable [ Tuple [ str , str ]] = dc_field ( default_factory = dict ) form_template : str = \"forms/enum.html\" class_ : str = \"field-enum form-control form-select\" coerce : type = str async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : return ( list ( map ( self . coerce , form_data . getlist ( self . id ))) if self . multiple else ( self . coerce ( form_data . get ( self . id )) if form_data . get ( self . id ) else None ) ) def _get_label ( self , value : Any ) -> Any : if isinstance ( value , Enum ): return value . name for v , label in self . choices : if value == v : return label raise ValueError ( f \"Invalid choice value: { value } \" ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : labels = [ ( self . _get_label ( v ) if action != RequestAction . EDIT else v ) for v in ( value if self . multiple else [ value ]) ] return labels if self . multiple else labels [ 0 ] def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/select2.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/select2.min.js\" , ) ] @classmethod def from_enum ( cls , name : str , enum_type : Type [ Enum ], multiple : bool = False , ** kwargs : Dict [ str , Any ], ) -> \"EnumField\" : choices = [( e . value , e . name . replace ( \"_\" , \" \" )) for e in enum_type ] coerce = int if issubclass ( enum_type , IntEnum ) else str return cls ( name , choices = choices , multiple = multiple , coerce = coerce , ** kwargs ) # type: ignore @classmethod def from_choices ( cls , name : str , choices : Union [ List [ Tuple [ str , str ]], List [ str ], Tuple ], multiple : bool = False , ** kwargs : Dict [ str , Any ], ) -> \"EnumField\" : if len ( choices ) > 0 and not isinstance ( choices [ 0 ], ( list , tuple )): choices = list ( zip ( choices , choices )) return cls ( name , choices = choices , multiple = multiple , ** kwargs ) # type: ignore","title":"EnumField"},{"location":"api/fields/#starlette_admin.fields.DateTimeField","text":"Bases: NumberField This field is used to represent a value that stores a python datetime.datetime object Parameters: Name Type Description Default search_format Optional [ str ] moment.js format to send for searching. Use None for iso Format None output_format str display output format '%B %d, %Y %H:%M:%S' Source code in starlette_admin/fields.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 @dataclass class DateTimeField ( NumberField ): \"\"\" This field is used to represent a value that stores a python datetime.datetime object Parameters: search_format: moment.js format to send for searching. Use None for iso Format output_format: display output format \"\"\" input_type : str = \"datetime-local\" class_ : str = \"field-datetime form-control\" search_builder_type : str = \"moment-MMMM D, YYYY HH:mm:ss\" output_format : str = \"%B %d , %Y %H:%M:%S\" search_format : Optional [ str ] = None form_alt_format : Optional [ str ] = \"F j, Y H:i:S\" def input_params ( self ) -> str : return html_params ( { \"type\" : self . input_type , \"min\" : self . min , \"max\" : self . max , \"step\" : self . step , \"data_alt_format\" : self . form_alt_format , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return datetime . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> str : assert isinstance ( value , ( datetime , date , time ) ), f \"Expect datetime, got { type ( value ) } \" if action != RequestAction . EDIT : return value . strftime ( self . output_format ) return value . isoformat () def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/flatpickr.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/flatpickr.min.js\" , ) ]","title":"DateTimeField"},{"location":"api/fields/#starlette_admin.fields.DateField","text":"Bases: DateTimeField This field is used to represent a value that stores a python datetime.date object Parameters: Name Type Description Default search_format str moment.js format to send for searching. Use None for iso Format 'YYYY-MM-DD' output_format str Set display output format '%B %d, %Y' Source code in starlette_admin/fields.py 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 @dataclass class DateField ( DateTimeField ): \"\"\" This field is used to represent a value that stores a python datetime.date object Parameters: search_format: moment.js format to send for searching. Use None for iso Format output_format: Set display output format \"\"\" input_type : str = \"date\" class_ : str = \"field-date form-control\" output_format : str = \"%B %d , %Y\" search_format : str = \"YYYY-MM-DD\" search_builder_type : str = \"moment-MMMM D, YYYY\" form_alt_format : Optional [ str ] = \"F j, Y\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return date . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None","title":"DateField"},{"location":"api/fields/#starlette_admin.fields.TimeField","text":"Bases: DateTimeField This field is used to represent a value that stores a python datetime.time object Parameters: Name Type Description Default search_format str Format to send for search. Use None for iso Format 'HH:mm:ss' output_format str Set display output format '%H:%M:%S' Source code in starlette_admin/fields.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 @dataclass class TimeField ( DateTimeField ): \"\"\" This field is used to represent a value that stores a python datetime.time object Parameters: search_format: Format to send for search. Use None for iso Format output_format: Set display output format \"\"\" input_type : str = \"time\" class_ : str = \"field-time form-control\" search_builder_type : str = \"moment-HH:mm:ss\" output_format : str = \"%H:%M:%S\" search_format : str = \"HH:mm:ss\" form_alt_format : Optional [ str ] = \"H:i:S\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return time . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None","title":"TimeField"},{"location":"api/fields/#starlette_admin.fields.JSONField","text":"Bases: BaseField This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 @dataclass class JSONField ( BaseField ): \"\"\" This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value.\"\"\" render_function_key : str = \"json\" form_template : str = \"forms/json.html\" display_template : str = \"displays/json.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ Dict [ str , Any ]]: try : value = form_data . get ( self . id ) return json . loads ( value ) if value is not None else None # type: ignore except JSONDecodeError : return None def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/jsoneditor.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/jsoneditor.min.js\" , ) ]","title":"JSONField"},{"location":"api/fields/#starlette_admin.fields.FileField","text":"Bases: BaseField Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is filename , content-type and url . Use multiple=True for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. Source code in starlette_admin/fields.py 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @dataclass class FileField ( BaseField ): \"\"\" Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is `filename`, `content-type` and `url`. Use `multiple=True` for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. \"\"\" multiple : bool = False render_function_key : str = \"file\" form_template : str = \"forms/file.html\" display_template : str = \"displays/file.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Tuple [ Union [ UploadFile , List [ UploadFile ], None ], bool ]: should_be_deleted = form_data . get ( f \"_ { self . id } -delete\" ) == \"on\" if self . multiple : files = form_data . getlist ( self . id ) return [ f for f in files if not is_empty_file ( f . file )], should_be_deleted # type: ignore file = form_data . get ( self . id ) return ( None if ( file and is_empty_file ( file . file )) else file ), should_be_deleted # type: ignore def _isvalid_value ( self , value : Any ) -> bool : return value is not None and all ( [ ( hasattr ( v , \"url\" ) or ( isinstance ( v , dict ) and v . get ( \"url\" , None ) is not None ) ) for v in ( value if self . multiple else [ value ]) ] )","title":"FileField"},{"location":"api/fields/#starlette_admin.fields.ImageField","text":"Bases: FileField FileField with accept=\"image/*\" . Source code in starlette_admin/fields.py 614 615 616 617 618 619 620 621 622 @dataclass class ImageField ( FileField ): \"\"\" FileField with `accept=\"image/*\"`. \"\"\" render_function_key : str = \"image\" form_template : str = \"forms/image.html\" display_template : str = \"displays/image.html\"","title":"ImageField"},{"location":"api/fields/#starlette_admin.fields.HasOne","text":"Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required Source code in starlette_admin/fields.py 656 657 658 659 660 661 @dataclass class HasOne ( RelationField ): \"\"\" Parameters: identity: Foreign ModelView identity \"\"\"","title":"HasOne"},{"location":"api/fields/#starlette_admin.fields.HasMany","text":"Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required Source code in starlette_admin/fields.py 664 665 666 667 668 669 670 671 @dataclass class HasMany ( RelationField ): \"\"\" Parameters: identity: Foreign ModelView identity \"\"\" multiple : bool = True","title":"HasMany"},{"location":"api/fields/#starlette_admin.fields.ListField","text":"Bases: BaseField Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. Usage class MyModel : id : Optional [ int ] values : List [ str ] class ModelView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), ListField ( StringField ( \"values\" )] Source code in starlette_admin/fields.py 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 @dataclass ( init = False ) class ListField ( BaseField ): \"\"\" Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. !!!usage ```python class MyModel: id: Optional[int] values: List[str] class ModelView(BaseModelView): fields = [IntegerField(\"id\"), ListField(StringField(\"values\")] ``` \"\"\" form_template : str = \"forms/list.html\" display_template : str = \"displays/list.html\" search_builder_type : str = \"array\" field : BaseField = dc_field ( default_factory = lambda : BaseField ( \"\" )) def __init__ ( self , field : BaseField , required : bool = False ) -> None : self . field = field self . name = field . name self . required = required self . __post_init__ () def __post_init__ ( self ) -> None : super () . __post_init__ () self . field . id = \"\" if isinstance ( self . field , CollectionField ): self . field . _propagate_id () async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : indices = self . _extra_indices ( form_data ) value = [] for index in indices : self . field . id = \" {} . {} \" . format ( self . id , index ) if isinstance ( self . field , CollectionField ): self . field . _propagate_id () value . append ( await self . field . parse_form_data ( request , form_data , action )) return value async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : serialized_value = [] for item in value : serialized_item_value = None if item is not None : serialized_item_value = await self . field . serialize_value ( request , item , action ) serialized_value . append ( serialized_item_value ) return serialized_value def _extra_indices ( self , form_data : FormData ) -> List [ int ]: \"\"\" Return list of all indices. For example, if field id is `foo` and form_data contains following keys ['foo.0.bar', 'foo.1.baz'], then the indices are [0,1]. Note that some numbers can be skipped. For example, you may have [0,1,3,8] as indices. \"\"\" indices = set () for k in form_data : if k . startswith ( self . id ): k = k [ len ( self . id ) + 1 :] . split ( \".\" , maxsplit = 1 )[ 0 ] if k . isdigit (): indices . add ( int ( k )) return sorted ( indices ) def _field_at ( self , idx : Optional [ int ] = None ) -> BaseField : if idx is not None : self . field . id = self . id + \".\" + str ( idx ) else : \"\"\"To generate template string to be used in javascript\"\"\" self . field . id = \"\" if isinstance ( self . field , CollectionField ): self . field . _propagate_id () return self . field def additional_css_links ( self , request : Request ) -> List [ str ]: return self . field . additional_css_links ( request ) def additional_js_links ( self , request : Request ) -> List [ str ]: return self . field . additional_js_links ( request )","title":"ListField"},{"location":"api/fields/#starlette_admin.fields.CollectionField","text":"Bases: BaseField This field represents a collection of others fields. Can be used to represent embedded mongodb document. Usage CollectionField ( \"config\" , fields = [ StringField ( \"key\" ), IntegerField ( \"value\" , help_text = \"multiple of 5\" )]), Source code in starlette_admin/fields.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 @dataclass ( init = False ) class CollectionField ( BaseField ): \"\"\" This field represents a collection of others fields. Can be used to represent embedded mongodb document. !!!usage ```python CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]), ``` \"\"\" fields : Sequence [ BaseField ] = dc_field ( default_factory = list ) render_function_key : str = \"json\" form_template : str = \"forms/collection.html\" display_template : str = \"displays/collection.html\" def __init__ ( self , name : str , fields : Sequence [ BaseField ], required : bool = False ) -> None : self . name = name self . fields = fields self . required = required super () . __post_init__ () self . _propagate_id () def _extract_fields ( self , action : RequestAction = RequestAction . LIST ) -> Sequence [ BaseField ]: return extract_fields ( self . fields , action ) def _propagate_id ( self ) -> None : \"\"\"Will update fields id by adding his id as prefix (ex: category.name)\"\"\" for field in self . fields : field . id = self . id + ( \".\" if self . id else \"\" ) + field . name if isinstance ( field , type ( self )): field . _propagate_id () async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : value = {} for field in self . fields : if ( action == RequestAction . EDIT and field . exclude_from_edit ) or ( action == RequestAction . CREATE and field . exclude_from_create ): continue value [ field . name ] = await field . parse_form_data ( request , form_data , action ) return value async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : serialized_value : Dict [ str , Any ] = {} for field in self . fields : name = field . name serialized_value [ name ] = None if hasattr ( value , name ) or ( isinstance ( value , dict ) and name in value ): field_value = ( getattr ( value , name ) if hasattr ( value , name ) else value [ name ] ) if field_value is not None : serialized_value [ name ] = await field . serialize_value ( request , field_value , action ) return serialized_value def additional_css_links ( self , request : Request ) -> List [ str ]: _links = [] for f in self . fields : _links . extend ( f . additional_css_links ( request )) return _links def additional_js_links ( self , request : Request ) -> List [ str ]: _links = [] for f in self . fields : _links . extend ( f . additional_js_links ( request )) return _links","title":"CollectionField"},{"location":"api/views/","text":"starlette_admin.views.BaseView Base class for all views Attributes: Name Type Description label str Label of the view to be displayed. icon Optional [ str ] Icon to be displayed for this model in the admin. Only FontAwesome names are supported. Source code in starlette_admin/views.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class BaseView : \"\"\" Base class for all views Attributes: label: Label of the view to be displayed. icon: Icon to be displayed for this model in the admin. Only FontAwesome names are supported. \"\"\" label : str = \"\" icon : Optional [ str ] = None def is_active ( self , request : Request ) -> bool : \"\"\"Return true if the current view is active\"\"\" return False def is_accessible ( self , request : Request ) -> bool : \"\"\" Override this method to add permission checks. Return True if current user can access this view \"\"\" return True is_accessible ( request ) Override this method to add permission checks. Return True if current user can access this view Source code in starlette_admin/views.py 49 50 51 52 53 54 def is_accessible ( self , request : Request ) -> bool : \"\"\" Override this method to add permission checks. Return True if current user can access this view \"\"\" return True is_active ( request ) Return true if the current view is active Source code in starlette_admin/views.py 45 46 47 def is_active ( self , request : Request ) -> bool : \"\"\"Return true if the current view is active\"\"\" return False starlette_admin.views.DropDown Bases: BaseView Group views inside a dropdown Example admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) ) Source code in starlette_admin/views.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class DropDown ( BaseView ): \"\"\" Group views inside a dropdown Example: ```Python admin.add_view( DropDown( \"Resources\", icon=\"fa fa-list\", views=[ ModelView(User), Link(label=\"Home Page\", url=\"/\"), CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"), ], ) ) ``` \"\"\" def __init__ ( self , label : str , views : List [ Union [ Type [ BaseView ], BaseView ]], icon : Optional [ str ] = None , always_open : bool = True , ) -> None : self . label = label self . icon = icon self . always_open = always_open self . views : List [ BaseView ] = [ ( v if isinstance ( v , BaseView ) else v ()) for v in views ] def is_active ( self , request : Request ) -> bool : return any ([ v . is_active ( request ) for v in self . views ]) def is_accessible ( self , request : Request ) -> bool : return any ([ v . is_accessible ( request ) for v in self . views ]) starlette_admin.views.Link Bases: BaseView Add arbitrary hyperlinks to the menu Example admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" )) Source code in starlette_admin/views.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Link ( BaseView ): \"\"\" Add arbitrary hyperlinks to the menu Example: ```Python admin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\")) ``` \"\"\" def __init__ ( self , label : str = \"\" , icon : Optional [ str ] = None , url : str = \"/\" , target : Optional [ str ] = \"_self\" , ): self . label = label self . icon = icon self . url = url self . target = target starlette_admin.views.CustomView Bases: BaseView Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. Attributes: Name Type Description path Route path template_path Path to template file methods HTTP methods name Route name add_to_menu Display to menu or not Example admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) Source code in starlette_admin/views.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class CustomView ( BaseView ): \"\"\" Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. Attributes: path: Route path template_path: Path to template file methods: HTTP methods name: Route name add_to_menu: Display to menu or not Example: ```Python admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\")) ``` \"\"\" def __init__ ( self , label : str , icon : Optional [ str ] = None , path : str = \"/\" , template_path : str = \"index.html\" , name : Optional [ str ] = None , methods : Optional [ List [ str ]] = None , add_to_menu : bool = True , ): self . label = label self . icon = icon self . path = path self . template_path = template_path self . name = name self . methods = methods self . add_to_menu = add_to_menu async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : \"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\" return templates . TemplateResponse ( self . template_path , { \"request\" : request }) def is_active ( self , request : Request ) -> bool : return request . scope [ \"path\" ] == self . path render ( request , templates ) async Default methods to render view. Override this methods to add your custom logic. Source code in starlette_admin/views.py 157 158 159 async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : \"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\" return templates . TemplateResponse ( self . template_path , { \"request\" : request }) starlette_admin.views.BaseModelView Bases: BaseView Base administrative view. Derive from this class to implement your administrative interface piece. Attributes: Name Type Description identity Optional [ str ] Unique identity to identify the model associated to this view. Will be used for URL of the endpoints. name Optional [ str ] Name of the view to be displayed fields Sequence [ BaseField ] List of fields pk_attr Optional [ str ] Primary key field name form_include_pk bool Indicate if the primary key should be excluded from create and edit. Default to True exclude_fields_from_list Sequence [ str ] List of fields to exclude in List page. exclude_fields_from_detail Sequence [ str ] List of fields to exclude in Detail page. exclude_fields_from_create Sequence [ str ] List of fields to exclude from creation page. exclude_fields_from_edit Sequence [ str ] List of fields to exclude from editing page. searchable_fields Optional [ Sequence [ str ]] List of searchable fields. sortable_fields Optional [ Sequence [ str ]] List of sortable fields. export_fields Optional [ Sequence [ str ]] List of fields to include in exports. export_types Sequence [ ExportType ] A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . Only pdf is disable by default. column_visibility bool Enable/Disable column visibility extension search_builder bool Enable/Disable search builder extension page_size int Default number of items to display in List page pagination. Default value is set to 10 . page_size_options Sequence [ int ] Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All responsive_table bool Enable/Disable responsive extension list_template str List view template. Default is list.html . detail_template str Details view template. Default is details.html . create_template str Edit view template. Default is edit.html . edit_template str Edit view template. Default is edit.html . actions Optional [ Sequence [ str ]] List of actions Source code in starlette_admin/views.pyclass BaseModelView ( BaseView ): \"\"\" Base administrative view. Derive from this class to implement your administrative interface piece. Attributes: identity: Unique identity to identify the model associated to this view. Will be used for URL of the endpoints. name: Name of the view to be displayed fields: List of fields pk_attr: Primary key field name form_include_pk: Indicate if the primary key should be excluded from create and edit. Default to True exclude_fields_from_list: List of fields to exclude in List page. exclude_fields_from_detail: List of fields to exclude in Detail page. exclude_fields_from_create: List of fields to exclude from creation page. exclude_fields_from_edit: List of fields to exclude from editing page. searchable_fields: List of searchable fields. sortable_fields: List of sortable fields. export_fields: List of fields to include in exports. export_types: A list of available export filetypes. Available exports are `['csv', 'excel', 'pdf', 'print']`. Only `pdf` is disable by default. column_visibility: Enable/Disable [column visibility](https://datatables.net/extensions/buttons/built-in#Column-visibility) extension search_builder: Enable/Disable [search builder](https://datatables.net/extensions/searchbuilder/) extension page_size: Default number of items to display in List page pagination. Default value is set to `10`. page_size_options: Pagination choices displayed in List page. Default value is set to `[10, 25, 50, 100]`. Use `-1`to display All responsive_table: Enable/Disable [responsive](https://datatables.net/extensions/responsive/) extension list_template: List view template. Default is `list.html`. detail_template: Details view template. Default is `details.html`. create_template: Edit view template. Default is `edit.html`. edit_template: Edit view template. Default is `edit.html`. actions: List of actions \"\"\" identity : Optional [ str ] = None name : Optional [ str ] = None fields : Sequence [ BaseField ] = [] pk_attr : Optional [ str ] = None form_include_pk : bool = False exclude_fields_from_list : Sequence [ str ] = [] exclude_fields_from_detail : Sequence [ str ] = [] exclude_fields_from_create : Sequence [ str ] = [] exclude_fields_from_edit : Sequence [ str ] = [] searchable_fields : Optional [ Sequence [ str ]] = None sortable_fields : Optional [ Sequence [ str ]] = None export_types : Sequence [ ExportType ] = [ ExportType . CSV , ExportType . EXCEL , ExportType . PRINT , ] export_fields : Optional [ Sequence [ str ]] = None column_visibility : bool = True search_builder : bool = True page_size : int = 10 page_size_options : Sequence [ int ] = [ 10 , 25 , 50 , 100 ] responsive_table : bool = False list_template : str = \"list.html\" detail_template : str = \"detail.html\" create_template : str = \"create.html\" edit_template : str = \"edit.html\" actions : Optional [ Sequence [ str ]] = None _find_foreign_model : Callable [[ str ], \"BaseModelView\" ] def __init__ ( self ) -> None : # noqa: C901 fringe = list ( self . fields ) all_field_names = [] while len ( fringe ) > 0 : field = fringe . pop ( 0 ) if not hasattr ( field , \"_name\" ): field . _name = field . name # type: ignore if isinstance ( field , CollectionField ): for f in field . fields : f . _name = \" {} . {} \" . format ( field . _name , f . name ) # type: ignore fringe . extend ( field . fields ) name = field . _name # type: ignore if name == self . pk_attr and not self . form_include_pk : field . exclude_from_create = True field . exclude_from_edit = True if name in self . exclude_fields_from_list : field . exclude_from_list = True if name in self . exclude_fields_from_detail : field . exclude_from_detail = True if name in self . exclude_fields_from_create : field . exclude_from_create = True if name in self . exclude_fields_from_edit : field . exclude_from_edit = True if not isinstance ( field , CollectionField ): all_field_names . append ( name ) field . searchable = ( self . searchable_fields is None ) or ( name in self . searchable_fields ) field . orderable = ( self . sortable_fields is None ) or ( name in self . sortable_fields ) if self . searchable_fields is None : self . searchable_fields = all_field_names [:] if self . sortable_fields is None : self . sortable_fields = all_field_names [:] if self . export_fields is None : self . export_fields = all_field_names [:] # Actions self . _actions : Dict [ str , Dict [ str , str ]] = {} self . _handlers : Dict [ str , Callable [[ Request , Sequence [ Any ]], Awaitable ]] = {} self . _init_actions () def is_active ( self , request : Request ) -> bool : return request . path_params . get ( \"identity\" , None ) == self . identity def _init_actions ( self ) -> None : \"\"\" Initialize list of actions \"\"\" for _method_name , method in inspect . getmembers ( self , predicate = inspect . ismethod ): if hasattr ( method , \"_action\" ): name = method . _action . get ( \"name\" ) self . _actions [ name ] = method . _action self . _handlers [ name ] = method if self . actions is None : self . actions = list ( self . _handlers . keys ()) for action_name in self . actions : if action_name not in self . _actions : raise ValueError ( \"Unknown action with name ` {} `\" . format ( action_name )) async def is_action_allowed ( self , request : Request , name : str ) -> bool : \"\"\" Verify if action with `name` is allowed. Override this method to allow or disallow actions based on some condition. Args: name: Action name request: Starlette request \"\"\" if name == \"delete\" : return self . can_delete ( request ) return True async def get_all_actions ( self , request : Request ) -> List [ Optional [ dict ]]: actions = [] assert self . actions is not None for action_name in self . actions : if await self . is_action_allowed ( request , action_name ): actions . append ( self . _actions . get ( action_name )) return actions async def handle_action ( self , request : Request , pks : List [ Any ], name : str ) -> str : \"\"\" Handle action with `name`. Raises: ActionFailed \"\"\" handler = self . _handlers . get ( name , None ) if handler is None : raise ActionFailed ( \"Invalid action\" ) if not await self . is_action_allowed ( request , name ): raise ActionFailed ( \"Forbidden\" ) return await handler ( request , pks ) @action ( name = \"delete\" , text = \"Delete\" , confirmation = \"Are you sure you want to delete this items ?\" , submit_btn_text = \"Yes, delete them all\" , submit_btn_class = \"btn-danger\" , ) async def delete_action ( self , request : Request , pks : List [ Any ]) -> str : affected_rows = await self . delete ( request , pks ) return \" {} items were successfully deleted\" . format ( affected_rows ) @abstractmethod async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> Sequence [ Any ]: \"\"\" Find all items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search skip: should return values start from position skip+1 limit: number of maximum items to return order_by: order data clauses in form `[\"id asc\", \"name desc\"]` \"\"\" raise NotImplementedError () @abstractmethod async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : \"\"\" Count items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search \"\"\" raise NotImplementedError () @abstractmethod async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: \"\"\" Bulk delete items Parameters: request: Starlette Request pks: List of primary keys \"\"\" raise NotImplementedError () @abstractmethod async def find_by_pk ( self , request : Request , pk : Any ) -> Any : \"\"\" Find one item Parameters: request: Starlette Request pk: Primary key \"\"\" raise NotImplementedError () @abstractmethod async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> Sequence [ Any ]: \"\"\" Find many items Parameters: request: Starlette Request pks: List of Primary key \"\"\" raise NotImplementedError () @abstractmethod async def create ( self , request : Request , data : Dict ) -> Any : \"\"\" Create item Parameters: request: Starlette Request data: Dict values contained converted form data Returns: Any: Created Item \"\"\" raise NotImplementedError () @abstractmethod async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : \"\"\" Edit item Parameters: request: Starlette Request pk: Primary key data: Dict values contained converted form data Returns: Any: Edited Item \"\"\" raise NotImplementedError () def can_view_details ( self , request : Request ) -> bool : \"\"\"Permission for viewing full details of Item. Return True by default\"\"\" return True def can_create ( self , request : Request ) -> bool : \"\"\"Permission for creating new Items. Return True by default\"\"\" return True def can_edit ( self , request : Request ) -> bool : \"\"\"Permission for editing Items. Return True by default\"\"\" return True def can_delete ( self , request : Request ) -> bool : \"\"\"Permission for deleting Items. Return True by default\"\"\" return True async def serialize_field_value ( self , value : Any , field : BaseField , action : RequestAction , request : Request ) -> Any : \"\"\" Format output value for each field. !!! important The returned value should be json serializable Parameters: value: attribute of item returned by `find_all` or `find_by_pk` field: Starlette Admin field for this attribute action: Specify where the data will be used. Possible values are `VIEW` for detail page, `EDIT` for editing page and `API` for listing page and select2 data. request: Starlette Request \"\"\" if value is None : return value return await field . serialize_value ( request , value , action ) async def serialize ( self , obj : Any , request : Request , action : RequestAction , include_relationships : bool = True , include_select2 : bool = False , ) -> Dict [ str , Any ]: obj_serialized : Dict [ str , Any ] = {} for field in self . fields : if isinstance ( field , RelationField ) and include_relationships : value = getattr ( obj , field . name , None ) foreign_model = self . _find_foreign_model ( field . identity ) # type: ignore assert foreign_model . pk_attr is not None if value is None : obj_serialized [ field . name ] = None elif isinstance ( field , HasOne ): if action == RequestAction . EDIT : obj_serialized [ field . name ] = getattr ( value , foreign_model . pk_attr ) else : obj_serialized [ field . name ] = await foreign_model . serialize ( value , request , action , include_relationships = False ) else : if action == RequestAction . EDIT : obj_serialized [ field . name ] = [ getattr ( v , foreign_model . pk_attr ) for v in value ] else : obj_serialized [ field . name ] = [ await foreign_model . serialize ( v , request , action , include_relationships = False ) for v in value ] elif not isinstance ( field , RelationField ): value = getattr ( obj , field . name , None ) obj_serialized [ field . name ] = await self . serialize_field_value ( value , field , action , request ) if include_select2 : obj_serialized [ \"_select2_selection\" ] = await self . select2_selection ( obj , request ) obj_serialized [ \"_select2_result\" ] = await self . select2_result ( obj , request ) obj_serialized [ \"_repr\" ] = await self . repr ( obj , request ) assert self . pk_attr is not None pk = getattr ( obj , self . pk_attr ) obj_serialized [ self . pk_attr ] = obj_serialized . get ( self . pk_attr , str ( pk ) # Make sure the primary key is always available ) route_name = request . app . state . ROUTE_NAME obj_serialized [ \"_detail_url\" ] = request . url_for ( route_name + \":detail\" , identity = self . identity , pk = pk ) obj_serialized [ \"_edit_url\" ] = request . url_for ( route_name + \":edit\" , identity = self . identity , pk = pk ) return obj_serialized async def repr ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize item representation in relationships columns \"\"\" return str ( getattr ( obj , self . pk_attr )) # type: ignore async def select2_result ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that search results are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" template_str = ( \"<span>{ %f or col in fields %}{ %i f obj[col]%}<strong>{{col}}:\" \" </strong>{{obj[col]}} { %e ndif%}{ %e ndfor%}</span>\" ) fields = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] return Template ( template_str , autoescape = True ) . render ( obj = obj , fields = fields ) async def select2_selection ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that selections are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" return await self . select2_result ( obj , request ) def _length_menu ( self ) -> Any : return [ self . page_size_options , [( \"All\" if i < 0 else i ) for i in self . page_size_options ], ] def _search_columns_selector ( self ) -> List [ str ]: return [ \" %s :name\" % name for name in self . searchable_fields ] # type: ignore def _export_columns_selector ( self ) -> List [ str ]: return [ \" %s :name\" % name for name in self . export_fields ] # type: ignore def _extract_fields ( self , action : RequestAction = RequestAction . LIST ) -> Sequence [ BaseField ]: return extract_fields ( self . fields , action ) def _additional_css_links ( self , request : Request , action : RequestAction ) -> Set [ str ]: links = set () for field in self . fields : if ( action == RequestAction . CREATE and field . exclude_from_create ) or ( action == RequestAction . EDIT and field . exclude_from_edit ): continue links . update ( field . additional_css_links ( request )) return links def _additional_js_links ( self , request : Request , action : RequestAction ) -> Set [ str ]: links = set () for field in self . fields : if ( action == RequestAction . CREATE and field . exclude_from_create ) or ( action == RequestAction . EDIT and field . exclude_from_edit ): continue links . update ( field . additional_js_links ( request )) return links async def _configs ( self , request : Request ) -> Dict [ str , Any ]: return { \"label\" : self . label , \"pageSize\" : self . page_size , \"lengthMenu\" : self . _length_menu (), \"searchColumns\" : self . _search_columns_selector (), \"exportColumns\" : self . _export_columns_selector (), \"exportTypes\" : self . export_types , \"columnVisibility\" : self . column_visibility , \"searchBuilder\" : self . search_builder , \"responsiveTable\" : self . responsive_table , \"fields\" : [ f . dict () for f in self . _extract_fields ()], \"actions\" : await self . get_all_actions ( request ), \"pk\" : self . pk_attr , \"apiUrl\" : request . url_for ( f \" { request . app . state . ROUTE_NAME } :api\" , identity = self . identity ), \"actionUrl\" : request . url_for ( f \" { request . app . state . ROUTE_NAME } :action\" , identity = self . identity ), } can_create ( request ) Permission for creating new Items. Return True by default Source code in starlette_admin/views.py 447 448 449 def can_create ( self , request : Request ) -> bool : \"\"\"Permission for creating new Items. Return True by default\"\"\" return True can_delete ( request ) Permission for deleting Items. Return True by default Source code in starlette_admin/views.py 455 456 457 def can_delete ( self , request : Request ) -> bool : \"\"\"Permission for deleting Items. Return True by default\"\"\" return True can_edit ( request ) Permission for editing Items. Return True by default Source code in starlette_admin/views.py 451 452 453 def can_edit ( self , request : Request ) -> bool : \"\"\"Permission for editing Items. Return True by default\"\"\" return True can_view_details ( request ) Permission for viewing full details of Item. Return True by default Source code in starlette_admin/views.py 443 444 445 def can_view_details ( self , request : Request ) -> bool : \"\"\"Permission for viewing full details of Item. Return True by default\"\"\" return True count ( request , where = None ) abstractmethod async Count items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None Source code in starlette_admin/views.py 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 @abstractmethod async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : \"\"\" Count items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search \"\"\" raise NotImplementedError () create ( request , data ) abstractmethod async Create item Parameters: Name Type Description Default request Request Starlette Request required data Dict Dict values contained converted form data required Returns: Name Type Description Any Any Created Item Source code in starlette_admin/views.py 418 419 420 421 422 423 424 425 426 427 428 @abstractmethod async def create ( self , request : Request , data : Dict ) -> Any : \"\"\" Create item Parameters: request: Starlette Request data: Dict values contained converted form data Returns: Any: Created Item \"\"\" raise NotImplementedError () delete ( request , pks ) abstractmethod async Bulk delete items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of primary keys required Source code in starlette_admin/views.py 388 389 390 391 392 393 394 395 396 @abstractmethod async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: \"\"\" Bulk delete items Parameters: request: Starlette Request pks: List of primary keys \"\"\" raise NotImplementedError () edit ( request , pk , data ) abstractmethod async Edit item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required data Dict [ str , Any ] Dict values contained converted form data required Returns: Name Type Description Any Any Edited Item Source code in starlette_admin/views.py 430 431 432 433 434 435 436 437 438 439 440 441 @abstractmethod async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : \"\"\" Edit item Parameters: request: Starlette Request pk: Primary key data: Dict values contained converted form data Returns: Any: Edited Item \"\"\" raise NotImplementedError () find_all ( request , skip = 0 , limit = 100 , where = None , order_by = None ) abstractmethod async Find all items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None skip int should return values start from position skip+1 0 limit int number of maximum items to return 100 order_by Optional [ List [ str ]] order data clauses in form [\"id asc\", \"name desc\"] None Source code in starlette_admin/views.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 @abstractmethod async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> Sequence [ Any ]: \"\"\" Find all items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search skip: should return values start from position skip+1 limit: number of maximum items to return order_by: order data clauses in form `[\"id asc\", \"name desc\"]` \"\"\" raise NotImplementedError () find_by_pk ( request , pk ) abstractmethod async Find one item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required Source code in starlette_admin/views.py 398 399 400 401 402 403 404 405 406 @abstractmethod async def find_by_pk ( self , request : Request , pk : Any ) -> Any : \"\"\" Find one item Parameters: request: Starlette Request pk: Primary key \"\"\" raise NotImplementedError () find_by_pks ( request , pks ) abstractmethod async Find many items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of Primary key required Source code in starlette_admin/views.py 408 409 410 411 412 413 414 415 416 @abstractmethod async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> Sequence [ Any ]: \"\"\" Find many items Parameters: request: Starlette Request pks: List of Primary key \"\"\" raise NotImplementedError () handle_action ( request , pks , name ) async Handle action with name . Source code in starlette_admin/views.py 322 323 324 325 326 327 328 329 330 331 332 333 async def handle_action ( self , request : Request , pks : List [ Any ], name : str ) -> str : \"\"\" Handle action with `name`. Raises: ActionFailed \"\"\" handler = self . _handlers . get ( name , None ) if handler is None : raise ActionFailed ( \"Invalid action\" ) if not await self . is_action_allowed ( request , name ): raise ActionFailed ( \"Forbidden\" ) return await handler ( request , pks ) is_action_allowed ( request , name ) async Verify if action with name is allowed. Override this method to allow or disallow actions based on some condition. Parameters: Name Type Description Default name str Action name required request Request Starlette request required Source code in starlette_admin/views.py 300 301 302 303 304 305 306 307 308 309 310 311 312 async def is_action_allowed ( self , request : Request , name : str ) -> bool : \"\"\" Verify if action with `name` is allowed. Override this method to allow or disallow actions based on some condition. Args: name: Action name request: Starlette request \"\"\" if name == \"delete\" : return self . can_delete ( request ) return True repr ( obj , request ) async Override this function to customize item representation in relationships columns Source code in starlette_admin/views.py 542 543 544 545 546 547 async def repr ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize item representation in relationships columns \"\"\" return str ( getattr ( obj , self . pk_attr )) # type: ignore select2_result ( obj , request ) async Override this function to customize the way that search results are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required Source code in starlette_admin/views.py 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 async def select2_result ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that search results are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" template_str = ( \"<span>{ %f or col in fields %}{ %i f obj[col]%}<strong>{{col}}:\" \" </strong>{{obj[col]}} { %e ndif%}{ %e ndfor%}</span>\" ) fields = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] return Template ( template_str , autoescape = True ) . render ( obj = obj , fields = fields ) select2_selection ( obj , request ) async Override this function to customize the way that selections are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required Source code in starlette_admin/views.py 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 async def select2_selection ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that selections are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" return await self . select2_result ( obj , request ) serialize_field_value ( value , field , action , request ) async Format output value for each field. Important The returned value should be json serializable Parameters: Name Type Description Default value Any attribute of item returned by find_all or find_by_pk required field BaseField Starlette Admin field for this attribute required action RequestAction Specify where the data will be used. Possible values are VIEW for detail page, EDIT for editing page and API for listing page and select2 data. required request Request Starlette Request required Source code in starlette_admin/views.py 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 async def serialize_field_value ( self , value : Any , field : BaseField , action : RequestAction , request : Request ) -> Any : \"\"\" Format output value for each field. !!! important The returned value should be json serializable Parameters: value: attribute of item returned by `find_all` or `find_by_pk` field: Starlette Admin field for this attribute action: Specify where the data will be used. Possible values are `VIEW` for detail page, `EDIT` for editing page and `API` for listing page and select2 data. request: Starlette Request \"\"\" if value is None : return value return await field . serialize_value ( request , value , action )","title":"Views"},{"location":"api/views/#starlette_admin.views.BaseView","text":"Base class for all views Attributes: Name Type Description label str Label of the view to be displayed. icon Optional [ str ] Icon to be displayed for this model in the admin. Only FontAwesome names are supported. Source code in starlette_admin/views.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class BaseView : \"\"\" Base class for all views Attributes: label: Label of the view to be displayed. icon: Icon to be displayed for this model in the admin. Only FontAwesome names are supported. \"\"\" label : str = \"\" icon : Optional [ str ] = None def is_active ( self , request : Request ) -> bool : \"\"\"Return true if the current view is active\"\"\" return False def is_accessible ( self , request : Request ) -> bool : \"\"\" Override this method to add permission checks. Return True if current user can access this view \"\"\" return True","title":"BaseView"},{"location":"api/views/#starlette_admin.views.BaseView.is_accessible","text":"Override this method to add permission checks. Return True if current user can access this view Source code in starlette_admin/views.py 49 50 51 52 53 54 def is_accessible ( self , request : Request ) -> bool : \"\"\" Override this method to add permission checks. Return True if current user can access this view \"\"\" return True","title":"is_accessible()"},{"location":"api/views/#starlette_admin.views.BaseView.is_active","text":"Return true if the current view is active Source code in starlette_admin/views.py 45 46 47 def is_active ( self , request : Request ) -> bool : \"\"\"Return true if the current view is active\"\"\" return False","title":"is_active()"},{"location":"api/views/#starlette_admin.views.DropDown","text":"Bases: BaseView Group views inside a dropdown Example admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) ) Source code in starlette_admin/views.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class DropDown ( BaseView ): \"\"\" Group views inside a dropdown Example: ```Python admin.add_view( DropDown( \"Resources\", icon=\"fa fa-list\", views=[ ModelView(User), Link(label=\"Home Page\", url=\"/\"), CustomView(label=\"Dashboard\", path=\"/dashboard\", template_path=\"dashboard.html\"), ], ) ) ``` \"\"\" def __init__ ( self , label : str , views : List [ Union [ Type [ BaseView ], BaseView ]], icon : Optional [ str ] = None , always_open : bool = True , ) -> None : self . label = label self . icon = icon self . always_open = always_open self . views : List [ BaseView ] = [ ( v if isinstance ( v , BaseView ) else v ()) for v in views ] def is_active ( self , request : Request ) -> bool : return any ([ v . is_active ( request ) for v in self . views ]) def is_accessible ( self , request : Request ) -> bool : return any ([ v . is_accessible ( request ) for v in self . views ])","title":"DropDown"},{"location":"api/views/#starlette_admin.views.Link","text":"Bases: BaseView Add arbitrary hyperlinks to the menu Example admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" )) Source code in starlette_admin/views.py 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Link ( BaseView ): \"\"\" Add arbitrary hyperlinks to the menu Example: ```Python admin.add_view(Link(label=\"Home Page\", icon=\"fa fa-link\", url=\"/\")) ``` \"\"\" def __init__ ( self , label : str = \"\" , icon : Optional [ str ] = None , url : str = \"/\" , target : Optional [ str ] = \"_self\" , ): self . label = label self . icon = icon self . url = url self . target = target","title":"Link"},{"location":"api/views/#starlette_admin.views.CustomView","text":"Bases: BaseView Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. Attributes: Name Type Description path Route path template_path Path to template file methods HTTP methods name Route name add_to_menu Display to menu or not Example admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) Source code in starlette_admin/views.py 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class CustomView ( BaseView ): \"\"\" Add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. Attributes: path: Route path template_path: Path to template file methods: HTTP methods name: Route name add_to_menu: Display to menu or not Example: ```Python admin.add_view(CustomView(label=\"Home\", icon=\"fa fa-home\", path=\"/home\", template_path=\"home.html\")) ``` \"\"\" def __init__ ( self , label : str , icon : Optional [ str ] = None , path : str = \"/\" , template_path : str = \"index.html\" , name : Optional [ str ] = None , methods : Optional [ List [ str ]] = None , add_to_menu : bool = True , ): self . label = label self . icon = icon self . path = path self . template_path = template_path self . name = name self . methods = methods self . add_to_menu = add_to_menu async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : \"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\" return templates . TemplateResponse ( self . template_path , { \"request\" : request }) def is_active ( self , request : Request ) -> bool : return request . scope [ \"path\" ] == self . path","title":"CustomView"},{"location":"api/views/#starlette_admin.views.CustomView.render","text":"Default methods to render view. Override this methods to add your custom logic. Source code in starlette_admin/views.py 157 158 159 async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : \"\"\"Default methods to render view. Override this methods to add your custom logic.\"\"\" return templates . TemplateResponse ( self . template_path , { \"request\" : request })","title":"render()"},{"location":"api/views/#starlette_admin.views.BaseModelView","text":"Bases: BaseView Base administrative view. Derive from this class to implement your administrative interface piece. Attributes: Name Type Description identity Optional [ str ] Unique identity to identify the model associated to this view. Will be used for URL of the endpoints. name Optional [ str ] Name of the view to be displayed fields Sequence [ BaseField ] List of fields pk_attr Optional [ str ] Primary key field name form_include_pk bool Indicate if the primary key should be excluded from create and edit. Default to True exclude_fields_from_list Sequence [ str ] List of fields to exclude in List page. exclude_fields_from_detail Sequence [ str ] List of fields to exclude in Detail page. exclude_fields_from_create Sequence [ str ] List of fields to exclude from creation page. exclude_fields_from_edit Sequence [ str ] List of fields to exclude from editing page. searchable_fields Optional [ Sequence [ str ]] List of searchable fields. sortable_fields Optional [ Sequence [ str ]] List of sortable fields. export_fields Optional [ Sequence [ str ]] List of fields to include in exports. export_types Sequence [ ExportType ] A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . Only pdf is disable by default. column_visibility bool Enable/Disable column visibility extension search_builder bool Enable/Disable search builder extension page_size int Default number of items to display in List page pagination. Default value is set to 10 . page_size_options Sequence [ int ] Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All responsive_table bool Enable/Disable responsive extension list_template str List view template. Default is list.html . detail_template str Details view template. Default is details.html . create_template str Edit view template. Default is edit.html . edit_template str Edit view template. Default is edit.html . actions Optional [ Sequence [ str ]] List of actions Source code in starlette_admin/views.pyclass BaseModelView ( BaseView ): \"\"\" Base administrative view. Derive from this class to implement your administrative interface piece. Attributes: identity: Unique identity to identify the model associated to this view. Will be used for URL of the endpoints. name: Name of the view to be displayed fields: List of fields pk_attr: Primary key field name form_include_pk: Indicate if the primary key should be excluded from create and edit. Default to True exclude_fields_from_list: List of fields to exclude in List page. exclude_fields_from_detail: List of fields to exclude in Detail page. exclude_fields_from_create: List of fields to exclude from creation page. exclude_fields_from_edit: List of fields to exclude from editing page. searchable_fields: List of searchable fields. sortable_fields: List of sortable fields. export_fields: List of fields to include in exports. export_types: A list of available export filetypes. Available exports are `['csv', 'excel', 'pdf', 'print']`. Only `pdf` is disable by default. column_visibility: Enable/Disable [column visibility](https://datatables.net/extensions/buttons/built-in#Column-visibility) extension search_builder: Enable/Disable [search builder](https://datatables.net/extensions/searchbuilder/) extension page_size: Default number of items to display in List page pagination. Default value is set to `10`. page_size_options: Pagination choices displayed in List page. Default value is set to `[10, 25, 50, 100]`. Use `-1`to display All responsive_table: Enable/Disable [responsive](https://datatables.net/extensions/responsive/) extension list_template: List view template. Default is `list.html`. detail_template: Details view template. Default is `details.html`. create_template: Edit view template. Default is `edit.html`. edit_template: Edit view template. Default is `edit.html`. actions: List of actions \"\"\" identity : Optional [ str ] = None name : Optional [ str ] = None fields : Sequence [ BaseField ] = [] pk_attr : Optional [ str ] = None form_include_pk : bool = False exclude_fields_from_list : Sequence [ str ] = [] exclude_fields_from_detail : Sequence [ str ] = [] exclude_fields_from_create : Sequence [ str ] = [] exclude_fields_from_edit : Sequence [ str ] = [] searchable_fields : Optional [ Sequence [ str ]] = None sortable_fields : Optional [ Sequence [ str ]] = None export_types : Sequence [ ExportType ] = [ ExportType . CSV , ExportType . EXCEL , ExportType . PRINT , ] export_fields : Optional [ Sequence [ str ]] = None column_visibility : bool = True search_builder : bool = True page_size : int = 10 page_size_options : Sequence [ int ] = [ 10 , 25 , 50 , 100 ] responsive_table : bool = False list_template : str = \"list.html\" detail_template : str = \"detail.html\" create_template : str = \"create.html\" edit_template : str = \"edit.html\" actions : Optional [ Sequence [ str ]] = None _find_foreign_model : Callable [[ str ], \"BaseModelView\" ] def __init__ ( self ) -> None : # noqa: C901 fringe = list ( self . fields ) all_field_names = [] while len ( fringe ) > 0 : field = fringe . pop ( 0 ) if not hasattr ( field , \"_name\" ): field . _name = field . name # type: ignore if isinstance ( field , CollectionField ): for f in field . fields : f . _name = \" {} . {} \" . format ( field . _name , f . name ) # type: ignore fringe . extend ( field . fields ) name = field . _name # type: ignore if name == self . pk_attr and not self . form_include_pk : field . exclude_from_create = True field . exclude_from_edit = True if name in self . exclude_fields_from_list : field . exclude_from_list = True if name in self . exclude_fields_from_detail : field . exclude_from_detail = True if name in self . exclude_fields_from_create : field . exclude_from_create = True if name in self . exclude_fields_from_edit : field . exclude_from_edit = True if not isinstance ( field , CollectionField ): all_field_names . append ( name ) field . searchable = ( self . searchable_fields is None ) or ( name in self . searchable_fields ) field . orderable = ( self . sortable_fields is None ) or ( name in self . sortable_fields ) if self . searchable_fields is None : self . searchable_fields = all_field_names [:] if self . sortable_fields is None : self . sortable_fields = all_field_names [:] if self . export_fields is None : self . export_fields = all_field_names [:] # Actions self . _actions : Dict [ str , Dict [ str , str ]] = {} self . _handlers : Dict [ str , Callable [[ Request , Sequence [ Any ]], Awaitable ]] = {} self . _init_actions () def is_active ( self , request : Request ) -> bool : return request . path_params . get ( \"identity\" , None ) == self . identity def _init_actions ( self ) -> None : \"\"\" Initialize list of actions \"\"\" for _method_name , method in inspect . getmembers ( self , predicate = inspect . ismethod ): if hasattr ( method , \"_action\" ): name = method . _action . get ( \"name\" ) self . _actions [ name ] = method . _action self . _handlers [ name ] = method if self . actions is None : self . actions = list ( self . _handlers . keys ()) for action_name in self . actions : if action_name not in self . _actions : raise ValueError ( \"Unknown action with name ` {} `\" . format ( action_name )) async def is_action_allowed ( self , request : Request , name : str ) -> bool : \"\"\" Verify if action with `name` is allowed. Override this method to allow or disallow actions based on some condition. Args: name: Action name request: Starlette request \"\"\" if name == \"delete\" : return self . can_delete ( request ) return True async def get_all_actions ( self , request : Request ) -> List [ Optional [ dict ]]: actions = [] assert self . actions is not None for action_name in self . actions : if await self . is_action_allowed ( request , action_name ): actions . append ( self . _actions . get ( action_name )) return actions async def handle_action ( self , request : Request , pks : List [ Any ], name : str ) -> str : \"\"\" Handle action with `name`. Raises: ActionFailed \"\"\" handler = self . _handlers . get ( name , None ) if handler is None : raise ActionFailed ( \"Invalid action\" ) if not await self . is_action_allowed ( request , name ): raise ActionFailed ( \"Forbidden\" ) return await handler ( request , pks ) @action ( name = \"delete\" , text = \"Delete\" , confirmation = \"Are you sure you want to delete this items ?\" , submit_btn_text = \"Yes, delete them all\" , submit_btn_class = \"btn-danger\" , ) async def delete_action ( self , request : Request , pks : List [ Any ]) -> str : affected_rows = await self . delete ( request , pks ) return \" {} items were successfully deleted\" . format ( affected_rows ) @abstractmethod async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> Sequence [ Any ]: \"\"\" Find all items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search skip: should return values start from position skip+1 limit: number of maximum items to return order_by: order data clauses in form `[\"id asc\", \"name desc\"]` \"\"\" raise NotImplementedError () @abstractmethod async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : \"\"\" Count items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search \"\"\" raise NotImplementedError () @abstractmethod async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: \"\"\" Bulk delete items Parameters: request: Starlette Request pks: List of primary keys \"\"\" raise NotImplementedError () @abstractmethod async def find_by_pk ( self , request : Request , pk : Any ) -> Any : \"\"\" Find one item Parameters: request: Starlette Request pk: Primary key \"\"\" raise NotImplementedError () @abstractmethod async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> Sequence [ Any ]: \"\"\" Find many items Parameters: request: Starlette Request pks: List of Primary key \"\"\" raise NotImplementedError () @abstractmethod async def create ( self , request : Request , data : Dict ) -> Any : \"\"\" Create item Parameters: request: Starlette Request data: Dict values contained converted form data Returns: Any: Created Item \"\"\" raise NotImplementedError () @abstractmethod async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : \"\"\" Edit item Parameters: request: Starlette Request pk: Primary key data: Dict values contained converted form data Returns: Any: Edited Item \"\"\" raise NotImplementedError () def can_view_details ( self , request : Request ) -> bool : \"\"\"Permission for viewing full details of Item. Return True by default\"\"\" return True def can_create ( self , request : Request ) -> bool : \"\"\"Permission for creating new Items. Return True by default\"\"\" return True def can_edit ( self , request : Request ) -> bool : \"\"\"Permission for editing Items. Return True by default\"\"\" return True def can_delete ( self , request : Request ) -> bool : \"\"\"Permission for deleting Items. Return True by default\"\"\" return True async def serialize_field_value ( self , value : Any , field : BaseField , action : RequestAction , request : Request ) -> Any : \"\"\" Format output value for each field. !!! important The returned value should be json serializable Parameters: value: attribute of item returned by `find_all` or `find_by_pk` field: Starlette Admin field for this attribute action: Specify where the data will be used. Possible values are `VIEW` for detail page, `EDIT` for editing page and `API` for listing page and select2 data. request: Starlette Request \"\"\" if value is None : return value return await field . serialize_value ( request , value , action ) async def serialize ( self , obj : Any , request : Request , action : RequestAction , include_relationships : bool = True , include_select2 : bool = False , ) -> Dict [ str , Any ]: obj_serialized : Dict [ str , Any ] = {} for field in self . fields : if isinstance ( field , RelationField ) and include_relationships : value = getattr ( obj , field . name , None ) foreign_model = self . _find_foreign_model ( field . identity ) # type: ignore assert foreign_model . pk_attr is not None if value is None : obj_serialized [ field . name ] = None elif isinstance ( field , HasOne ): if action == RequestAction . EDIT : obj_serialized [ field . name ] = getattr ( value , foreign_model . pk_attr ) else : obj_serialized [ field . name ] = await foreign_model . serialize ( value , request , action , include_relationships = False ) else : if action == RequestAction . EDIT : obj_serialized [ field . name ] = [ getattr ( v , foreign_model . pk_attr ) for v in value ] else : obj_serialized [ field . name ] = [ await foreign_model . serialize ( v , request , action , include_relationships = False ) for v in value ] elif not isinstance ( field , RelationField ): value = getattr ( obj , field . name , None ) obj_serialized [ field . name ] = await self . serialize_field_value ( value , field , action , request ) if include_select2 : obj_serialized [ \"_select2_selection\" ] = await self . select2_selection ( obj , request ) obj_serialized [ \"_select2_result\" ] = await self . select2_result ( obj , request ) obj_serialized [ \"_repr\" ] = await self . repr ( obj , request ) assert self . pk_attr is not None pk = getattr ( obj , self . pk_attr ) obj_serialized [ self . pk_attr ] = obj_serialized . get ( self . pk_attr , str ( pk ) # Make sure the primary key is always available ) route_name = request . app . state . ROUTE_NAME obj_serialized [ \"_detail_url\" ] = request . url_for ( route_name + \":detail\" , identity = self . identity , pk = pk ) obj_serialized [ \"_edit_url\" ] = request . url_for ( route_name + \":edit\" , identity = self . identity , pk = pk ) return obj_serialized async def repr ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize item representation in relationships columns \"\"\" return str ( getattr ( obj , self . pk_attr )) # type: ignore async def select2_result ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that search results are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" template_str = ( \"<span>{ %f or col in fields %}{ %i f obj[col]%}<strong>{{col}}:\" \" </strong>{{obj[col]}} { %e ndif%}{ %e ndfor%}</span>\" ) fields = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] return Template ( template_str , autoescape = True ) . render ( obj = obj , fields = fields ) async def select2_selection ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that selections are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" return await self . select2_result ( obj , request ) def _length_menu ( self ) -> Any : return [ self . page_size_options , [( \"All\" if i < 0 else i ) for i in self . page_size_options ], ] def _search_columns_selector ( self ) -> List [ str ]: return [ \" %s :name\" % name for name in self . searchable_fields ] # type: ignore def _export_columns_selector ( self ) -> List [ str ]: return [ \" %s :name\" % name for name in self . export_fields ] # type: ignore def _extract_fields ( self , action : RequestAction = RequestAction . LIST ) -> Sequence [ BaseField ]: return extract_fields ( self . fields , action ) def _additional_css_links ( self , request : Request , action : RequestAction ) -> Set [ str ]: links = set () for field in self . fields : if ( action == RequestAction . CREATE and field . exclude_from_create ) or ( action == RequestAction . EDIT and field . exclude_from_edit ): continue links . update ( field . additional_css_links ( request )) return links def _additional_js_links ( self , request : Request , action : RequestAction ) -> Set [ str ]: links = set () for field in self . fields : if ( action == RequestAction . CREATE and field . exclude_from_create ) or ( action == RequestAction . EDIT and field . exclude_from_edit ): continue links . update ( field . additional_js_links ( request )) return links async def _configs ( self , request : Request ) -> Dict [ str , Any ]: return { \"label\" : self . label , \"pageSize\" : self . page_size , \"lengthMenu\" : self . _length_menu (), \"searchColumns\" : self . _search_columns_selector (), \"exportColumns\" : self . _export_columns_selector (), \"exportTypes\" : self . export_types , \"columnVisibility\" : self . column_visibility , \"searchBuilder\" : self . search_builder , \"responsiveTable\" : self . responsive_table , \"fields\" : [ f . dict () for f in self . _extract_fields ()], \"actions\" : await self . get_all_actions ( request ), \"pk\" : self . pk_attr , \"apiUrl\" : request . url_for ( f \" { request . app . state . ROUTE_NAME } :api\" , identity = self . identity ), \"actionUrl\" : request . url_for ( f \" { request . app . state . ROUTE_NAME } :action\" , identity = self . identity ), }","title":"BaseModelView"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_create","text":"Permission for creating new Items. Return True by default Source code in starlette_admin/views.py 447 448 449 def can_create ( self , request : Request ) -> bool : \"\"\"Permission for creating new Items. Return True by default\"\"\" return True","title":"can_create()"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_delete","text":"Permission for deleting Items. Return True by default Source code in starlette_admin/views.py 455 456 457 def can_delete ( self , request : Request ) -> bool : \"\"\"Permission for deleting Items. Return True by default\"\"\" return True","title":"can_delete()"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_edit","text":"Permission for editing Items. Return True by default Source code in starlette_admin/views.py 451 452 453 def can_edit ( self , request : Request ) -> bool : \"\"\"Permission for editing Items. Return True by default\"\"\" return True","title":"can_edit()"},{"location":"api/views/#starlette_admin.views.BaseModelView.can_view_details","text":"Permission for viewing full details of Item. Return True by default Source code in starlette_admin/views.py 443 444 445 def can_view_details ( self , request : Request ) -> bool : \"\"\"Permission for viewing full details of Item. Return True by default\"\"\" return True","title":"can_view_details()"},{"location":"api/views/#starlette_admin.views.BaseModelView.count","text":"Count items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None Source code in starlette_admin/views.py 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 @abstractmethod async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : \"\"\" Count items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search \"\"\" raise NotImplementedError ()","title":"count()"},{"location":"api/views/#starlette_admin.views.BaseModelView.create","text":"Create item Parameters: Name Type Description Default request Request Starlette Request required data Dict Dict values contained converted form data required Returns: Name Type Description Any Any Created Item Source code in starlette_admin/views.py 418 419 420 421 422 423 424 425 426 427 428 @abstractmethod async def create ( self , request : Request , data : Dict ) -> Any : \"\"\" Create item Parameters: request: Starlette Request data: Dict values contained converted form data Returns: Any: Created Item \"\"\" raise NotImplementedError ()","title":"create()"},{"location":"api/views/#starlette_admin.views.BaseModelView.delete","text":"Bulk delete items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of primary keys required Source code in starlette_admin/views.py 388 389 390 391 392 393 394 395 396 @abstractmethod async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: \"\"\" Bulk delete items Parameters: request: Starlette Request pks: List of primary keys \"\"\" raise NotImplementedError ()","title":"delete()"},{"location":"api/views/#starlette_admin.views.BaseModelView.edit","text":"Edit item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required data Dict [ str , Any ] Dict values contained converted form data required Returns: Name Type Description Any Any Edited Item Source code in starlette_admin/views.py 430 431 432 433 434 435 436 437 438 439 440 441 @abstractmethod async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : \"\"\" Edit item Parameters: request: Starlette Request pk: Primary key data: Dict values contained converted form data Returns: Any: Edited Item \"\"\" raise NotImplementedError ()","title":"edit()"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_all","text":"Find all items Parameters: Name Type Description Default request Request Starlette Request required where Union [ Dict [ str , Any ], str , None] Can be dict for complex query { \"and\" :[{ \"id\" : { \"gt\" : 5 }},{ \"name\" : { \"startsWith\" : \"ban\" }}]} or plain text for full search None skip int should return values start from position skip+1 0 limit int number of maximum items to return 100 order_by Optional [ List [ str ]] order data clauses in form [\"id asc\", \"name desc\"] None Source code in starlette_admin/views.py 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 @abstractmethod async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> Sequence [ Any ]: \"\"\" Find all items Parameters: request: Starlette Request where: Can be dict for complex query ```json {\"and\":[{\"id\": {\"gt\": 5}},{\"name\": {\"startsWith\": \"ban\"}}]} ``` or plain text for full search skip: should return values start from position skip+1 limit: number of maximum items to return order_by: order data clauses in form `[\"id asc\", \"name desc\"]` \"\"\" raise NotImplementedError ()","title":"find_all()"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pk","text":"Find one item Parameters: Name Type Description Default request Request Starlette Request required pk Any Primary key required Source code in starlette_admin/views.py 398 399 400 401 402 403 404 405 406 @abstractmethod async def find_by_pk ( self , request : Request , pk : Any ) -> Any : \"\"\" Find one item Parameters: request: Starlette Request pk: Primary key \"\"\" raise NotImplementedError ()","title":"find_by_pk()"},{"location":"api/views/#starlette_admin.views.BaseModelView.find_by_pks","text":"Find many items Parameters: Name Type Description Default request Request Starlette Request required pks List [ Any ] List of Primary key required Source code in starlette_admin/views.py 408 409 410 411 412 413 414 415 416 @abstractmethod async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> Sequence [ Any ]: \"\"\" Find many items Parameters: request: Starlette Request pks: List of Primary key \"\"\" raise NotImplementedError ()","title":"find_by_pks()"},{"location":"api/views/#starlette_admin.views.BaseModelView.handle_action","text":"Handle action with name . Source code in starlette_admin/views.py 322 323 324 325 326 327 328 329 330 331 332 333 async def handle_action ( self , request : Request , pks : List [ Any ], name : str ) -> str : \"\"\" Handle action with `name`. Raises: ActionFailed \"\"\" handler = self . _handlers . get ( name , None ) if handler is None : raise ActionFailed ( \"Invalid action\" ) if not await self . is_action_allowed ( request , name ): raise ActionFailed ( \"Forbidden\" ) return await handler ( request , pks )","title":"handle_action()"},{"location":"api/views/#starlette_admin.views.BaseModelView.is_action_allowed","text":"Verify if action with name is allowed. Override this method to allow or disallow actions based on some condition. Parameters: Name Type Description Default name str Action name required request Request Starlette request required Source code in starlette_admin/views.py 300 301 302 303 304 305 306 307 308 309 310 311 312 async def is_action_allowed ( self , request : Request , name : str ) -> bool : \"\"\" Verify if action with `name` is allowed. Override this method to allow or disallow actions based on some condition. Args: name: Action name request: Starlette request \"\"\" if name == \"delete\" : return self . can_delete ( request ) return True","title":"is_action_allowed()"},{"location":"api/views/#starlette_admin.views.BaseModelView.repr","text":"Override this function to customize item representation in relationships columns Source code in starlette_admin/views.py 542 543 544 545 546 547 async def repr ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize item representation in relationships columns \"\"\" return str ( getattr ( obj , self . pk_attr )) # type: ignore","title":"repr()"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_result","text":"Override this function to customize the way that search results are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required Source code in starlette_admin/views.py 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 async def select2_result ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that search results are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" template_str = ( \"<span>{ %f or col in fields %}{ %i f obj[col]%}<strong>{{col}}:\" \" </strong>{{obj[col]}} { %e ndif%}{ %e ndfor%}</span>\" ) fields = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] return Template ( template_str , autoescape = True ) . render ( obj = obj , fields = fields )","title":"select2_result()"},{"location":"api/views/#starlette_admin.views.BaseModelView.select2_selection","text":"Override this function to customize the way that selections are rendered. Note The returned value should be html. You can use <span>mytext</span> when you want to return string value Danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with autoescape=True . For more information click here Parameters: Name Type Description Default obj Any item returned by find_all or find_by_pk required request Request Starlette Request required Source code in starlette_admin/views.py 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 async def select2_selection ( self , obj : Any , request : Request ) -> str : \"\"\" Override this function to customize the way that selections are rendered. !!! note The returned value should be html. You can use `<span>mytext</span>` when you want to return string value !!! danger Escape your database value to avoid Cross-Site Scripting (XSS) attack. You can use Jinja2 Template render with `autoescape=True`. For more information [click here](https://owasp.org/www-community/attacks/xss/) Parameters: obj: item returned by `find_all` or `find_by_pk` request: Starlette Request \"\"\" return await self . select2_result ( obj , request )","title":"select2_selection()"},{"location":"api/views/#starlette_admin.views.BaseModelView.serialize_field_value","text":"Format output value for each field. Important The returned value should be json serializable Parameters: Name Type Description Default value Any attribute of item returned by find_all or find_by_pk required field BaseField Starlette Admin field for this attribute required action RequestAction Specify where the data will be used. Possible values are VIEW for detail page, EDIT for editing page and API for listing page and select2 data. required request Request Starlette Request required Source code in starlette_admin/views.py 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 async def serialize_field_value ( self , value : Any , field : BaseField , action : RequestAction , request : Request ) -> Any : \"\"\" Format output value for each field. !!! important The returned value should be json serializable Parameters: value: attribute of item returned by `find_all` or `find_by_pk` field: Starlette Admin field for this attribute action: Specify where the data will be used. Possible values are `VIEW` for detail page, `EDIT` for editing page and `API` for listing page and select2 data. request: Starlette Request \"\"\" if value is None : return value return await field . serialize_value ( request , value , action )","title":"serialize_field_value()"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.5.1] - 2022-12-27 Fixed Fix Bug with sqlalchemy.dialects.postgresql.base.UUID column by @jowilf in #65 [0.5.0] - 2022-12-17 Added Introduce AdminUser and add navbar to show the current AdminUser information ( username and photo ) by @jowilf in #49 Internals Add auth example by @jowilf in #51 [0.4.0] - 2022-12-07 Added Custom batch actions by @jowilf in #44 Add get_list_query , get_count_query and get_search_query methods to SQLAlchemy backend that can be inherited for customization by @jowilf in #47 Internals Update datatables to 1.13.1 Update Search builder UI to fit tabler design [0.3.2] - 2022-12-02 Fixed Fix Datatables warning when primary key is not included in fields by @jowilf in #23 Docs Add spanish translation for docs/index.md by @rafnixg in #35 Internals Use Ruff for linting by @jowilf in #29 Migrate to Hatch by @jowilf in #30 Setup pre-commit by @jowilf in #33 Add support for Python 3.11 in test suite by @jowilf in #34 [0.3.1] - 2022-11-22 Fixed Fix Regression on SQLModel backend: Duplicate instances when creating or updating a model with relationships in #23 [0.3.0] - 2022-11-21 Breaking Changes Changes in ModelView definition Now Before class Post : id : int title : str admin . add_view ( ModelView ( Post , icon = \"fa fa-blog\" , label = \"Blog Posts\" )) class Post : id : int title : str class PostView ( ModelView , model = Post ): icon = \"fa fa-blog\" label = \"Blog Posts\" admin . add_view ( PostView ) Changes in CustomView definition Now Before admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) class HomeView ( CustomView ): label = \"Home\" icon = \"fa fa-home\" path = \"/home\" template_path = \"home.html\" admin . add_view ( HomeView ) Changes in Link definition Now Before admin . add_view ( Link ( label = \"Back to Home\" , icon = \"fa fa-home\" , url = \"/\" , target = \"_blank\" )) class BackToHome ( Link ): label = \"Back to Home\" icon = \"fa fa-home\" url = \"/\" target = \"_blank\" These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple. Added Add CollectionField Add ListField Add support for Odmantic Add support for datatables responsive extensions Usage class MyModelView ( ModelView ): responsive_table = True Changed Move SQLModel to it own contrib package MongoEngine EmbeddedDocumentField is now converted into CollectionField Removed Remove PDF from default export_types [0.2.2] - 2022-09-20 Fixed Null support for EnumField in #17 [0.2.1] - 2022-09-19 Fixed Fix SearchBuilder not working with dates (SQLAlchemy) in #15 [0.2.0] - 2022-09-14 Changed Date & Time input now use Flatpickr in #10 [0.1.1] - 2022-09-09 Added Add ColorField in #7 AsyncEngine support for SQLAlchemy in #8","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#051-2022-12-27","text":"","title":"[0.5.1] - 2022-12-27"},{"location":"changelog/#fixed","text":"Fix Bug with sqlalchemy.dialects.postgresql.base.UUID column by @jowilf in #65","title":"Fixed"},{"location":"changelog/#050-2022-12-17","text":"","title":"[0.5.0] - 2022-12-17"},{"location":"changelog/#added","text":"Introduce AdminUser and add navbar to show the current AdminUser information ( username and photo ) by @jowilf in #49","title":"Added"},{"location":"changelog/#internals","text":"Add auth example by @jowilf in #51","title":"Internals"},{"location":"changelog/#040-2022-12-07","text":"","title":"[0.4.0] - 2022-12-07"},{"location":"changelog/#added_1","text":"Custom batch actions by @jowilf in #44 Add get_list_query , get_count_query and get_search_query methods to SQLAlchemy backend that can be inherited for customization by @jowilf in #47","title":"Added"},{"location":"changelog/#internals_1","text":"Update datatables to 1.13.1 Update Search builder UI to fit tabler design","title":"Internals"},{"location":"changelog/#032-2022-12-02","text":"","title":"[0.3.2] - 2022-12-02"},{"location":"changelog/#fixed_1","text":"Fix Datatables warning when primary key is not included in fields by @jowilf in #23","title":"Fixed"},{"location":"changelog/#docs","text":"Add spanish translation for docs/index.md by @rafnixg in #35","title":"Docs"},{"location":"changelog/#internals_2","text":"Use Ruff for linting by @jowilf in #29 Migrate to Hatch by @jowilf in #30 Setup pre-commit by @jowilf in #33 Add support for Python 3.11 in test suite by @jowilf in #34","title":"Internals"},{"location":"changelog/#031-2022-11-22","text":"","title":"[0.3.1] - 2022-11-22"},{"location":"changelog/#fixed_2","text":"Fix Regression on SQLModel backend: Duplicate instances when creating or updating a model with relationships in #23","title":"Fixed"},{"location":"changelog/#030-2022-11-21","text":"","title":"[0.3.0] - 2022-11-21"},{"location":"changelog/#breaking-changes","text":"Changes in ModelView definition Now Before class Post : id : int title : str admin . add_view ( ModelView ( Post , icon = \"fa fa-blog\" , label = \"Blog Posts\" )) class Post : id : int title : str class PostView ( ModelView , model = Post ): icon = \"fa fa-blog\" label = \"Blog Posts\" admin . add_view ( PostView ) Changes in CustomView definition Now Before admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) class HomeView ( CustomView ): label = \"Home\" icon = \"fa fa-home\" path = \"/home\" template_path = \"home.html\" admin . add_view ( HomeView ) Changes in Link definition Now Before admin . add_view ( Link ( label = \"Back to Home\" , icon = \"fa fa-home\" , url = \"/\" , target = \"_blank\" )) class BackToHome ( Link ): label = \"Back to Home\" icon = \"fa fa-home\" url = \"/\" target = \"_blank\" These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple.","title":"Breaking Changes"},{"location":"changelog/#added_2","text":"Add CollectionField Add ListField Add support for Odmantic Add support for datatables responsive extensions Usage class MyModelView ( ModelView ): responsive_table = True","title":"Added"},{"location":"changelog/#changed","text":"Move SQLModel to it own contrib package MongoEngine EmbeddedDocumentField is now converted into CollectionField","title":"Changed"},{"location":"changelog/#removed","text":"Remove PDF from default export_types","title":"Removed"},{"location":"changelog/#022-2022-09-20","text":"","title":"[0.2.2] - 2022-09-20"},{"location":"changelog/#fixed_3","text":"Null support for EnumField in #17","title":"Fixed"},{"location":"changelog/#021-2022-09-19","text":"","title":"[0.2.1] - 2022-09-19"},{"location":"changelog/#fixed_4","text":"Fix SearchBuilder not working with dates (SQLAlchemy) in #15","title":"Fixed"},{"location":"changelog/#020-2022-09-14","text":"","title":"[0.2.0] - 2022-09-14"},{"location":"changelog/#changed_1","text":"Date & Time input now use Flatpickr in #10","title":"Changed"},{"location":"changelog/#011-2022-09-09","text":"","title":"[0.1.1] - 2022-09-09"},{"location":"changelog/#added_3","text":"Add ColorField in #7 AsyncEngine support for SQLAlchemy in #8","title":"Added"},{"location":"tutorial/authentication/","text":"Authentication & Authorization starlette-admin provides an optional AuthProvider class for helping you to protect your admin interface from unwanted users. Authentication To enable authentication in your admin interface, inherit the AuthProvider class and set auth_provider when declaring your admin app The class AuthProvider has sevarals methods you need to override: is_authenticated : This method will be called to validate each incoming request. get_admin_user : Return connected user name and/or profile login : will be called to validate user credentials. logout : Will be called to logout (clear sessions, cookies, ...) from starlette.requests import Request from starlette.responses import Response from starlette_admin.auth import AdminUser , AuthProvider from starlette_admin.exceptions import FormValidationError , LoginFailed users = { \"admin\" : { \"name\" : \"Admin\" , \"avatar\" : \"admin.png\" , \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"delete\" , \"action_make_published\" ], }, \"johndoe\" : { \"name\" : \"John Doe\" , \"avatar\" : None , # user avatar is optional \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"action_make_published\" ], }, \"viewer\" : { \"name\" : \"Viewer\" , \"avatar\" : \"guest.png\" , \"roles\" : [ \"read\" ]}, } class MyAuthProvider ( AuthProvider ): \"\"\" This is only for demo purpose, it's not a better way to save and validate user credentials \"\"\" async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : \"\"\"Form data validation\"\"\" raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in users and password == \"password\" : \"\"\"Save `username` in session\"\"\" request . session . update ({ \"username\" : username }) return response raise LoginFailed ( \"Invalid username or password\" ) async def is_authenticated ( self , request ) -> bool : if request . session . get ( \"username\" , None ) in users : \"\"\" Save current `user` object in the request state. Can be used later to restrict access to connected user. \"\"\" request . state . user = users . get ( request . session [ \"username\" ]) return True return False def get_admin_user ( self , request : Request ) -> AdminUser : user = request . state . user # Retrieve current user photo_url = None if user [ \"avatar\" ] is not None : photo_url = request . url_for ( \"static\" , path = user [ \"avatar\" ]) return AdminUser ( username = user [ \"name\" ], photo_url = photo_url ) async def logout ( self , request : Request , response : Response ) -> Response : request . session . clear () return response Authorization For all views Each view implement is_accessible method which can be used to restrict access to current user. from starlette_admin import CustomView from starlette.requests import Request class ReportView ( CustomView ): def is_accessible ( self , request : Request ) -> bool : return \"admin\" in request . state . user [ \"roles\" ] Important When view is inaccessible, it does not appear in menu structure For ModelView In ModelView , there is four additional methods you can override to restrict access to current user. can_view_details : Permission for viewing full details of Items can_create : Permission for creating new Items can_edit : Permission for editing Items can_delete : Permission for deleting Items is_action_allowed : verify if action with name is allowed. from starlette_admin.contrib.sqla import ModelView from starlette.requests import Request from starlette_admin import action class ArticleView ( ModelView ): exclude_fields_from_list = [ Article . body ] def can_view_details ( self , request : Request ) -> bool : return \"read\" in request . state . user [ \"roles\" ] def can_create ( self , request : Request ) -> bool : return \"create\" in request . state . user [ \"roles\" ] def can_edit ( self , request : Request ) -> bool : return \"edit\" in request . state . user [ \"roles\" ] def can_delete ( self , request : Request ) -> bool : return \"delete\" in request . state . user [ \"roles\" ] async def is_action_allowed ( self , request : Request , name : str ) -> bool : if name == \"make_published\" : return \"action_make_published\" in request . state . user [ \"roles\" ] return await super () . is_action_allowed ( request , name ) @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : ... return \" {} articles were successfully marked as published\" . format ( len ( pks )) Example For a working example, have a look at https://github.com/jowilf/starlette-admin/tree/main/examples/auth","title":"Authentication"},{"location":"tutorial/authentication/#authentication-authorization","text":"starlette-admin provides an optional AuthProvider class for helping you to protect your admin interface from unwanted users.","title":"Authentication &amp; Authorization"},{"location":"tutorial/authentication/#authentication","text":"To enable authentication in your admin interface, inherit the AuthProvider class and set auth_provider when declaring your admin app The class AuthProvider has sevarals methods you need to override: is_authenticated : This method will be called to validate each incoming request. get_admin_user : Return connected user name and/or profile login : will be called to validate user credentials. logout : Will be called to logout (clear sessions, cookies, ...) from starlette.requests import Request from starlette.responses import Response from starlette_admin.auth import AdminUser , AuthProvider from starlette_admin.exceptions import FormValidationError , LoginFailed users = { \"admin\" : { \"name\" : \"Admin\" , \"avatar\" : \"admin.png\" , \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"delete\" , \"action_make_published\" ], }, \"johndoe\" : { \"name\" : \"John Doe\" , \"avatar\" : None , # user avatar is optional \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"action_make_published\" ], }, \"viewer\" : { \"name\" : \"Viewer\" , \"avatar\" : \"guest.png\" , \"roles\" : [ \"read\" ]}, } class MyAuthProvider ( AuthProvider ): \"\"\" This is only for demo purpose, it's not a better way to save and validate user credentials \"\"\" async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : \"\"\"Form data validation\"\"\" raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in users and password == \"password\" : \"\"\"Save `username` in session\"\"\" request . session . update ({ \"username\" : username }) return response raise LoginFailed ( \"Invalid username or password\" ) async def is_authenticated ( self , request ) -> bool : if request . session . get ( \"username\" , None ) in users : \"\"\" Save current `user` object in the request state. Can be used later to restrict access to connected user. \"\"\" request . state . user = users . get ( request . session [ \"username\" ]) return True return False def get_admin_user ( self , request : Request ) -> AdminUser : user = request . state . user # Retrieve current user photo_url = None if user [ \"avatar\" ] is not None : photo_url = request . url_for ( \"static\" , path = user [ \"avatar\" ]) return AdminUser ( username = user [ \"name\" ], photo_url = photo_url ) async def logout ( self , request : Request , response : Response ) -> Response : request . session . clear () return response","title":"Authentication"},{"location":"tutorial/authentication/#authorization","text":"","title":"Authorization"},{"location":"tutorial/authentication/#for-all-views","text":"Each view implement is_accessible method which can be used to restrict access to current user. from starlette_admin import CustomView from starlette.requests import Request class ReportView ( CustomView ): def is_accessible ( self , request : Request ) -> bool : return \"admin\" in request . state . user [ \"roles\" ] Important When view is inaccessible, it does not appear in menu structure","title":"For all views"},{"location":"tutorial/authentication/#for-modelview","text":"In ModelView , there is four additional methods you can override to restrict access to current user. can_view_details : Permission for viewing full details of Items can_create : Permission for creating new Items can_edit : Permission for editing Items can_delete : Permission for deleting Items is_action_allowed : verify if action with name is allowed. from starlette_admin.contrib.sqla import ModelView from starlette.requests import Request from starlette_admin import action class ArticleView ( ModelView ): exclude_fields_from_list = [ Article . body ] def can_view_details ( self , request : Request ) -> bool : return \"read\" in request . state . user [ \"roles\" ] def can_create ( self , request : Request ) -> bool : return \"create\" in request . state . user [ \"roles\" ] def can_edit ( self , request : Request ) -> bool : return \"edit\" in request . state . user [ \"roles\" ] def can_delete ( self , request : Request ) -> bool : return \"delete\" in request . state . user [ \"roles\" ] async def is_action_allowed ( self , request : Request , name : str ) -> bool : if name == \"make_published\" : return \"action_make_published\" in request . state . user [ \"roles\" ] return await super () . is_action_allowed ( request , name ) @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : ... return \" {} articles were successfully marked as published\" . format ( len ( pks ))","title":"For ModelView"},{"location":"tutorial/authentication/#example","text":"For a working example, have a look at https://github.com/jowilf/starlette-admin/tree/main/examples/auth","title":"Example"},{"location":"tutorial/batch-actions/","text":"Batch Actions By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious. In these cases, you can write a custom batch action to bulk update many objects at once. Note starlette-admin add by default an action to delete many object at once To add other batch actions to your ModelView , besides the default delete action, you can define a function that implements the desired logic and wrap it with the @action decorator (Heavily inspired by Flask-Admin). Example from typing import List , Any from starlette.requests import Request from starlette_admin import action from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import ActionFailed class ArticleView ( ModelView ): actions = [ \"make_published\" , \"delete\" ] # `delete` function is added by default @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks ))","title":"Batch Actions"},{"location":"tutorial/batch-actions/#batch-actions","text":"By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious. In these cases, you can write a custom batch action to bulk update many objects at once. Note starlette-admin add by default an action to delete many object at once To add other batch actions to your ModelView , besides the default delete action, you can define a function that implements the desired logic and wrap it with the @action decorator (Heavily inspired by Flask-Admin).","title":"Batch Actions"},{"location":"tutorial/batch-actions/#example","text":"from typing import List , Any from starlette.requests import Request from starlette_admin import action from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import ActionFailed class ArticleView ( ModelView ): actions = [ \"make_published\" , \"delete\" ] # `delete` function is added by default @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks ))","title":"Example"},{"location":"tutorial/configurations/admin/","text":"Admin Configurations Multiple options are available to customize your admin interface admin = Admin ( title = \"SQLModel Admin\" , base_url = \"/admin\" , route_name = \"admin\" , statics_dir = \"statics/admin\" , templates_dir = \"templates/admin\" , logo_url = \"`https`://preview.tabler.io/static/logo-white.svg\" , login_logo_url = \"`https`://preview.tabler.io/static/logo.svg\" , index_view = CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" ), auth_provider = MyAuthProvider ( login_path = \"/sign-in\" , logout_path = \"/sign-out\" ), middlewares = [], debug = False , ) Parameters title : Admin title. base_url : Base URL for Admin interface. route_name : Mounted Admin name logo_url : URL of logo to be displayed instead of title. login_logo_url : If set, it will be used for login interface instead of logo_url. statics_dir : Templates dir for static files customisation templates_dir : Templates dir for customisation index_view : CustomView to use for index page. auth_provider : Authentication Provider middlewares : Starlette middlewares","title":"Admin"},{"location":"tutorial/configurations/admin/#admin-configurations","text":"Multiple options are available to customize your admin interface admin = Admin ( title = \"SQLModel Admin\" , base_url = \"/admin\" , route_name = \"admin\" , statics_dir = \"statics/admin\" , templates_dir = \"templates/admin\" , logo_url = \"`https`://preview.tabler.io/static/logo-white.svg\" , login_logo_url = \"`https`://preview.tabler.io/static/logo.svg\" , index_view = CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" ), auth_provider = MyAuthProvider ( login_path = \"/sign-in\" , logout_path = \"/sign-out\" ), middlewares = [], debug = False , )","title":"Admin Configurations"},{"location":"tutorial/configurations/admin/#parameters","text":"title : Admin title. base_url : Base URL for Admin interface. route_name : Mounted Admin name logo_url : URL of logo to be displayed instead of title. login_logo_url : If set, it will be used for login interface instead of logo_url. statics_dir : Templates dir for static files customisation templates_dir : Templates dir for customisation index_view : CustomView to use for index page. auth_provider : Authentication Provider middlewares : Starlette middlewares","title":"Parameters"},{"location":"tutorial/configurations/modelview/","text":"ModelView Configurations Multiple options are available to customize your ModelView. For a complete list, have a look at the API documentation for BaseModelView() . Here are some of the most commonly used options: Fields Use fields property to customize which fields to include in admin view. from sqlalchemy import JSON , Column , Integer , String , Text , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin import TagsField from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) tags = Column ( JSON ) content = Column ( Text ) class PostView ( ModelView ): fields = [ \"id\" , \"title\" , Post . content , TagsField ( \"tags\" , label = \"Tags\" )] app = Starlette () admin = Admin ( engine ) admin . add_view ( PostView ( Post , icon = \"fa fa-blog\" )) admin . mount_to ( app ) Exclusions There are several options to help you exclude some fields from certain part of admin interface. The options are: exclude_fields_from_list : List of fields to exclude in List page. exclude_fields_from_detail : List of fields to exclude in Detail page. exclude_fields_from_create : List of fields to exclude from creation page. exclude_fields_from_edit : List of fields to exclude from editing page. class PostView ( ModelView ): exclude_fields_from_list = [ Post . content , Post . tags ] Searching & Sorting Two options are available to specify which fields can be sorted or searched. searchable_fields for list of searchable fields sortable_fields for list of orderable fields Usage class PostView ( ModelView ): sortable_fields = [ Post . id , \"title\" ] searchable_fields = [ Post . id , Post . title , \"tags\" ] Exporting You can export your data from list page. The export options can be set per model and includes the following options: export_fields : List of fields to include in exports. export_types : A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . Only pdf is disable by default. Example from starlette_admin import ExportType class PostView ( ModelView ): export_fields = [ Post . id , Post . content , Post . tags ] export_types = [ ExportType . CSV , ExportType . EXCEL ] Pagination The pagination options in the list page can be configured. The available options are: page_size : Default number of items to display in List page pagination. Default value is set to 10 . page_size_options : Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All Example class PostView ( ModelView ): page_size = 5 page_size_options = [ 5 , 10 , 25 , 50 , - 1 ] Templates The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are: list_template : List view template. Default is list.html . detail_template : Details view template. Default is detail.html . create_template : Edit view template. Default is create.html . edit_template : Edit view template. Default is edit.html . Example class PostView ( ModelView ): detail_template = \"post_detail.html\" Datatables Extensions starlette-admin includes some datatable extensions by default. You can disable any of these extensions in your ModelView by overridden following options: column_visibility : Enable/Disable column visibility extension search_builder : Enable/Disable search builder extension responsive_table : Enable/Disable responsive extension Example class PostView ( ModelView ): column_visibility = False search_builder = False responsive_table = True","title":"ModelView"},{"location":"tutorial/configurations/modelview/#modelview-configurations","text":"Multiple options are available to customize your ModelView. For a complete list, have a look at the API documentation for BaseModelView() . Here are some of the most commonly used options:","title":"ModelView Configurations"},{"location":"tutorial/configurations/modelview/#fields","text":"Use fields property to customize which fields to include in admin view. from sqlalchemy import JSON , Column , Integer , String , Text , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin import TagsField from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) tags = Column ( JSON ) content = Column ( Text ) class PostView ( ModelView ): fields = [ \"id\" , \"title\" , Post . content , TagsField ( \"tags\" , label = \"Tags\" )] app = Starlette () admin = Admin ( engine ) admin . add_view ( PostView ( Post , icon = \"fa fa-blog\" )) admin . mount_to ( app )","title":"Fields"},{"location":"tutorial/configurations/modelview/#exclusions","text":"There are several options to help you exclude some fields from certain part of admin interface. The options are: exclude_fields_from_list : List of fields to exclude in List page. exclude_fields_from_detail : List of fields to exclude in Detail page. exclude_fields_from_create : List of fields to exclude from creation page. exclude_fields_from_edit : List of fields to exclude from editing page. class PostView ( ModelView ): exclude_fields_from_list = [ Post . content , Post . tags ]","title":"Exclusions"},{"location":"tutorial/configurations/modelview/#searching-sorting","text":"Two options are available to specify which fields can be sorted or searched. searchable_fields for list of searchable fields sortable_fields for list of orderable fields Usage class PostView ( ModelView ): sortable_fields = [ Post . id , \"title\" ] searchable_fields = [ Post . id , Post . title , \"tags\" ]","title":"Searching &amp; Sorting"},{"location":"tutorial/configurations/modelview/#exporting","text":"You can export your data from list page. The export options can be set per model and includes the following options: export_fields : List of fields to include in exports. export_types : A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . Only pdf is disable by default. Example from starlette_admin import ExportType class PostView ( ModelView ): export_fields = [ Post . id , Post . content , Post . tags ] export_types = [ ExportType . CSV , ExportType . EXCEL ]","title":"Exporting"},{"location":"tutorial/configurations/modelview/#pagination","text":"The pagination options in the list page can be configured. The available options are: page_size : Default number of items to display in List page pagination. Default value is set to 10 . page_size_options : Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All Example class PostView ( ModelView ): page_size = 5 page_size_options = [ 5 , 10 , 25 , 50 , - 1 ]","title":"Pagination"},{"location":"tutorial/configurations/modelview/#templates","text":"The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are: list_template : List view template. Default is list.html . detail_template : Details view template. Default is detail.html . create_template : Edit view template. Default is create.html . edit_template : Edit view template. Default is edit.html . Example class PostView ( ModelView ): detail_template = \"post_detail.html\"","title":"Templates"},{"location":"tutorial/configurations/modelview/#datatables-extensions","text":"starlette-admin includes some datatable extensions by default. You can disable any of these extensions in your ModelView by overridden following options: column_visibility : Enable/Disable column visibility extension search_builder : Enable/Disable search builder extension responsive_table : Enable/Disable responsive extension Example class PostView ( ModelView ): column_visibility = False search_builder = False responsive_table = True","title":"Datatables Extensions"},{"location":"tutorial/files/","text":"Managing files Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField & ImageField SQLAlchemy & SQLModel All you need is to add ImageField or FileField from SQLAlchemy-file to your model from sqlalchemy import Column , Integer , String from sqlalchemy.orm import declarative_base from sqlalchemy_file import FileField , ImageField from starlette_admin.contrib.sqla import ModelView Base = declarative_base () class Book ( Base ): __tablename__ = \"book\" id = Column ( Integer , autoincrement = True , primary_key = True ) title = Column ( String ( 50 ), unique = True ) cover = Column ( ImageField ( thumbnail_size = ( 128 , 128 ))) content = Column ( FileField ) class BookView ( ModelView ): pass admin . add_view ( BookView ( Book )) Note You can also use multiple=True to save multiple files. MongoEngine Starlette-Admin support ImageField and FileField from mongoengine import Document , FileField , ImageField , StringField from starlette_admin.contrib.mongoengine import ModelView class Book ( Document ): title = StringField ( max_length = 50 ) cover = ImageField ( thumbnail_size = ( 128 , 128 )) content = FileField () class BookView ( ModelView ): pass admin . add_view ( BookView ( Book ))","title":"Managing Files"},{"location":"tutorial/files/#managing-files","text":"Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField & ImageField","title":"Managing files"},{"location":"tutorial/files/#sqlalchemy-sqlmodel","text":"All you need is to add ImageField or FileField from SQLAlchemy-file to your model from sqlalchemy import Column , Integer , String from sqlalchemy.orm import declarative_base from sqlalchemy_file import FileField , ImageField from starlette_admin.contrib.sqla import ModelView Base = declarative_base () class Book ( Base ): __tablename__ = \"book\" id = Column ( Integer , autoincrement = True , primary_key = True ) title = Column ( String ( 50 ), unique = True ) cover = Column ( ImageField ( thumbnail_size = ( 128 , 128 ))) content = Column ( FileField ) class BookView ( ModelView ): pass admin . add_view ( BookView ( Book )) Note You can also use multiple=True to save multiple files.","title":"SQLAlchemy &amp; SQLModel"},{"location":"tutorial/files/#mongoengine","text":"Starlette-Admin support ImageField and FileField from mongoengine import Document , FileField , ImageField , StringField from starlette_admin.contrib.mongoengine import ModelView class Book ( Document ): title = StringField ( max_length = 50 ) cover = ImageField ( thumbnail_size = ( 128 , 128 )) content = FileField () class BookView ( ModelView ): pass admin . add_view ( BookView ( Book ))","title":"MongoEngine"},{"location":"tutorial/getting-started/","text":"Getting started Initialization The first step is to initialize an empty admin interface for your app: SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from starlette_admin.contrib.mongoengine import Admin admin = Admin () from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin engine = AIOEngine () admin = Admin ( engine ) Adding Views ModelView Model views allow you to add a dedicated set of admin pages for managing any model. SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) This gives you a set of fully featured CRUD views for your model: A list view , with support for searching, sorting, filtering, and deleting records. A create view for adding new records. An edit view for updating existing records. A read-only details view . CustomView With CustomView you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. from starlette_admin import CustomView admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) To have a full control of the rendering, override the render methods from starlette.requests import Request from starlette.responses import Response from starlette.templating import Jinja2Templates from starlette_admin import CustomView class HomeView ( CustomView ): async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : return templates . TemplateResponse ( \"home.html\" , { \"request\" : request , \"latest_posts\" : ... , \"top_users\" : ... } ) admin . add_view ( HomeView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" )) Link Use Link to add arbitrary hyperlinks to the menu from starlette_admin.views import Link admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" )) DropDown Use DropDown to group views together in menu structure from starlette_admin import CustomView , DropDown from starlette_admin.contrib.sqla import ModelView from starlette_admin.views import Link from .models import User admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) ) Mount admin to your app The last step is to mount the admin interfaces to your app SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from starlette.applications import Starlette from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User app = Starlette () # FastAPI() admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from odmantic import AIOEngine from starlette.applications import Starlette from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) You can now access your admin interfaces in your browser at http://localhost:8000/admin","title":"Getting Started"},{"location":"tutorial/getting-started/#getting-started","text":"","title":"Getting started"},{"location":"tutorial/getting-started/#initialization","text":"The first step is to initialize an empty admin interface for your app: SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from starlette_admin.contrib.mongoengine import Admin admin = Admin () from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin engine = AIOEngine () admin = Admin ( engine )","title":"Initialization"},{"location":"tutorial/getting-started/#adding-views","text":"","title":"Adding Views"},{"location":"tutorial/getting-started/#modelview","text":"Model views allow you to add a dedicated set of admin pages for managing any model. SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) This gives you a set of fully featured CRUD views for your model: A list view , with support for searching, sorting, filtering, and deleting records. A create view for adding new records. An edit view for updating existing records. A read-only details view .","title":"ModelView"},{"location":"tutorial/getting-started/#customview","text":"With CustomView you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. from starlette_admin import CustomView admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) To have a full control of the rendering, override the render methods from starlette.requests import Request from starlette.responses import Response from starlette.templating import Jinja2Templates from starlette_admin import CustomView class HomeView ( CustomView ): async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : return templates . TemplateResponse ( \"home.html\" , { \"request\" : request , \"latest_posts\" : ... , \"top_users\" : ... } ) admin . add_view ( HomeView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" ))","title":"CustomView"},{"location":"tutorial/getting-started/#link","text":"Use Link to add arbitrary hyperlinks to the menu from starlette_admin.views import Link admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" ))","title":"Link"},{"location":"tutorial/getting-started/#dropdown","text":"Use DropDown to group views together in menu structure from starlette_admin import CustomView , DropDown from starlette_admin.contrib.sqla import ModelView from starlette_admin.views import Link from .models import User admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) )","title":"DropDown"},{"location":"tutorial/getting-started/#mount-admin-to-your-app","text":"The last step is to mount the admin interfaces to your app SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from starlette.applications import Starlette from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User app = Starlette () # FastAPI() admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from odmantic import AIOEngine from starlette.applications import Starlette from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) You can now access your admin interfaces in your browser at http://localhost:8000/admin","title":"Mount admin to your app"},{"location":"tutorial/multiple-admin/","text":"Multiple Admin You can add multiple admin to your app with different or same views. To manage this, simply use different base_url and route_name from starlette.applications import Starlette from starlette_admin import BaseAdmin as Admin from starlette_admin.contrib.sqla import ModelView app = Starlette () admin1 = Admin ( \"Admin1\" , base_url = \"/admin1\" , route_name = \"admin1\" , templates_dir = \"templates/admin1\" ) admin1 . add_view ( ModelView ( Report )) admin1 . add_view ( ModelView ( Post )) admin1 . mount_to ( app ) admin2 = Admin ( \"Admin2\" , base_url = \"/admin2\" , route_name = \"admin2\" , templates_dir = \"templates/admin2\" ) admin2 . add_view ( ModelView ( Post )) admin2 . add_view ( ModelView ( User )) admin2 . mount_to ( app ) assert app . url_path_for ( \"admin1:index\" ) == \"/admin1/\" assert app . url_path_for ( \"admin2:index\" ) == \"/admin2/\"","title":"Multiple Admin"},{"location":"tutorial/multiple-admin/#multiple-admin","text":"You can add multiple admin to your app with different or same views. To manage this, simply use different base_url and route_name from starlette.applications import Starlette from starlette_admin import BaseAdmin as Admin from starlette_admin.contrib.sqla import ModelView app = Starlette () admin1 = Admin ( \"Admin1\" , base_url = \"/admin1\" , route_name = \"admin1\" , templates_dir = \"templates/admin1\" ) admin1 . add_view ( ModelView ( Report )) admin1 . add_view ( ModelView ( Post )) admin1 . mount_to ( app ) admin2 = Admin ( \"Admin2\" , base_url = \"/admin2\" , route_name = \"admin2\" , templates_dir = \"templates/admin2\" ) admin2 . add_view ( ModelView ( Post )) admin2 . add_view ( ModelView ( User )) admin2 . mount_to ( app ) assert app . url_path_for ( \"admin1:index\" ) == \"/admin1/\" assert app . url_path_for ( \"admin2:index\" ) == \"/admin2/\"","title":"Multiple Admin"},{"location":"tutorial/validations/","text":"Forms Validations By design, Starlette-admin doesn't validate your data, the validation will depend on your database backend SQLAlchemy When working with sqlalchemy, you need to write your own validation logic to validate the data submitted in forms. Example from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\"Raise FormValidationError to display error in forms\"\"\" errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if data [ \"publisher\" ] is None : errors [ \"publisher\" ] = \"Publisher is required\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"At least one tag is required\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Info Full example available here SQLModel For SQLModel, you just need to define your model and submitted data are automatically validated. Example from sqlmodel import SQLModel , Field from pydantic import validator class Post ( SQLModel , table = True ): id : Optional [ int ] = Field ( primary_key = True ) title : str = Field () content : str = Field ( min_length = 10 ) views : int = Field ( multiple_of = 4 ) @validator ( 'title' ) def title_must_contain_space ( cls , v ): if ' ' not in v : raise ValueError ( 'title must contain a space' ) return v . title () Info Full example available here Odmantic The submitted data will be automatically validated according to your model definition. Example from typing import List , Optional from odmantic import EmbeddedModel , Field , Model from pydantic import EmailStr class Address ( EmbeddedModel ): street : str = Field ( min_length = 3 ) city : str = Field ( min_length = 3 ) state : Optional [ str ] zipcode : Optional [ str ] class Author ( Model ): first_name : str = Field ( min_length = 3 ) last_name : str = Field ( min_length = 3 ) email : Optional [ EmailStr ] addresses : List [ Address ] = Field ( default_factory = list ) Info Full example available here MongoEngine The submitted data will be automatically validated according to your model definition. Example import mongoengine as db class Comment ( db . EmbeddedDocument ): name = db . StringField ( min_length = 3 , max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) class Post ( db . Document ): name = db . StringField ( max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) inner = db . ListField ( db . EmbeddedDocumentField ( Comment )) lols = db . ListField ( db . StringField ( max_length = 20 )) Info Full example available here","title":"Forms Validations"},{"location":"tutorial/validations/#forms-validations","text":"By design, Starlette-admin doesn't validate your data, the validation will depend on your database backend","title":"Forms Validations"},{"location":"tutorial/validations/#sqlalchemy","text":"When working with sqlalchemy, you need to write your own validation logic to validate the data submitted in forms. Example from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\"Raise FormValidationError to display error in forms\"\"\" errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if data [ \"publisher\" ] is None : errors [ \"publisher\" ] = \"Publisher is required\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"At least one tag is required\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Info Full example available here","title":"SQLAlchemy"},{"location":"tutorial/validations/#sqlmodel","text":"For SQLModel, you just need to define your model and submitted data are automatically validated. Example from sqlmodel import SQLModel , Field from pydantic import validator class Post ( SQLModel , table = True ): id : Optional [ int ] = Field ( primary_key = True ) title : str = Field () content : str = Field ( min_length = 10 ) views : int = Field ( multiple_of = 4 ) @validator ( 'title' ) def title_must_contain_space ( cls , v ): if ' ' not in v : raise ValueError ( 'title must contain a space' ) return v . title () Info Full example available here","title":"SQLModel"},{"location":"tutorial/validations/#odmantic","text":"The submitted data will be automatically validated according to your model definition. Example from typing import List , Optional from odmantic import EmbeddedModel , Field , Model from pydantic import EmailStr class Address ( EmbeddedModel ): street : str = Field ( min_length = 3 ) city : str = Field ( min_length = 3 ) state : Optional [ str ] zipcode : Optional [ str ] class Author ( Model ): first_name : str = Field ( min_length = 3 ) last_name : str = Field ( min_length = 3 ) email : Optional [ EmailStr ] addresses : List [ Address ] = Field ( default_factory = list ) Info Full example available here","title":"Odmantic"},{"location":"tutorial/validations/#mongoengine","text":"The submitted data will be automatically validated according to your model definition. Example import mongoengine as db class Comment ( db . EmbeddedDocument ): name = db . StringField ( min_length = 3 , max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) class Post ( db . Document ): name = db . StringField ( max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) inner = db . ListField ( db . EmbeddedDocumentField ( Comment )) lols = db . ListField ( db . StringField ( max_length = 20 )) Info Full example available here","title":"MongoEngine"},{"location":"es/","text":"Visi\u00f3n General Starlette-Admin es un r\u00e1pido, hermoso y extensible framework de interfaz administrativa para aplicaciones Starlette/FastAPI. Empezando Revisa la documentaci\u00f3n . Prueba la demostraci\u00f3n en vivo . ( C\u00f3digo fuente ) Pruebe los varios ejemplos de uso incluidos en la carpeta /examples Caracter\u00edsticas CRUD de cualquier dato con facilidad Validaci\u00f3n autom\u00e1tica de formularios Widget de tabla avanzado con Datatables B\u00fasqueda y filtrado Resaltado de b\u00fasqueda Ordenamiento multi columna Exportaci\u00f3n de datos a CSV/EXCEL/PDF e impresi\u00f3n con navegador Autenticaci\u00f3n Autorizaci\u00f3n Administrar archivos Vistas personalizadas ORMs compatibles SQLAlchemy SQLModel MongoEngine ODMantic Backend personalizado ( doc , example ) Instalaci\u00f3n PIP $ pip install starlette-admin Poetry $ poetry add starlette-admin Ejemplo Este es un ejemplo simple con el modelo SQLAlchemy from sqlalchemy import Column , Integer , String , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) # Define tu modelo class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) Base . metadata . create_all ( engine ) app = Starlette () # FastAPI() # Crear instancia de admin admin = Admin ( engine , title = \"Ejemplo: SQLAlchemy\" ) # Agregar vista admin . add_view ( ModelView ( Post )) # Montar admin a tu app admin . mount_to ( app ) Acceda a su interfaz de administrador en su navegador en http://localhost:8000/admin Terceros starlette-admin est\u00e1 construido con otros proyectos de c\u00f3digo abierto: Tabler Datatables jquery Select2 flatpickr moment jsoneditor fontawesome","title":"Visi\u00f3n General"},{"location":"es/#vision-general","text":"Starlette-Admin es un r\u00e1pido, hermoso y extensible framework de interfaz administrativa para aplicaciones Starlette/FastAPI.","title":"Visi\u00f3n General"},{"location":"es/#empezando","text":"Revisa la documentaci\u00f3n . Prueba la demostraci\u00f3n en vivo . ( C\u00f3digo fuente ) Pruebe los varios ejemplos de uso incluidos en la carpeta /examples","title":"Empezando"},{"location":"es/#caracteristicas","text":"CRUD de cualquier dato con facilidad Validaci\u00f3n autom\u00e1tica de formularios Widget de tabla avanzado con Datatables B\u00fasqueda y filtrado Resaltado de b\u00fasqueda Ordenamiento multi columna Exportaci\u00f3n de datos a CSV/EXCEL/PDF e impresi\u00f3n con navegador Autenticaci\u00f3n Autorizaci\u00f3n Administrar archivos Vistas personalizadas ORMs compatibles SQLAlchemy SQLModel MongoEngine ODMantic Backend personalizado ( doc , example )","title":"Caracter\u00edsticas"},{"location":"es/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"es/#ejemplo","text":"Este es un ejemplo simple con el modelo SQLAlchemy from sqlalchemy import Column , Integer , String , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) # Define tu modelo class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) Base . metadata . create_all ( engine ) app = Starlette () # FastAPI() # Crear instancia de admin admin = Admin ( engine , title = \"Ejemplo: SQLAlchemy\" ) # Agregar vista admin . add_view ( ModelView ( Post )) # Montar admin a tu app admin . mount_to ( app ) Acceda a su interfaz de administrador en su navegador en http://localhost:8000/admin","title":"Ejemplo"},{"location":"es/#terceros","text":"starlette-admin est\u00e1 construido con otros proyectos de c\u00f3digo abierto: Tabler Datatables jquery Select2 flatpickr moment jsoneditor fontawesome","title":"Terceros"},{"location":"es/advanced/base-model-view/","text":"Extending BaseModelView Starlette-Admin makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin \u2019s model views work as expected, then you should take note of the following: Each model must have one field which acts as a primary key to uniquely identify instances of that model. However, there are no restriction on the data type or the field name of the primary key field. Models must make their data accessible as python properties. If that is the case, then you can implement your own database backend by extending the [BaseModelView][starlette_admin.BaseModelView] class, and implementing the set of methods listed below. Let's say you've defined your models like this: from dataclasses import dataclass from typing import List @dataclass class Post : id : int title : str content : str tags : List [ str ] First you need to define a new class, which derives from [BaseModelView][starlette_admin.views.BaseModelView]. from starlette_admin import BaseModelView class PostView ( BaseModelView ): pass Now, implement the following methods or attributes for the new class: Metadata Set the identity , name and label for the new class from starlette_admin import BaseModelView class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" Important identity is used to identify the model associated to this view and should be unique. Primary key Set the pk_attr value which is primary key attribute name from starlette_admin import BaseModelView class PostView ( BaseModelView ): pk_attr = \"id\" Fields Internally, Starlette-Admin uses custom fields all inherit from [BaseField][starlette_admin.fields.BaseField] to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See [API Reference][starlette_admin.fields.BaseField] for full list of default fields. from starlette_admin import BaseModelView from starlette_admin import IntegerField , StringField , TagsField , TextAreaField class PostView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] CRUD methods Finally, you need to implement these CRUD methods: [count()][starlette_admin.BaseModelView.count] [find_all()][starlette_admin.BaseModelView.find_all] [create()][starlette_admin.BaseModelView.create] [edit()][starlette_admin.BaseModelView.edit] [delete()][starlette_admin.BaseModelView.delete] Full example from dataclasses import dataclass from typing import Any , Dict , Iterable , List , Optional , Union from starlette.requests import Request from starlette_admin import IntegerField , StringField , TagsField , TextAreaField from starlette_admin.exceptions import FormValidationError from starlette_admin.views import BaseModelView @dataclass class Post : id : int title : str content : str tags : List [ str ] def is_valid_for_term ( self , term ): return ( str ( term ) . lower () in self . title . lower () or str ( term ) . lower () in self . content . lower () or any ([ str ( term ) . lower () in tag . lower () for tag in self . tags ]) ) def update ( self , data : Dict ): for key , value in data . items (): if hasattr ( self , key ): setattr ( self , key , value ) db : Dict [ int , Post ] = dict () next_id = 1 def filter_values ( values : Iterable [ Post ], term ): filtered_values = [] for value in values : if value . is_valid_for_term ( term ): filtered_values . append ( value ) return filtered_values class PostView ( BaseModelView ): identity = \"post\" name = \"Post\" label = \"Blog Posts\" icon = \"fa fa-blog\" pk_attr = \"id\" fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ] sortable_fields = ( \"id\" , \"title\" , \"content\" ) search_builder = False async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : values = list ( db . values ()) if where is not None : values = filter_values ( values , where ) return len ( values ) async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: values = list ( db . values ()) if order_by is not None : assert len ( order_by ) < 2 , \"Not supported\" if len ( order_by ) == 1 : key , dir = order_by [ 0 ] . split ( maxsplit = 1 ) values . sort ( key = lambda v : getattr ( v , key ), reverse = ( dir == \"desc\" )) if where is not None and isinstance ( where , ( str , int )): values = filter_values ( values , where ) if limit > 0 : return values [ skip : skip + limit ] return values [ skip :] async def find_by_pk ( self , request : Request , pk ): return db . get ( int ( pk ), None ) async def find_by_pks ( self , request : Request , pks ): return [ db . get ( int ( pk )) for pk in pks ] async def validate_data ( self , data : Dict ): errors = {} if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure title has at least 03 characters\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"You need at least one tag\" if len ( errors ) > 0 : raise FormValidationError ( errors ) async def create ( self , request : Request , data : Dict ): await self . validate_data ( data ) global next_id obj = Post ( id = next_id , ** data ) db [ next_id ] = obj next_id += 1 return obj async def edit ( self , request : Request , pk , data : Dict ): await self . validate_data ( data ) db [ int ( pk )] . update ( data ) return db [ int ( pk )] async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: cnt = 0 for pk in pks : value = await self . find_by_pk ( request , pk ) if value is not None : del db [ int ( pk )] cnt += 1 return cnt","title":"Extendiendo BaseModelView"},{"location":"es/advanced/base-model-view/#extending-basemodelview","text":"Starlette-Admin makes a few assumptions about the database models that it works with. If you want to implement your own database backend, and still have Starlette-Admin \u2019s model views work as expected, then you should take note of the following: Each model must have one field which acts as a primary key to uniquely identify instances of that model. However, there are no restriction on the data type or the field name of the primary key field. Models must make their data accessible as python properties. If that is the case, then you can implement your own database backend by extending the [BaseModelView][starlette_admin.BaseModelView] class, and implementing the set of methods listed below. Let's say you've defined your models like this: from dataclasses import dataclass from typing import List @dataclass class Post : id : int title : str content : str tags : List [ str ] First you need to define a new class, which derives from [BaseModelView][starlette_admin.views.BaseModelView]. from starlette_admin import BaseModelView class PostView ( BaseModelView ): pass Now, implement the following methods or attributes for the new class:","title":"Extending BaseModelView"},{"location":"es/advanced/base-model-view/#fields","text":"Internally, Starlette-Admin uses custom fields all inherit from [BaseField][starlette_admin.fields.BaseField] to represent each attribute. So, you need to choose the right field for each attribute or create a new field if needed. See [API Reference][starlette_admin.fields.BaseField] for full list of default fields. from starlette_admin import BaseModelView from starlette_admin import IntegerField , StringField , TagsField , TextAreaField class PostView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), StringField ( \"title\" ), TextAreaField ( \"content\" ), TagsField ( \"tags\" ), ]","title":"Fields"},{"location":"es/advanced/base-model-view/#crud-methods","text":"Finally, you need to implement these CRUD methods: [count()][starlette_admin.BaseModelView.count] [find_all()][starlette_admin.BaseModelView.find_all] [create()][starlette_admin.BaseModelView.create] [edit()][starlette_admin.BaseModelView.edit] [delete()][starlette_admin.BaseModelView.delete]","title":"CRUD methods"},{"location":"es/advanced/custom-field/","text":"Custom Field Starlette-Admin has a lot of built-in [fields][starlette_admin.fields.BaseField] available. But you can override or create your own field according to your need. Important Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases. The first step is to define a new class, which derives from [BaseField][starlette_admin.fields.BaseField] or any others fields to customize it from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): pass List Rendering Starlette-Admin use Datatables to render list. By default all fields will be render as text field. To customize this behavior you need to write a javascript function to render your column inside datatable instance. For more information on how to write your function read Datatables documentation . First, you need to provide a link to your custom javascript file in which you add additional render function, by overriding the admin class Example This is simple example with SQLAlchemy backend from starlette_admin.contrib.sqla import Admin as BaseAdmin class Admin ( BaseAdmin ): def custom_render_js ( self , request : Request ) -> Optional [ str ]: return request . url_for ( \"statics\" , path = \"js/custom_render.js\" ) admin = Admin ( engine ) admin . add_view ( ... ) statics/js/custom_render.js Object . assign ( render , { mycustomkey : function render ( data , type , full , meta , fieldOptions ) { ... }, }); Note fieldOptions is your field as javascript object. Your field attributes is serialized into javascript object by using dataclass asdict function. Then, set render_function_key value from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" Form For form rendering, you should create a new html file under the directory forms in your templates dir. These jinja2 variables are available: field : Your field instance error : Error message coming from FormValidationError data : current value. Will be available if it is edit or when validation error occur action : EDIT or CREATE Example forms/custom.html < div class = \"{%if error%}is-invalid{%endif%}\" > < input id = \"{{field.id}}\" name = \"{{field.id}}\" ... /> {% if field.help_text %} < small class = \"form-hint\" > {{field.help_text}} </ small > {%endif%} </ div > {%if error %} < div class = \"invalid-feedback\" > {{error}} </ div > {%endif%} from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" Detail Page To render your field on detail page, you should create a new html file under the directory displays in your template dir. These jinja2 variables are available: field : Your field instance data : value to display Example displays/custom.html < span > Hello {{data}} </ span > from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" Data processing For data processing you will need to override two functions: process_form_data : Will be call when converting field value into python dict object serialize_field_value : Will be call when serializing value to send through the API. This is the same data you will get in your render function from dataclasses import dataclass from typing import Any , Dict from requests import Request from starlette.datastructures import FormData from starlette_admin import BaseField @dataclass class CustomField ( BaseField ): render_function_key : str = \"mycustomkey\" form_template : str = \"forms/custom.html\" display_template = \"displays/custom.html\" async def parse_form_data ( self , request : Request , form_data : FormData ) -> Any : return form_data . get ( self . name ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def dict ( self ) -> Dict [ str , Any ]: return super () . dict () Important Override dict function to get control of the options which is available in javascript.","title":"Campos Personalizados"},{"location":"es/advanced/custom-field/#custom-field","text":"Starlette-Admin has a lot of built-in [fields][starlette_admin.fields.BaseField] available. But you can override or create your own field according to your need. Important Before creating a new field, try first to extend the existing ones. They are flexible enough to fit most use cases. The first step is to define a new class, which derives from [BaseField][starlette_admin.fields.BaseField] or any others fields to customize it from starlette_admin import BaseField from dataclasses import dataclass @dataclass class CustomField ( BaseField ): pass","title":"Custom Field"},{"location":"es/alternatives/","text":"Alternativas, Inspiration and Comparisons Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi. FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM. sqladmin: SQLAlchemy Admin for FastAPI and Starlette","title":"Alternativas, Inspiraci\u00f3n y Comparaciones"},{"location":"es/alternatives/#alternativas-inspiration-and-comparisons","text":"Flask-Admin: Simple and extensible administrative interface framework for Flask. The main goal of this project is to provide similar tool for Starlette/FastApi. FastApi-Admin: A fast admin dashboard based on FastAPI and TortoiseORM. sqladmin: SQLAlchemy Admin for FastAPI and Starlette","title":"Alternativas, Inspiration and Comparisons"},{"location":"es/api/actions/","text":"starlette_admin . actions . action ( name , text , confirmation = None , submit_btn_text = 'Proceed' , submit_btn_class = 'btn-primary' ) Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView] Parameters: Name Type Description Default name str unique action name for your ModelView required text str Action text required confirmation Optional [ str ] Confirmation text. If not provided, action will be executed unconditionally. None submit_btn_text Optional [ str ] Submit button text 'Proceed' submit_btn_class Optional [ str ] Submit button variant (ex. button-primary , button-ghost-info , btn-outline-danger , ...) 'btn-primary' Usage class ArticleView ( ModelView ): actions = [ 'make_published' ] @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks )) Source code in starlette_admin/actions.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def action ( name : str , text : str , confirmation : Optional [ str ] = None , submit_btn_text : Optional [ str ] = \"Proceed\" , submit_btn_class : Optional [ str ] = \"btn-primary\" , ) -> Callable [[ Callable [ ... , Awaitable [ str ]]], Any ]: \"\"\" Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView] Args: name: unique action name for your ModelView text: Action text confirmation: Confirmation text. If not provided, action will be executed unconditionally. submit_btn_text: Submit button text submit_btn_class: Submit button variant (ex. `button-primary`, `button-ghost-info`, `btn-outline-danger`, ...) !!! usage ```python class ArticleView(ModelView): actions = ['make_published'] @action( name=\"make_published\", text=\"Mark selected articles as published\", confirmation=\"Are you sure you want to mark selected articles as published ?\", submit_btn_text=\"Yes, proceed\", submit_btn_class=\"btn-success\", ) async def make_published_action(self, request: Request, pks: List[Any]) -> str: # Write your logic here if ... : # Display meaningfully error raise ActionFailed(\"Sorry, We can't proceed this action now.\") # Display successfully message return \"{} articles were successfully marked as published\".format(len(pks)) ``` \"\"\" def wrap ( f : Callable [ ... , Awaitable [ str ]]) -> Callable [ ... , Awaitable [ str ]]: f . _action = { # type: ignore \"name\" : name , \"text\" : text , \"confirmation\" : confirmation , \"submit_btn_text\" : submit_btn_text , \"submit_btn_class\" : submit_btn_class , } return f return wrap","title":"Actions"},{"location":"es/api/actions/#starlette_admin.actions.action","text":"Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView] Parameters: Name Type Description Default name str unique action name for your ModelView required text str Action text required confirmation Optional [ str ] Confirmation text. If not provided, action will be executed unconditionally. None submit_btn_text Optional [ str ] Submit button text 'Proceed' submit_btn_class Optional [ str ] Submit button variant (ex. button-primary , button-ghost-info , btn-outline-danger , ...) 'btn-primary' Usage class ArticleView ( ModelView ): actions = [ 'make_published' ] @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks )) Source code in starlette_admin/actions.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def action ( name : str , text : str , confirmation : Optional [ str ] = None , submit_btn_text : Optional [ str ] = \"Proceed\" , submit_btn_class : Optional [ str ] = \"btn-primary\" , ) -> Callable [[ Callable [ ... , Awaitable [ str ]]], Any ]: \"\"\" Use this decorator to add custom actions to your [ModelView][starlette_admin.views.BaseModelView] Args: name: unique action name for your ModelView text: Action text confirmation: Confirmation text. If not provided, action will be executed unconditionally. submit_btn_text: Submit button text submit_btn_class: Submit button variant (ex. `button-primary`, `button-ghost-info`, `btn-outline-danger`, ...) !!! usage ```python class ArticleView(ModelView): actions = ['make_published'] @action( name=\"make_published\", text=\"Mark selected articles as published\", confirmation=\"Are you sure you want to mark selected articles as published ?\", submit_btn_text=\"Yes, proceed\", submit_btn_class=\"btn-success\", ) async def make_published_action(self, request: Request, pks: List[Any]) -> str: # Write your logic here if ... : # Display meaningfully error raise ActionFailed(\"Sorry, We can't proceed this action now.\") # Display successfully message return \"{} articles were successfully marked as published\".format(len(pks)) ``` \"\"\" def wrap ( f : Callable [ ... , Awaitable [ str ]]) -> Callable [ ... , Awaitable [ str ]]: f . _action = { # type: ignore \"name\" : name , \"text\" : text , \"confirmation\" : confirmation , \"submit_btn_text\" : submit_btn_text , \"submit_btn_class\" : submit_btn_class , } return f return wrap","title":"action()"},{"location":"es/api/contrib/sqlalchemy/modelview/","text":"starlette_admin.contrib.sqla.ModelView Bases: BaseModelView Source code in starlette_admin/contrib/sqla/view.pyclass ModelView ( BaseModelView ): def __init__ ( self , model : Type [ Any ], icon : Optional [ str ] = None , name : Optional [ str ] = None , label : Optional [ str ] = None , identity : Optional [ str ] = None , ): try : mapper = inspect ( model ) except NoInspectionAvailable : raise InvalidModelError ( # noqa B904 f \"Class { model . __name__ } is not a SQLAlchemy model.\" ) assert len ( mapper . primary_key ) == 1 , ( \"Multiple PK columns not supported, A possible solution is to override \" \"BaseModelView class and put your own logic \" ) self . model = model self . identity = identity or slugify_class_name ( self . model . __name__ ) self . label = label or prettify_class_name ( self . model . __name__ ) + \"s\" self . name = name or prettify_class_name ( self . model . __name__ ) self . icon = icon self . _pk_column : Column = mapper . primary_key [ 0 ] self . pk_attr = self . _pk_column . key self . _pk_coerce = extract_column_python_type ( self . _pk_column ) if self . fields is None or len ( self . fields ) == 0 : self . fields = [ self . model . __dict__ [ f ] . key for f in self . model . __dict__ if type ( self . model . __dict__ [ f ]) is InstrumentedAttribute ] self . fields = normalize_fields ( self . fields , mapper ) self . exclude_fields_from_list = normalize_list ( self . exclude_fields_from_list ) # type: ignore self . exclude_fields_from_detail = normalize_list ( self . exclude_fields_from_detail ) # type: ignore self . exclude_fields_from_create = normalize_list ( self . exclude_fields_from_create ) # type: ignore self . exclude_fields_from_edit = normalize_list ( self . exclude_fields_from_edit ) # type: ignore _default_list = [ field . name for field in self . fields if not isinstance ( field , ( RelationField , FileField )) ] self . searchable_fields = normalize_list ( self . searchable_fields if ( self . searchable_fields is not None ) else _default_list ) self . sortable_fields = normalize_list ( self . sortable_fields if ( self . sortable_fields is not None ) else _default_list ) self . export_fields = normalize_list ( self . export_fields ) super () . __init__ () def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model ) def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column )) def get_search_query ( self , request : Request , term : str ) -> Any : \"\"\" Return SQLAlchemy whereclause to use for full text search Args: request: Starlette request term: Filtering term Examples: ```python class PostView(ModelView): def get_search_query(self, request: Request, term: str): return Post.title.contains(term) ``` \"\"\" clauses = [] for field in self . fields : if field . searchable and type ( field ) in [ StringField , TextAreaField , EmailField , URLField , PhoneField , ColorField , ]: attr = getattr ( self . model , field . name ) clauses . append ( cast ( attr , String ) . ilike ( f \"% { term } %\" )) return or_ ( * clauses ) async def count ( self , request : Request , where : Union [ Dict [ str , Any ], str , None ] = None , ) -> int : session : Union [ Session , AsyncSession ] = request . state . session stmt = self . get_count_query () if where is not None : if isinstance ( where , dict ): where = build_query ( where , self . model ) else : where = await self . build_full_text_search_query ( request , where , self . model ) stmt = stmt . where ( where ) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalar_one () return ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalar_one () async def find_all ( self , request : Request , skip : int = 0 , limit : int = 100 , where : Union [ Dict [ str , Any ], str , None ] = None , order_by : Optional [ List [ str ]] = None , ) -> List [ Any ]: session : Union [ Session , AsyncSession ] = request . state . session stmt = self . get_list_query () . offset ( skip ) if limit > 0 : stmt = stmt . limit ( limit ) if where is not None : if isinstance ( where , dict ): where = build_query ( where , self . model ) else : where = await self . build_full_text_search_query ( request , where , self . model ) stmt = stmt . where ( where ) stmt = stmt . order_by ( * build_order_clauses ( order_by or [], self . model )) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . all () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . all () ) async def find_by_pk ( self , request : Request , pk : Any ) -> Any : session : Union [ Session , AsyncSession ] = request . state . session stmt = select ( self . model ) . where ( self . _pk_column == self . _pk_coerce ( pk )) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . one_or_none () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . one_or_none () ) async def find_by_pks ( self , request : Request , pks : List [ Any ]) -> List [ Any ]: session : Union [ Session , AsyncSession ] = request . state . session stmt = select ( self . model ) . where ( self . _pk_column . in_ ( map ( self . _pk_coerce , pks ))) for field in self . fields : if isinstance ( field , RelationField ): stmt = stmt . options ( joinedload ( field . name )) if isinstance ( session , AsyncSession ): return ( await session . execute ( stmt )) . scalars () . unique () . all () return ( ( await anyio . to_thread . run_sync ( session . execute , stmt )) . scalars () . unique () . all () ) async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\" Inherit this method to validate your data. Args: request: Starlette request data: Submitted data Raises: FormValidationError: to display errors to users Examples: ```python from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post(Base): __tablename__ = \"post\" id = Column(Integer, primary_key=True) title = Column(String(100), nullable=False) text = Column(Text, nullable=False) date = Column(Date) class PostView(ModelView): async def validate(self, request: Request, data: Dict[str, Any]) -> None: errors: Dict[str, str] = dict() _2day_from_today = date.today() + timedelta(days=2) if data[\"title\"] is None or len(data[\"title\"]) < 3: errors[\"title\"] = \"Ensure this value has at least 03 characters\" if data[\"text\"] is None or len(data[\"text\"]) < 10: errors[\"text\"] = \"Ensure this value has at least 10 characters\" if data[\"date\"] is None or data[\"date\"] < _2day_from_today: errors[\"date\"] = \"We need at least one day to verify your post\" if len(errors) > 0: raise FormValidationError(errors) return await super().validate(request, data) ``` \"\"\" async def create ( self , request : Request , data : Dict [ str , Any ]) -> Any : try : data = await self . _arrange_data ( request , data ) await self . validate ( request , data ) session : Union [ Session , AsyncSession ] = request . state . session obj = await self . _populate_obj ( request , self . model (), data ) session . add ( obj ) if isinstance ( session , AsyncSession ): await session . commit () await session . refresh ( obj ) else : await anyio . to_thread . run_sync ( session . commit ) await anyio . to_thread . run_sync ( session . refresh , obj ) return obj except Exception as e : return self . handle_exception ( e ) async def edit ( self , request : Request , pk : Any , data : Dict [ str , Any ]) -> Any : try : data = await self . _arrange_data ( request , data , True ) await self . validate ( request , data ) session : Union [ Session , AsyncSession ] = request . state . session obj = await self . find_by_pk ( request , pk ) session . add ( await self . _populate_obj ( request , obj , data , True )) if isinstance ( session , AsyncSession ): await session . commit () await session . refresh ( obj ) else : await anyio . to_thread . run_sync ( session . commit ) await anyio . to_thread . run_sync ( session . refresh , obj ) return obj except Exception as e : self . handle_exception ( e ) async def _arrange_data ( self , request : Request , data : Dict [ str , Any ], is_edit : bool = False , ) -> Dict [ str , Any ]: \"\"\" This function will return a new dict with relationships loaded from database. \"\"\" arranged_data : Dict [ str , Any ] = {} for field in self . fields : if ( is_edit and field . exclude_from_edit ) or ( not is_edit and field . exclude_from_create ): continue if isinstance ( field , RelationField ) and data [ field . name ] is not None : foreign_model = self . _find_foreign_model ( field . identity ) # type: ignore if not field . multiple : arranged_data [ field . name ] = await foreign_model . find_by_pk ( request , data [ field . name ] ) else : arranged_data [ field . name ] = await foreign_model . find_by_pks ( request , data [ field . name ] ) else : arranged_data [ field . name ] = data [ field . name ] return arranged_data async def _populate_obj ( self , request : Request , obj : Any , data : Dict [ str , Any ], is_edit : bool = False , ) -> Any : for field in self . fields : if ( is_edit and field . exclude_from_edit ) or ( not is_edit and field . exclude_from_create ): continue name , value = field . name , data . get ( field . name , None ) if isinstance ( field , FileField ): value , should_be_deleted = value if should_be_deleted : setattr ( obj , name , None ) elif ( not field . multiple and value is not None ) or ( field . multiple and isinstance ( value , list ) and len ( value ) > 0 ): setattr ( obj , name , value ) else : setattr ( obj , name , value ) return obj async def delete ( self , request : Request , pks : List [ Any ]) -> Optional [ int ]: session : Union [ Session , AsyncSession ] = request . state . session objs = await self . find_by_pks ( request , pks ) if isinstance ( session , AsyncSession ): for obj in objs : await session . delete ( obj ) await session . commit () else : for obj in objs : await anyio . to_thread . run_sync ( session . delete , obj ) await anyio . to_thread . run_sync ( session . commit ) return len ( objs ) async def build_full_text_search_query ( self , request : Request , term : str , model : Any ) -> Any : return self . get_search_query ( request , term ) def handle_exception ( self , exc : Exception ) -> None : try : \"\"\"Automatically handle sqlalchemy_file error\"\"\" sqlalchemy_file = __import__ ( \"sqlalchemy_file\" ) if isinstance ( exc , sqlalchemy_file . exceptions . ValidationError ): raise FormValidationError ({ exc . key : exc . msg }) except ImportError : # pragma: no cover pass raise exc # pragma: no cover get_count_query () Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) Source code in starlette_admin/contrib/sqla/view.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column )) get_list_query () Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. Source code in starlette_admin/contrib/sqla/view.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model ) get_search_query ( request , term ) Return SQLAlchemy whereclause to use for full text search Parameters: Name Type Description Default request Request Starlette request required term str Filtering term required Examples: class PostView ( ModelView ): def get_search_query ( self , request : Request , term : str ): return Post . title . contains ( term ) Source code in starlette_admin/contrib/sqla/view.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 def get_search_query ( self , request : Request , term : str ) -> Any : \"\"\" Return SQLAlchemy whereclause to use for full text search Args: request: Starlette request term: Filtering term Examples: ```python class PostView(ModelView): def get_search_query(self, request: Request, term: str): return Post.title.contains(term) ``` \"\"\" clauses = [] for field in self . fields : if field . searchable and type ( field ) in [ StringField , TextAreaField , EmailField , URLField , PhoneField , ColorField , ]: attr = getattr ( self . model , field . name ) clauses . append ( cast ( attr , String ) . ilike ( f \"% { term } %\" )) return or_ ( * clauses ) validate ( request , data ) async Inherit this method to validate your data. Parameters: Name Type Description Default request Request Starlette request required data Dict [ str , Any ] Submitted data required Raises: Type Description FormValidationError to display errors to users Examples: from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post ( Base ): __tablename__ = \"post\" id = Column ( Integer , primary_key = True ) title = Column ( String ( 100 ), nullable = False ) text = Column ( Text , nullable = False ) date = Column ( Date ) class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Source code in starlette_admin/contrib/sqla/view.py 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\" Inherit this method to validate your data. Args: request: Starlette request data: Submitted data Raises: FormValidationError: to display errors to users Examples: ```python from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class Post(Base): __tablename__ = \"post\" id = Column(Integer, primary_key=True) title = Column(String(100), nullable=False) text = Column(Text, nullable=False) date = Column(Date) class PostView(ModelView): async def validate(self, request: Request, data: Dict[str, Any]) -> None: errors: Dict[str, str] = dict() _2day_from_today = date.today() + timedelta(days=2) if data[\"title\"] is None or len(data[\"title\"]) < 3: errors[\"title\"] = \"Ensure this value has at least 03 characters\" if data[\"text\"] is None or len(data[\"text\"]) < 10: errors[\"text\"] = \"Ensure this value has at least 10 characters\" if data[\"date\"] is None or data[\"date\"] < _2day_from_today: errors[\"date\"] = \"We need at least one day to verify your post\" if len(errors) > 0: raise FormValidationError(errors) return await super().validate(request, data) ``` \"\"\"","title":"ModelView"},{"location":"es/api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.view.ModelView.get_count_query","text":"Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) Source code in starlette_admin/contrib/sqla/view.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def get_count_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [count][starlette_admin.views.BaseModelView.count] method. Examples: ```python hl_lines=\"6-7\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` \"\"\" return select ( func . count ( self . _pk_column ))","title":"get_count_query()"},{"location":"es/api/contrib/sqlalchemy/modelview/#starlette_admin.contrib.sqla.view.ModelView.get_list_query","text":"Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: class PostView ( ModelView ): def get_list_query ( self ): return super () . get_list_query () . where ( Post . published == true ()) def get_count_query ( self ): return super () . get_count_query () . where ( Post . published == true ()) If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. Source code in starlette_admin/contrib/sqla/view.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def get_list_query ( self ) -> Select : \"\"\" Return a Select expression which is used as base statement for [find_all][starlette_admin.views.BaseModelView.find_all] method. Examples: ```python hl_lines=\"3-4\" class PostView(ModelView): def get_list_query(self): return super().get_list_query().where(Post.published == true()) def get_count_query(self): return super().get_count_query().where(Post.published == true()) ``` If you override this method, don't forget to also override [get_count_query][starlette_admin.contrib.sqla.ModelView.get_count_query], for displaying the correct item count in the list view. \"\"\" return select ( self . model )","title":"get_list_query()"},{"location":"es/api/fields/","text":"starlette_admin.fields.BaseField dataclass Base class for fields Parameters: Name Type Description Default name str Field name, same as attribute name in your model required label Optional [ str ] Field label None help_text Optional [ str ] Hint message to display in forms None type Optional [ str ] Field type, unique key used to define the field None id str Unique id, used to represent field instance '' search_builder_type Optional [ str ] datatable columns.searchBuilderType, For more information click here 'default' required Optional [ bool ] Indicate if the fields is required False exclude_from_list Optional [ bool ] Control field visibility in list page False exclude_from_detail Optional [ bool ] Control field visibility in detail page False exclude_from_create Optional [ bool ] Control field visibility in create page False exclude_from_edit Optional [ bool ] Control field visibility in edit page False searchable Optional [ bool ] Indicate if the fields is searchable True orderable Optional [ bool ] Indicate if the fields is orderable True render_function_key str Render function key inside the global render variable in javascript 'text' form_template str template for rendering this field in creation and edit page 'forms/input.html' display_template str template for displaying this field in detail page 'displays/text.html' Source code in starlette_admin/fields.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @dataclass class BaseField : \"\"\" Base class for fields Parameters: name: Field name, same as attribute name in your model label: Field label help_text: Hint message to display in forms type: Field type, unique key used to define the field id: Unique id, used to represent field instance search_builder_type: datatable columns.searchBuilderType, For more information [click here](https://datatables.net/reference/option/columns.searchBuilderType) required: Indicate if the fields is required exclude_from_list: Control field visibility in list page exclude_from_detail: Control field visibility in detail page exclude_from_create: Control field visibility in create page exclude_from_edit: Control field visibility in edit page searchable: Indicate if the fields is searchable orderable: Indicate if the fields is orderable render_function_key: Render function key inside the global `render` variable in javascript form_template: template for rendering this field in creation and edit page display_template: template for displaying this field in detail page \"\"\" name : str label : Optional [ str ] = None type : Optional [ str ] = None help_text : Optional [ str ] = None id : str = \"\" search_builder_type : Optional [ str ] = \"default\" required : Optional [ bool ] = False exclude_from_list : Optional [ bool ] = False exclude_from_detail : Optional [ bool ] = False exclude_from_create : Optional [ bool ] = False exclude_from_edit : Optional [ bool ] = False searchable : Optional [ bool ] = True orderable : Optional [ bool ] = True render_function_key : str = \"text\" form_template : str = \"forms/input.html\" label_template : str = \"forms/_label.html\" display_template : str = \"displays/text.html\" error_class = \"is-invalid\" def __post_init__ ( self ) -> None : if self . label is None : self . label = self . name . replace ( \"_\" , \" \" ) . capitalize () if self . type is None : self . type = type ( self ) . __name__ self . id = self . name async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : return form_data . get ( self . id ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return value def additional_css_links ( self , request : Request ) -> List [ str ]: return [] def additional_js_links ( self , request : Request ) -> List [ str ]: return [] def dict ( self ) -> Dict [ str , Any ]: return asdict ( self ) starlette_admin.fields.BooleanField dataclass Bases: BaseField This field displays the true/false value of a boolean property. Source code in starlette_admin/fields.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 @dataclass class BooleanField ( BaseField ): \"\"\"This field displays the `true/false` value of a boolean property.\"\"\" search_builder_type : Optional [ str ] = \"bool\" render_function_key : str = \"boolean\" form_template : str = \"forms/boolean.html\" display_template : str = \"displays/boolean.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> bool : return form_data . get ( self . id ) == \"on\" async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> bool : return bool ( value ) starlette_admin.fields.IntegerField dataclass Bases: NumberField This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 @dataclass class IntegerField ( NumberField ): \"\"\" This field is used to represent the value of properties that store integer numbers. Erroneous input is ignored and will not be accepted as a value.\"\"\" class_ : str = \"field-integer form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ int ]: try : return int ( form_data . get ( self . id )) # type: ignore except ( ValueError , TypeError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return int ( value ) starlette_admin.fields.DecimalField dataclass Bases: NumberField This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 @dataclass class DecimalField ( NumberField ): \"\"\" This field is used to represent the value of properties that store decimal numbers. Erroneous input is ignored and will not be accepted as a value. \"\"\" step : str = \"any\" class_ : str = \"field-decimal form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ decimal . Decimal ]: try : return decimal . Decimal ( form_data . get ( self . id )) # type: ignore except ( decimal . InvalidOperation , ValueError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> str : return str ( value ) starlette_admin.fields.FloatField dataclass Bases: StringField A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 @dataclass class FloatField ( StringField ): \"\"\" A text field, except all input is coerced to an float. Erroneous input is ignored and will not be accepted as a value. \"\"\" class_ : str = \"field-float form-control\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ float ]: try : return float ( form_data . get ( self . id )) # type: ignore except ValueError : return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> float : return float ( value ) starlette_admin.fields.StringField dataclass Bases: BaseField This field is used to represent any kind of short text content. Source code in starlette_admin/fields.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 @dataclass class StringField ( BaseField ): \"\"\"This field is used to represent any kind of short text content.\"\"\" search_builder_type : Optional [ str ] = \"string\" input_type : str = \"text\" class_ : str = \"field-string form-control\" placeholder : Optional [ str ] = None def input_params ( self ) -> str : return html_params ( { \"type\" : self . input_type , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : return str ( value ) starlette_admin.fields.TextAreaField dataclass Bases: StringField This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField] Source code in starlette_admin/fields.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 @dataclass class TextAreaField ( StringField ): \"\"\"This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\" rows : int = 6 maxlength : Optional [ int ] = None minlength : Optional [ int ] = None class_ : str = \"field-textarea form-control\" form_template : str = \"forms/textarea.html\" def input_params ( self ) -> str : return html_params ( { \"rows\" : self . rows , \"minlength\" : self . minlength , \"maxlength\" : self . maxlength , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) starlette_admin.fields.TagsField dataclass Bases: BaseField This field is used to represent the value of properties that store a list of string values. Render as select2 tags input. Source code in starlette_admin/fields.py 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 @dataclass class TagsField ( BaseField ): \"\"\" This field is used to represent the value of properties that store a list of string values. Render as `select2` tags input. \"\"\" form_template : str = \"forms/tags.html\" form_js : str = \"js/field/forms/tags.js\" class_ : str = \"field-tags form-control form-select\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> List [ str ]: return form_data . getlist ( self . id ) # type: ignore def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/select2.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/select2.min.js\" , ) ] starlette_admin.fields.EmailField dataclass Bases: StringField This field is used to represent a text content that stores a single email address. Source code in starlette_admin/fields.py 281 282 283 284 285 286 287 288 289 @dataclass class EmailField ( StringField ): \"\"\"This field is used to represent a text content that stores a single email address.\"\"\" input_type : str = \"email\" render_function_key : str = \"email\" class_ : str = \"field-email form-control\" display_template : str = \"displays/email.html\" starlette_admin.fields.URLField dataclass Bases: StringField This field is used to represent a text content that stores a single URL. Source code in starlette_admin/fields.py 292 293 294 295 296 297 298 299 @dataclass class URLField ( StringField ): \"\"\"This field is used to represent a text content that stores a single URL.\"\"\" input_type : str = \"url\" render_function_key : str = \"url\" class_ : str = \"field-url form-control\" display_template : str = \"displays/url.html\" starlette_admin.fields.PhoneField dataclass Bases: StringField A StringField, except renders an <input type=\"phone\"> . Source code in starlette_admin/fields.py 302 303 304 305 306 307 @dataclass class PhoneField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"phone\">`.\"\"\" input_type : str = \"phone\" class_ : str = \"field-phone form-control\" starlette_admin.fields.ColorField dataclass Bases: StringField A StringField, except renders an <input type=\"color\"> . Source code in starlette_admin/fields.py 310 311 312 313 314 315 @dataclass class ColorField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"color\">`.\"\"\" input_type : str = \"color\" class_ : str = \"field-color form-control form-control-color\" starlette_admin.fields.PasswordField dataclass Bases: StringField A StringField, except renders an <input type=\"password\"> . Source code in starlette_admin/fields.py 318 319 320 321 322 323 @dataclass class PasswordField ( StringField ): \"\"\"A StringField, except renders an `<input type=\"password\">`.\"\"\" input_type : str = \"password\" class_ : str = \"field-password form-control\" starlette_admin.fields.EnumField dataclass Bases: StringField Enumeration Field. It take a python enum.Enum class or a list of (value, label) pairs. It can also be a list of only values, in which case the value is used as the label. Example class Status ( str , enum . Enum ): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel : status : Optional [ Status ] = None class MyModelView ( ModelView ): fields = [ EnumField . from_enum ( \"status\" , Status )] class MyModel : language : str class MyModelView ( ModelView ): fields = [ EnumField . from_choices ( \"language\" , [( 'cpp' , 'C++' ), ( 'py' , 'Python' ), ( 'text' , 'Plain Text' )])] Source code in starlette_admin/fields.py 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 @dataclass class EnumField ( StringField ): \"\"\" Enumeration Field. It take a python `enum.Enum` class or a list of *(value, label)* pairs. It can also be a list of only values, in which case the value is used as the label. Example: ```Python class Status(str, enum.Enum): NEW = \"new\" ONGOING = \"ongoing\" DONE = \"done\" class MyModel: status: Optional[Status] = None class MyModelView(ModelView): fields = [EnumField.from_enum(\"status\", Status)] ``` ```Python class MyModel: language: str class MyModelView(ModelView): fields = [EnumField.from_choices(\"language\", [('cpp', 'C++'), ('py', 'Python'), ('text', 'Plain Text')])] ``` \"\"\" multiple : bool = False choices : Iterable [ Tuple [ str , str ]] = dc_field ( default_factory = dict ) form_template : str = \"forms/enum.html\" class_ : str = \"field-enum form-control form-select\" coerce : type = str async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : return ( list ( map ( self . coerce , form_data . getlist ( self . id ))) if self . multiple else ( self . coerce ( form_data . get ( self . id )) if form_data . get ( self . id ) else None ) ) def _get_label ( self , value : Any ) -> Any : if isinstance ( value , Enum ): return value . name for v , label in self . choices : if value == v : return label raise ValueError ( f \"Invalid choice value: { value } \" ) async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : labels = [ ( self . _get_label ( v ) if action != RequestAction . EDIT else v ) for v in ( value if self . multiple else [ value ]) ] return labels if self . multiple else labels [ 0 ] def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/select2.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/select2.min.js\" , ) ] @classmethod def from_enum ( cls , name : str , enum_type : Type [ Enum ], multiple : bool = False , ** kwargs : Dict [ str , Any ], ) -> \"EnumField\" : choices = [( e . value , e . name . replace ( \"_\" , \" \" )) for e in enum_type ] coerce = int if issubclass ( enum_type , IntEnum ) else str return cls ( name , choices = choices , multiple = multiple , coerce = coerce , ** kwargs ) # type: ignore @classmethod def from_choices ( cls , name : str , choices : Union [ List [ Tuple [ str , str ]], List [ str ], Tuple ], multiple : bool = False , ** kwargs : Dict [ str , Any ], ) -> \"EnumField\" : if len ( choices ) > 0 and not isinstance ( choices [ 0 ], ( list , tuple )): choices = list ( zip ( choices , choices )) return cls ( name , choices = choices , multiple = multiple , ** kwargs ) # type: ignore starlette_admin.fields.DateTimeField dataclass Bases: NumberField This field is used to represent a value that stores a python datetime.datetime object Parameters: Name Type Description Default search_format Optional [ str ] moment.js format to send for searching. Use None for iso Format None output_format str display output format '%B %d, %Y %H:%M:%S' Source code in starlette_admin/fields.py 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 @dataclass class DateTimeField ( NumberField ): \"\"\" This field is used to represent a value that stores a python datetime.datetime object Parameters: search_format: moment.js format to send for searching. Use None for iso Format output_format: display output format \"\"\" input_type : str = \"datetime-local\" class_ : str = \"field-datetime form-control\" search_builder_type : str = \"moment-MMMM D, YYYY HH:mm:ss\" output_format : str = \"%B %d , %Y %H:%M:%S\" search_format : Optional [ str ] = None form_alt_format : Optional [ str ] = \"F j, Y H:i:S\" def input_params ( self ) -> str : return html_params ( { \"type\" : self . input_type , \"min\" : self . min , \"max\" : self . max , \"step\" : self . step , \"data_alt_format\" : self . form_alt_format , \"placeholder\" : self . placeholder , \"required\" : self . required , } ) async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return datetime . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> str : assert isinstance ( value , ( datetime , date , time ) ), f \"Expect datetime, got { type ( value ) } \" if action != RequestAction . EDIT : return value . strftime ( self . output_format ) return value . isoformat () def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/flatpickr.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/flatpickr.min.js\" , ) ] starlette_admin.fields.DateField dataclass Bases: DateTimeField This field is used to represent a value that stores a python datetime.date object Parameters: Name Type Description Default search_format str moment.js format to send for searching. Use None for iso Format 'YYYY-MM-DD' output_format str Set display output format '%B %d, %Y' Source code in starlette_admin/fields.py 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 @dataclass class DateField ( DateTimeField ): \"\"\" This field is used to represent a value that stores a python datetime.date object Parameters: search_format: moment.js format to send for searching. Use None for iso Format output_format: Set display output format \"\"\" input_type : str = \"date\" class_ : str = \"field-date form-control\" output_format : str = \"%B %d , %Y\" search_format : str = \"YYYY-MM-DD\" search_builder_type : str = \"moment-MMMM D, YYYY\" form_alt_format : Optional [ str ] = \"F j, Y\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return date . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None starlette_admin.fields.TimeField dataclass Bases: DateTimeField This field is used to represent a value that stores a python datetime.time object Parameters: Name Type Description Default search_format str Format to send for search. Use None for iso Format 'HH:mm:ss' output_format str Set display output format '%H:%M:%S' Source code in starlette_admin/fields.py 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 @dataclass class TimeField ( DateTimeField ): \"\"\" This field is used to represent a value that stores a python datetime.time object Parameters: search_format: Format to send for search. Use None for iso Format output_format: Set display output format \"\"\" input_type : str = \"time\" class_ : str = \"field-time form-control\" search_builder_type : str = \"moment-HH:mm:ss\" output_format : str = \"%H:%M:%S\" search_format : str = \"HH:mm:ss\" form_alt_format : Optional [ str ] = \"H:i:S\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : try : return time . fromisoformat ( form_data . get ( self . id )) # type: ignore except ( TypeError , ValueError ): return None starlette_admin.fields.JSONField dataclass Bases: BaseField This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value. Source code in starlette_admin/fields.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 @dataclass class JSONField ( BaseField ): \"\"\" This field render jsoneditor and represent a value that stores python dict object. Erroneous input is ignored and will not be accepted as a value.\"\"\" render_function_key : str = \"json\" form_template : str = \"forms/json.html\" display_template : str = \"displays/json.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Optional [ Dict [ str , Any ]]: try : value = form_data . get ( self . id ) return json . loads ( value ) if value is not None else None # type: ignore except JSONDecodeError : return None def additional_css_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"css/jsoneditor.min.css\" ) ] def additional_js_links ( self , request : Request ) -> List [ str ]: return [ request . url_for ( f \" { request . app . state . ROUTE_NAME } :statics\" , path = \"js/vendor/jsoneditor.min.js\" , ) ] starlette_admin.fields.FileField dataclass Bases: BaseField Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is filename , content-type and url . Use multiple=True for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. Source code in starlette_admin/fields.py 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @dataclass class FileField ( BaseField ): \"\"\" Renders a file upload field. This field is used to represent a value that stores starlette UploadFile object. For displaying value, this field wait for three properties which is `filename`, `content-type` and `url`. Use `multiple=True` for multiple file upload When user ask for delete on editing page, the second part of the returned tuple is True. \"\"\" multiple : bool = False render_function_key : str = \"file\" form_template : str = \"forms/file.html\" display_template : str = \"displays/file.html\" async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Tuple [ Union [ UploadFile , List [ UploadFile ], None ], bool ]: should_be_deleted = form_data . get ( f \"_ { self . id } -delete\" ) == \"on\" if self . multiple : files = form_data . getlist ( self . id ) return [ f for f in files if not is_empty_file ( f . file )], should_be_deleted # type: ignore file = form_data . get ( self . id ) return ( None if ( file and is_empty_file ( file . file )) else file ), should_be_deleted # type: ignore def _isvalid_value ( self , value : Any ) -> bool : return value is not None and all ( [ ( hasattr ( v , \"url\" ) or ( isinstance ( v , dict ) and v . get ( \"url\" , None ) is not None ) ) for v in ( value if self . multiple else [ value ]) ] ) starlette_admin.fields.ImageField dataclass Bases: FileField FileField with accept=\"image/*\" . Source code in starlette_admin/fields.py 614 615 616 617 618 619 620 621 622 @dataclass class ImageField ( FileField ): \"\"\" FileField with `accept=\"image/*\"`. \"\"\" render_function_key : str = \"image\" form_template : str = \"forms/image.html\" display_template : str = \"displays/image.html\" starlette_admin.fields.HasOne dataclass Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required Source code in starlette_admin/fields.py 656 657 658 659 660 661 @dataclass class HasOne ( RelationField ): \"\"\" Parameters: identity: Foreign ModelView identity \"\"\" starlette_admin.fields.HasMany dataclass Bases: RelationField Parameters: Name Type Description Default identity Foreign ModelView identity required Source code in starlette_admin/fields.py 664 665 666 667 668 669 670 671 @dataclass class HasMany ( RelationField ): \"\"\" Parameters: identity: Foreign ModelView identity \"\"\" multiple : bool = True starlette_admin.fields.ListField dataclass Bases: BaseField Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. Usage class MyModel : id : Optional [ int ] values : List [ str ] class ModelView ( BaseModelView ): fields = [ IntegerField ( \"id\" ), ListField ( StringField ( \"values\" )] Source code in starlette_admin/fields.py 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 @dataclass ( init = False ) class ListField ( BaseField ): \"\"\" Encapsulate an ordered list of multiple instances of the same field type, keeping data as a list. !!!usage ```python class MyModel: id: Optional[int] values: List[str] class ModelView(BaseModelView): fields = [IntegerField(\"id\"), ListField(StringField(\"values\")] ``` \"\"\" form_template : str = \"forms/list.html\" display_template : str = \"displays/list.html\" search_builder_type : str = \"array\" field : BaseField = dc_field ( default_factory = lambda : BaseField ( \"\" )) def __init__ ( self , field : BaseField , required : bool = False ) -> None : self . field = field self . name = field . name self . required = required self . __post_init__ () def __post_init__ ( self ) -> None : super () . __post_init__ () self . field . id = \"\" if isinstance ( self . field , CollectionField ): self . field . _propagate_id () async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : indices = self . _extra_indices ( form_data ) value = [] for index in indices : self . field . id = \" {} . {} \" . format ( self . id , index ) if isinstance ( self . field , CollectionField ): self . field . _propagate_id () value . append ( await self . field . parse_form_data ( request , form_data , action )) return value async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : serialized_value = [] for item in value : serialized_item_value = None if item is not None : serialized_item_value = await self . field . serialize_value ( request , item , action ) serialized_value . append ( serialized_item_value ) return serialized_value def _extra_indices ( self , form_data : FormData ) -> List [ int ]: \"\"\" Return list of all indices. For example, if field id is `foo` and form_data contains following keys ['foo.0.bar', 'foo.1.baz'], then the indices are [0,1]. Note that some numbers can be skipped. For example, you may have [0,1,3,8] as indices. \"\"\" indices = set () for k in form_data : if k . startswith ( self . id ): k = k [ len ( self . id ) + 1 :] . split ( \".\" , maxsplit = 1 )[ 0 ] if k . isdigit (): indices . add ( int ( k )) return sorted ( indices ) def _field_at ( self , idx : Optional [ int ] = None ) -> BaseField : if idx is not None : self . field . id = self . id + \".\" + str ( idx ) else : \"\"\"To generate template string to be used in javascript\"\"\" self . field . id = \"\" if isinstance ( self . field , CollectionField ): self . field . _propagate_id () return self . field def additional_css_links ( self , request : Request ) -> List [ str ]: return self . field . additional_css_links ( request ) def additional_js_links ( self , request : Request ) -> List [ str ]: return self . field . additional_js_links ( request ) starlette_admin.fields.CollectionField dataclass Bases: BaseField This field represents a collection of others fields. Can be used to represent embedded mongodb document. Usage CollectionField ( \"config\" , fields = [ StringField ( \"key\" ), IntegerField ( \"value\" , help_text = \"multiple of 5\" )]), Source code in starlette_admin/fields.py 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 @dataclass ( init = False ) class CollectionField ( BaseField ): \"\"\" This field represents a collection of others fields. Can be used to represent embedded mongodb document. !!!usage ```python CollectionField(\"config\", fields=[StringField(\"key\"), IntegerField(\"value\", help_text=\"multiple of 5\")]), ``` \"\"\" fields : Sequence [ BaseField ] = dc_field ( default_factory = list ) render_function_key : str = \"json\" form_template : str = \"forms/collection.html\" display_template : str = \"displays/collection.html\" def __init__ ( self , name : str , fields : Sequence [ BaseField ], required : bool = False ) -> None : self . name = name self . fields = fields self . required = required super () . __post_init__ () self . _propagate_id () def _extract_fields ( self , action : RequestAction = RequestAction . LIST ) -> Sequence [ BaseField ]: return extract_fields ( self . fields , action ) def _propagate_id ( self ) -> None : \"\"\"Will update fields id by adding his id as prefix (ex: category.name)\"\"\" for field in self . fields : field . id = self . id + ( \".\" if self . id else \"\" ) + field . name if isinstance ( field , type ( self )): field . _propagate_id () async def parse_form_data ( self , request : Request , form_data : FormData , action : RequestAction ) -> Any : value = {} for field in self . fields : if ( action == RequestAction . EDIT and field . exclude_from_edit ) or ( action == RequestAction . CREATE and field . exclude_from_create ): continue value [ field . name ] = await field . parse_form_data ( request , form_data , action ) return value async def serialize_value ( self , request : Request , value : Any , action : RequestAction ) -> Any : serialized_value : Dict [ str , Any ] = {} for field in self . fields : name = field . name serialized_value [ name ] = None if hasattr ( value , name ) or ( isinstance ( value , dict ) and name in value ): field_value = ( getattr ( value , name ) if hasattr ( value , name ) else value [ name ] ) if field_value is not None : serialized_value [ name ] = await field . serialize_value ( request , field_value , action ) return serialized_value def additional_css_links ( self , request : Request ) -> List [ str ]: _links = [] for f in self . fields : _links . extend ( f . additional_css_links ( request )) return _links def additional_js_links ( self , request : Request ) -> List [ str ]: _links = [] for f in self . fields : _links . extend ( f . additional_js_links ( request )) return _links","title":"Fields"},{"location":"es/api/fields/#starlette_admin.fields.TextAreaField","text":"Bases: StringField This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField] Source code in starlette_admin/fields.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 @dataclass class TextAreaField ( StringField ): \"\"\"This field is used to represent any kind of long text content. For short text contents, use [StringField][starlette_admin.fields.StringField]\"\"\" rows : int = 6 maxlength : Optional [ int ] = None minlength : Optional [ int ] = None class_ : str = \"field-textarea form-control\" form_template : str = \"forms/textarea.html\" def input_params ( self ) -> str : return html_params ( { \"rows\" : self . rows , \"minlength\" : self . minlength , \"maxlength\" : self . maxlength , \"placeholder\" : self . placeholder , \"required\" : self . required , } )","title":"TextAreaField"},{"location":"es/changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.5.1] - 2022-12-27 Fixed Fix Bug with sqlalchemy.dialects.postgresql.base.UUID column by @jowilf in #65 [0.5.0] - 2022-12-17 Added Introduce [ AdminUser ][starlette_admin.auth.AuthProvider.get_admin_user] and add navbar to show the current [ AdminUser ][starlette_admin.auth.AuthProvider.get_admin_user] information ( username and photo ) by @jowilf in #49 Internals Add auth example by @jowilf in #51 [0.4.0] - 2022-12-07 Added Custom batch actions by @jowilf in #44 Add get_list_query , get_count_query and get_search_query methods to SQLAlchemy backend that can be inherited for customization by @jowilf in #47 Internals Update datatables to 1.13.1 Update Search builder UI to fit tabler design [0.3.2] - 2022-12-02 Fixed Fix Datatables warning when primary key is not included in fields by @jowilf in #23 Docs Add spanish translation for docs/index.md by @rafnixg in #35 Internals Use Ruff for linting by @jowilf in #29 Migrate to Hatch by @jowilf in #30 Setup pre-commit by @jowilf in #33 Add support for Python 3.11 in test suite by @jowilf in #34 [0.3.1] - 2022-11-22 Fixed Fix Regression on SQLModel backend: Duplicate instances when creating or updating a model with relationships in #23 [0.3.0] - 2022-11-21 Breaking Changes Changes in ModelView definition Now Before class Post : id : int title : str admin . add_view ( ModelView ( Post , icon = \"fa fa-blog\" , label = \"Blog Posts\" )) class Post : id : int title : str class PostView ( ModelView , model = Post ): icon = \"fa fa-blog\" label = \"Blog Posts\" admin . add_view ( PostView ) Changes in CustomView definition Now Before admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) class HomeView ( CustomView ): label = \"Home\" icon = \"fa fa-home\" path = \"/home\" template_path = \"home.html\" admin . add_view ( HomeView ) Changes in Link definition Now Before admin . add_view ( Link ( label = \"Back to Home\" , icon = \"fa fa-home\" , url = \"/\" , target = \"_blank\" )) class BackToHome ( Link ): label = \"Back to Home\" icon = \"fa fa-home\" url = \"/\" target = \"_blank\" These changes are inspired from Flask-admin and are introduced to help reduce code size and keep it simple. Added Add CollectionField Add ListField Add support for Odmantic Add support for datatables responsive extensions Usage class MyModelView ( ModelView ): responsive_table = True Changed Move SQLModel to it own contrib package MongoEngine EmbeddedDocumentField is now converted into CollectionField Removed Remove PDF from default export_types [0.2.2] - 2022-09-20 Fixed Null support for EnumField in #17 [0.2.1] - 2022-09-19 Fixed Fix SearchBuilder not working with dates (SQLAlchemy) in #15 [0.2.0] - 2022-09-14 Changed Date & Time input now use Flatpickr in #10 [0.1.1] - 2022-09-09 Added Add ColorField in #7 AsyncEngine support for SQLAlchemy in #8","title":"Registro de Cambios"},{"location":"es/changelog/#added","text":"Introduce [ AdminUser ][starlette_admin.auth.AuthProvider.get_admin_user] and add navbar to show the current [ AdminUser ][starlette_admin.auth.AuthProvider.get_admin_user] information ( username and photo ) by @jowilf in #49","title":"Added"},{"location":"es/tutorial/authentication/","text":"Authentication & Authorization starlette-admin provides an optional [AuthProvider][starlette_admin.auth.AuthProvider] class for helping you to protect your admin interface from unwanted users. Authentication To enable authentication in your admin interface, inherit the [AuthProvider][starlette_admin.auth.AuthProvider] class and set auth_provider when declaring your admin app The class [AuthProvider][starlette_admin.auth.AuthProvider] has sevarals methods you need to override: [is_authenticated][starlette_admin.auth.AuthProvider.is_authenticated]: This method will be called to validate each incoming request. [get_admin_user][starlette_admin.auth.AuthProvider.get_admin_user]: Return connected user name and/or profile [login][starlette_admin.auth.AuthProvider.login]: will be called to validate user credentials. [logout][starlette_admin.auth.AuthProvider.logout]: Will be called to logout (clear sessions, cookies, ...) from starlette.requests import Request from starlette.responses import Response from starlette_admin.auth import AdminUser , AuthProvider from starlette_admin.exceptions import FormValidationError , LoginFailed users = { \"admin\" : { \"name\" : \"Admin\" , \"avatar\" : \"admin.png\" , \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"delete\" , \"action_make_published\" ], }, \"johndoe\" : { \"name\" : \"John Doe\" , \"avatar\" : None , # user avatar is optional \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"action_make_published\" ], }, \"viewer\" : { \"name\" : \"Viewer\" , \"avatar\" : \"guest.png\" , \"roles\" : [ \"read\" ]}, } class MyAuthProvider ( AuthProvider ): \"\"\" This is only for demo purpose, it's not a better way to save and validate user credentials \"\"\" async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : \"\"\"Form data validation\"\"\" raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in users and password == \"password\" : \"\"\"Save `username` in session\"\"\" request . session . update ({ \"username\" : username }) return response raise LoginFailed ( \"Invalid username or password\" ) async def is_authenticated ( self , request ) -> bool : if request . session . get ( \"username\" , None ) in users : \"\"\" Save current `user` object in the request state. Can be used later to restrict access to connected user. \"\"\" request . state . user = users . get ( request . session [ \"username\" ]) return True return False def get_admin_user ( self , request : Request ) -> AdminUser : user = request . state . user # Retrieve current user photo_url = None if user [ \"avatar\" ] is not None : photo_url = request . url_for ( \"static\" , path = user [ \"avatar\" ]) return AdminUser ( username = user [ \"name\" ], photo_url = photo_url ) async def logout ( self , request : Request , response : Response ) -> Response : request . session . clear () return response Authorization For all views Each [view][starlette_admin.views.BaseView] implement [is_accessible][starlette_admin.views.BaseView.is_accessible] method which can be used to restrict access to current user. from starlette_admin import CustomView from starlette.requests import Request class ReportView ( CustomView ): def is_accessible ( self , request : Request ) -> bool : return \"admin\" in request . state . user [ \"roles\" ] Important When view is inaccessible, it does not appear in menu structure For [ModelView][starlette_admin.views.BaseModelView] In [ModelView][starlette_admin.views.BaseModelView], there is four additional methods you can override to restrict access to current user. can_view_details : Permission for viewing full details of Items can_create : Permission for creating new Items can_edit : Permission for editing Items can_delete : Permission for deleting Items is_action_allowed : verify if action with name is allowed. from starlette_admin.contrib.sqla import ModelView from starlette.requests import Request from starlette_admin import action class ArticleView ( ModelView ): exclude_fields_from_list = [ Article . body ] def can_view_details ( self , request : Request ) -> bool : return \"read\" in request . state . user [ \"roles\" ] def can_create ( self , request : Request ) -> bool : return \"create\" in request . state . user [ \"roles\" ] def can_edit ( self , request : Request ) -> bool : return \"edit\" in request . state . user [ \"roles\" ] def can_delete ( self , request : Request ) -> bool : return \"delete\" in request . state . user [ \"roles\" ] async def is_action_allowed ( self , request : Request , name : str ) -> bool : if name == \"make_published\" : return \"action_make_published\" in request . state . user [ \"roles\" ] return await super () . is_action_allowed ( request , name ) @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : ... return \" {} articles were successfully marked as published\" . format ( len ( pks )) Example For a working example, have a look at https://github.com/jowilf/starlette-admin/tree/main/examples/auth","title":"Autenticaci\u00f3n"},{"location":"es/tutorial/authentication/#authentication-authorization","text":"starlette-admin provides an optional [AuthProvider][starlette_admin.auth.AuthProvider] class for helping you to protect your admin interface from unwanted users.","title":"Authentication &amp; Authorization"},{"location":"es/tutorial/authentication/#authentication","text":"To enable authentication in your admin interface, inherit the [AuthProvider][starlette_admin.auth.AuthProvider] class and set auth_provider when declaring your admin app The class [AuthProvider][starlette_admin.auth.AuthProvider] has sevarals methods you need to override: [is_authenticated][starlette_admin.auth.AuthProvider.is_authenticated]: This method will be called to validate each incoming request. [get_admin_user][starlette_admin.auth.AuthProvider.get_admin_user]: Return connected user name and/or profile [login][starlette_admin.auth.AuthProvider.login]: will be called to validate user credentials. [logout][starlette_admin.auth.AuthProvider.logout]: Will be called to logout (clear sessions, cookies, ...) from starlette.requests import Request from starlette.responses import Response from starlette_admin.auth import AdminUser , AuthProvider from starlette_admin.exceptions import FormValidationError , LoginFailed users = { \"admin\" : { \"name\" : \"Admin\" , \"avatar\" : \"admin.png\" , \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"delete\" , \"action_make_published\" ], }, \"johndoe\" : { \"name\" : \"John Doe\" , \"avatar\" : None , # user avatar is optional \"roles\" : [ \"read\" , \"create\" , \"edit\" , \"action_make_published\" ], }, \"viewer\" : { \"name\" : \"Viewer\" , \"avatar\" : \"guest.png\" , \"roles\" : [ \"read\" ]}, } class MyAuthProvider ( AuthProvider ): \"\"\" This is only for demo purpose, it's not a better way to save and validate user credentials \"\"\" async def login ( self , username : str , password : str , remember_me : bool , request : Request , response : Response , ) -> Response : if len ( username ) < 3 : \"\"\"Form data validation\"\"\" raise FormValidationError ( { \"username\" : \"Ensure username has at least 03 characters\" } ) if username in users and password == \"password\" : \"\"\"Save `username` in session\"\"\" request . session . update ({ \"username\" : username }) return response raise LoginFailed ( \"Invalid username or password\" ) async def is_authenticated ( self , request ) -> bool : if request . session . get ( \"username\" , None ) in users : \"\"\" Save current `user` object in the request state. Can be used later to restrict access to connected user. \"\"\" request . state . user = users . get ( request . session [ \"username\" ]) return True return False def get_admin_user ( self , request : Request ) -> AdminUser : user = request . state . user # Retrieve current user photo_url = None if user [ \"avatar\" ] is not None : photo_url = request . url_for ( \"static\" , path = user [ \"avatar\" ]) return AdminUser ( username = user [ \"name\" ], photo_url = photo_url ) async def logout ( self , request : Request , response : Response ) -> Response : request . session . clear () return response","title":"Authentication"},{"location":"es/tutorial/authentication/#for-all-views","text":"Each [view][starlette_admin.views.BaseView] implement [is_accessible][starlette_admin.views.BaseView.is_accessible] method which can be used to restrict access to current user. from starlette_admin import CustomView from starlette.requests import Request class ReportView ( CustomView ): def is_accessible ( self , request : Request ) -> bool : return \"admin\" in request . state . user [ \"roles\" ] Important When view is inaccessible, it does not appear in menu structure","title":"For all views"},{"location":"es/tutorial/authentication/#for-modelviewstarlette_adminviewsbasemodelview","text":"In [ModelView][starlette_admin.views.BaseModelView], there is four additional methods you can override to restrict access to current user. can_view_details : Permission for viewing full details of Items can_create : Permission for creating new Items can_edit : Permission for editing Items can_delete : Permission for deleting Items is_action_allowed : verify if action with name is allowed. from starlette_admin.contrib.sqla import ModelView from starlette.requests import Request from starlette_admin import action class ArticleView ( ModelView ): exclude_fields_from_list = [ Article . body ] def can_view_details ( self , request : Request ) -> bool : return \"read\" in request . state . user [ \"roles\" ] def can_create ( self , request : Request ) -> bool : return \"create\" in request . state . user [ \"roles\" ] def can_edit ( self , request : Request ) -> bool : return \"edit\" in request . state . user [ \"roles\" ] def can_delete ( self , request : Request ) -> bool : return \"delete\" in request . state . user [ \"roles\" ] async def is_action_allowed ( self , request : Request , name : str ) -> bool : if name == \"make_published\" : return \"action_make_published\" in request . state . user [ \"roles\" ] return await super () . is_action_allowed ( request , name ) @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : ... return \" {} articles were successfully marked as published\" . format ( len ( pks ))","title":"For [ModelView][starlette_admin.views.BaseModelView]"},{"location":"es/tutorial/batch-actions/","text":"Batch Actions By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious. In these cases, you can write a custom batch action to bulk update many objects at once. Note starlette-admin add by default an action to delete many object at once To add other batch actions to your [ModelView][starlette_admin.views.BaseModelView], besides the default delete action, you can define a function that implements the desired logic and wrap it with the [@action][starlette_admin.actions.action] decorator (Heavily inspired by Flask-Admin). Example from typing import List , Any from starlette.requests import Request from starlette_admin import action from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import ActionFailed class ArticleView ( ModelView ): actions = [ \"make_published\" , \"delete\" ] # `delete` function is added by default @action ( name = \"make_published\" , text = \"Mark selected articles as published\" , confirmation = \"Are you sure you want to mark selected articles as published ?\" , submit_btn_text = \"Yes, proceed\" , submit_btn_class = \"btn-success\" , ) async def make_published_action ( self , request : Request , pks : List [ Any ]) -> str : # Write your logic here if ... : # Display meaningfully error raise ActionFailed ( \"Sorry, We can't proceed this action now.\" ) # Display successfully message return \" {} articles were successfully marked as published\" . format ( len ( pks ))","title":"Batch Actions"},{"location":"es/tutorial/batch-actions/#batch-actions","text":"By default, to update an object, you must select it in the list page and update it. This works well for a majority of use cases. However, if you need to make the same change to many objects at once, this workflow can be quite tedious. In these cases, you can write a custom batch action to bulk update many objects at once. Note starlette-admin add by default an action to delete many object at once To add other batch actions to your [ModelView][starlette_admin.views.BaseModelView], besides the default delete action, you can define a function that implements the desired logic and wrap it with the [@action][starlette_admin.actions.action] decorator (Heavily inspired by Flask-Admin).","title":"Batch Actions"},{"location":"es/tutorial/configurations/modelview/","text":"ModelView Configurations Multiple options are available to customize your ModelView. For a complete list, have a look at the API documentation for [BaseModelView()][starlette_admin.views.BaseModelView]. Here are some of the most commonly used options: Fields Use fields property to customize which fields to include in admin view. from sqlalchemy import JSON , Column , Integer , String , Text , create_engine from sqlalchemy.ext.declarative import declarative_base from starlette.applications import Starlette from starlette_admin import TagsField from starlette_admin.contrib.sqla import Admin , ModelView Base = declarative_base () engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) class Post ( Base ): __tablename__ = \"posts\" id = Column ( Integer , primary_key = True ) title = Column ( String ) tags = Column ( JSON ) content = Column ( Text ) class PostView ( ModelView ): fields = [ \"id\" , \"title\" , Post . content , TagsField ( \"tags\" , label = \"Tags\" )] app = Starlette () admin = Admin ( engine ) admin . add_view ( PostView ( Post , icon = \"fa fa-blog\" )) admin . mount_to ( app ) Exclusions There are several options to help you exclude some fields from certain part of admin interface. The options are: exclude_fields_from_list : List of fields to exclude in List page. exclude_fields_from_detail : List of fields to exclude in Detail page. exclude_fields_from_create : List of fields to exclude from creation page. exclude_fields_from_edit : List of fields to exclude from editing page. class PostView ( ModelView ): exclude_fields_from_list = [ Post . content , Post . tags ] Searching & Sorting Two options are available to specify which fields can be sorted or searched. searchable_fields for list of searchable fields sortable_fields for list of orderable fields Usage class PostView ( ModelView ): sortable_fields = [ Post . id , \"title\" ] searchable_fields = [ Post . id , Post . title , \"tags\" ] Exporting You can export your data from list page. The export options can be set per model and includes the following options: export_fields : List of fields to include in exports. export_types : A list of available export filetypes. Available exports are ['csv', 'excel', 'pdf', 'print'] . Only pdf is disable by default. Example from starlette_admin import ExportType class PostView ( ModelView ): export_fields = [ Post . id , Post . content , Post . tags ] export_types = [ ExportType . CSV , ExportType . EXCEL ] Pagination The pagination options in the list page can be configured. The available options are: page_size : Default number of items to display in List page pagination. Default value is set to 10 . page_size_options : Pagination choices displayed in List page. Default value is set to [10, 25, 50, 100] . Use -1 to display All Example class PostView ( ModelView ): page_size = 5 page_size_options = [ 5 , 10 , 25 , 50 , - 1 ] Templates The template files are built using Jinja2 and can be completely overridden in the configurations. The pages available are: list_template : List view template. Default is list.html . detail_template : Details view template. Default is detail.html . create_template : Edit view template. Default is create.html . edit_template : Edit view template. Default is edit.html . Example class PostView ( ModelView ): detail_template = \"post_detail.html\" Datatables Extensions starlette-admin includes some datatable extensions by default. You can disable any of these extensions in your ModelView by overridden following options: column_visibility : Enable/Disable column visibility extension search_builder : Enable/Disable search builder extension responsive_table : Enable/Disable responsive extension Example class PostView ( ModelView ): column_visibility = False search_builder = False responsive_table = True","title":"ModelView"},{"location":"es/tutorial/configurations/modelview/#modelview-configurations","text":"Multiple options are available to customize your ModelView. For a complete list, have a look at the API documentation for [BaseModelView()][starlette_admin.views.BaseModelView]. Here are some of the most commonly used options:","title":"ModelView Configurations"},{"location":"es/tutorial/files/","text":"Managing files Starlette-Admin has out-of-the-box support for SQLAlchemy-file and Gridfs through Mongoengine FileField & ImageField SQLAlchemy & SQLModel All you need is to add ImageField or FileField from SQLAlchemy-file to your model from sqlalchemy import Column , Integer , String from sqlalchemy.orm import declarative_base from sqlalchemy_file import FileField , ImageField from starlette_admin.contrib.sqla import ModelView Base = declarative_base () class Book ( Base ): __tablename__ = \"book\" id = Column ( Integer , autoincrement = True , primary_key = True ) title = Column ( String ( 50 ), unique = True ) cover = Column ( ImageField ( thumbnail_size = ( 128 , 128 ))) content = Column ( FileField ) class BookView ( ModelView ): pass admin . add_view ( BookView ( Book )) Note You can also use multiple=True to save multiple files. MongoEngine Starlette-Admin support ImageField and FileField from mongoengine import Document , FileField , ImageField , StringField from starlette_admin.contrib.mongoengine import ModelView class Book ( Document ): title = StringField ( max_length = 50 ) cover = ImageField ( thumbnail_size = ( 128 , 128 )) content = FileField () class BookView ( ModelView ): pass admin . add_view ( BookView ( Book ))","title":"Administrando Archivos"},{"location":"es/tutorial/getting-started/","text":"Getting started Initialization The first step is to initialize an empty admin interface for your app: SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) from starlette_admin.contrib.mongoengine import Admin admin = Admin () from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin engine = AIOEngine () admin = Admin ( engine ) Adding Views ModelView Model views allow you to add a dedicated set of admin pages for managing any model. SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette_admin.contrib.sqla import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from sqlalchemy import create_engine from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import User , Post engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) from odmantic import AIOEngine from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) This gives you a set of fully featured CRUD views for your model: A list view , with support for searching, sorting, filtering, and deleting records. A create view for adding new records. An edit view for updating existing records. A read-only details view . CustomView With [CustomView][starlette_admin.views.CustomView] you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. from starlette_admin import CustomView admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) To have a full control of the rendering, override the render methods from starlette.requests import Request from starlette.responses import Response from starlette.templating import Jinja2Templates from starlette_admin import CustomView class HomeView ( CustomView ): async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : return templates . TemplateResponse ( \"home.html\" , { \"request\" : request , \"latest_posts\" : ... , \"top_users\" : ... } ) admin . add_view ( HomeView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" )) Link Use [Link][starlette_admin.views.Link] to add arbitrary hyperlinks to the menu from starlette_admin.views import Link admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" )) DropDown Use [DropDown][starlette_admin.views.DropDown] to group views together in menu structure from starlette_admin import CustomView , DropDown from starlette_admin.contrib.sqla import ModelView from starlette_admin.views import Link from .models import User admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) ) Mount admin to your app The last step is to mount the admin interfaces to your app SQLAlchemy SQLModel MongoEngine ODMantic from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqla import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from sqlalchemy import create_engine from starlette.applications import Starlette from starlette_admin.contrib.sqlmodel import Admin , ModelView from .models import Post , User engine = create_engine ( \"sqlite:///test.db\" , connect_args = { \"check_same_thread\" : False }) app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from starlette.applications import Starlette from starlette_admin.contrib.mongoengine import Admin , ModelView from .models import Post , User app = Starlette () # FastAPI() admin = Admin () admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) from odmantic import AIOEngine from starlette.applications import Starlette from starlette_admin.contrib.odmantic import Admin , ModelView from .models import Post , User engine = AIOEngine () app = Starlette () # FastAPI() admin = Admin ( engine ) admin . add_view ( ModelView ( User )) admin . add_view ( ModelView ( Post )) admin . mount_to ( app ) You can now access your admin interfaces in your browser at http://localhost:8000/admin","title":"Empezando"},{"location":"es/tutorial/getting-started/#customview","text":"With [CustomView][starlette_admin.views.CustomView] you can add your own views (not tied to any particular model). For example, a custom home page that displays some analytics data. from starlette_admin import CustomView admin . add_view ( CustomView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" , template_path = \"home.html\" )) To have a full control of the rendering, override the render methods from starlette.requests import Request from starlette.responses import Response from starlette.templating import Jinja2Templates from starlette_admin import CustomView class HomeView ( CustomView ): async def render ( self , request : Request , templates : Jinja2Templates ) -> Response : return templates . TemplateResponse ( \"home.html\" , { \"request\" : request , \"latest_posts\" : ... , \"top_users\" : ... } ) admin . add_view ( HomeView ( label = \"Home\" , icon = \"fa fa-home\" , path = \"/home\" ))","title":"CustomView"},{"location":"es/tutorial/getting-started/#link","text":"Use [Link][starlette_admin.views.Link] to add arbitrary hyperlinks to the menu from starlette_admin.views import Link admin . add_view ( Link ( label = \"Home Page\" , icon = \"fa fa-link\" , url = \"/\" ))","title":"Link"},{"location":"es/tutorial/getting-started/#dropdown","text":"Use [DropDown][starlette_admin.views.DropDown] to group views together in menu structure from starlette_admin import CustomView , DropDown from starlette_admin.contrib.sqla import ModelView from starlette_admin.views import Link from .models import User admin . add_view ( DropDown ( \"Resources\" , icon = \"fa fa-list\" , views = [ ModelView ( User ), Link ( label = \"Home Page\" , url = \"/\" ), CustomView ( label = \"Dashboard\" , path = \"/dashboard\" , template_path = \"dashboard.html\" ), ], ) )","title":"DropDown"},{"location":"es/tutorial/multiple-admin/","text":"Multiple Admin You can add multiple admin to your app with different or same views. To manage this, simply use different base_url and route_name from starlette.applications import Starlette from starlette_admin import BaseAdmin as Admin from starlette_admin.contrib.sqla import ModelView app = Starlette () admin1 = Admin ( \"Admin1\" , base_url = \"/admin1\" , route_name = \"admin1\" , templates_dir = \"templates/admin1\" ) admin1 . add_view ( ModelView ( Report )) admin1 . add_view ( ModelView ( Post )) admin1 . mount_to ( app ) admin2 = Admin ( \"Admin2\" , base_url = \"/admin2\" , route_name = \"admin2\" , templates_dir = \"templates/admin2\" ) admin2 . add_view ( ModelView ( Post )) admin2 . add_view ( ModelView ( User )) admin2 . mount_to ( app ) assert app . url_path_for ( \"admin1:index\" ) == \"/admin1/\" assert app . url_path_for ( \"admin2:index\" ) == \"/admin2/\"","title":"Multiples Admin"},{"location":"es/tutorial/validations/","text":"Forms Validations By design, Starlette-admin doesn't validate your data, the validation will depend on your database backend SQLAlchemy When working with sqlalchemy, you need to write your own validation logic to validate the data submitted in forms. Example from starlette_admin.contrib.sqla import ModelView from starlette_admin.exceptions import FormValidationError class PostView ( ModelView ): async def validate ( self , request : Request , data : Dict [ str , Any ]) -> None : \"\"\"Raise FormValidationError to display error in forms\"\"\" errors : Dict [ str , str ] = dict () _2day_from_today = date . today () + timedelta ( days = 2 ) if data [ \"title\" ] is None or len ( data [ \"title\" ]) < 3 : errors [ \"title\" ] = \"Ensure this value has at least 03 characters\" if data [ \"text\" ] is None or len ( data [ \"text\" ]) < 10 : errors [ \"text\" ] = \"Ensure this value has at least 10 characters\" if data [ \"date\" ] is None or data [ \"date\" ] < _2day_from_today : errors [ \"date\" ] = \"We need at least one day to verify your post\" if data [ \"publisher\" ] is None : errors [ \"publisher\" ] = \"Publisher is required\" if data [ \"tags\" ] is None or len ( data [ \"tags\" ]) < 1 : errors [ \"tags\" ] = \"At least one tag is required\" if len ( errors ) > 0 : raise FormValidationError ( errors ) return await super () . validate ( request , data ) Info Full example available here SQLModel For SQLModel, you just need to define your model and submitted data are automatically validated. Example from sqlmodel import SQLModel , Field from pydantic import validator class Post ( SQLModel , table = True ): id : Optional [ int ] = Field ( primary_key = True ) title : str = Field () content : str = Field ( min_length = 10 ) views : int = Field ( multiple_of = 4 ) @validator ( 'title' ) def title_must_contain_space ( cls , v ): if ' ' not in v : raise ValueError ( 'title must contain a space' ) return v . title () Info Full example available here Odmantic The submitted data will be automatically validated according to your model definition. Example from typing import List , Optional from odmantic import EmbeddedModel , Field , Model from pydantic import EmailStr class Address ( EmbeddedModel ): street : str = Field ( min_length = 3 ) city : str = Field ( min_length = 3 ) state : Optional [ str ] zipcode : Optional [ str ] class Author ( Model ): first_name : str = Field ( min_length = 3 ) last_name : str = Field ( min_length = 3 ) email : Optional [ EmailStr ] addresses : List [ Address ] = Field ( default_factory = list ) Info Full example available here MongoEngine The submitted data will be automatically validated according to your model definition. Example import mongoengine as db class Comment ( db . EmbeddedDocument ): name = db . StringField ( min_length = 3 , max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) class Post ( db . Document ): name = db . StringField ( max_length = 20 , required = True ) value = db . StringField ( max_length = 20 ) inner = db . ListField ( db . EmbeddedDocumentField ( Comment )) lols = db . ListField ( db . StringField ( max_length = 20 )) Info Full example available here","title":"Validaci\u00f3n de Formularios"}]}